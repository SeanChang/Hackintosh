{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hackintosh How To Guides","text":"<p>Hackintosh is doomed to become history. However, it's a pity that until Hackintosh is about to fade away, there hasn't been a set of tutorials suitable for beginners to learn in China. So i took the time to write this series of Hackintosh tutorials from scratch. While helping others, it can also prove that I have been in the field of Hackintosh.</p> <p>Actually, the OpenCore official documentationis already very good. Most of the content of this tutorial will also be borrowed from the OpenCore official documentation. The original files of this tutorial have also been open - sourced, and the project address is:https://github.com/SeanChang/Hackintosh</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Introduction</p>"},{"location":"#basic-knowledge","title":"Basic knowledge","text":"<p>Basic knowledge</p>"},{"location":"#usb-flash-drive-creation","title":"USB flash drive creation","text":"<p>USB flash drive creation</p>"},{"location":"#preparation","title":"Preparation","text":"<p>Preparation</p>"},{"location":"#opencore-configuration","title":"OpenCore Configuration","text":"<p>OpenCore Configuration</p>"},{"location":"#demonstration","title":"Demonstration","text":"<p>Demonstration</p>"},{"location":"#professional-customization","title":"Professional customization","text":"<p>Professional customization</p>"},{"location":"#perfect-hackintosh","title":"Perfect Hackintosh","text":"<p>Perfect Hackintosh</p>"},{"location":"#opencore-error-troubleshooting","title":"OpenCore Error Troubleshooting","text":"<p>OpenCore Error Troubleshooting</p>"},{"location":"#frequently-asked-questions-faq","title":"Frequently Asked Questions (FAQ)","text":"<p>Frequently Asked Questions (FAQ)</p>"},{"location":"Basic%20knowledge/Drivers/","title":"Drivers","text":""},{"location":"Basic%20knowledge/Drivers/#hardware","title":"Hardware","text":"<p>The closer the hardware of a Hackintosh is to that of a genuine Mac, the smoother the Hackintosh installation process will be, and the higher the final completion rate will also be.</p> <p>Due to limited time, it's inevitable that there are omissions in the information in this document. For now, the safest way is to do a lot of Google or Baidu searches before buying hardware to see if it can support Hackintosh. This can help you avoid some pitfalls.</p>"},{"location":"Basic%20knowledge/Drivers/#cpu-support","title":"CPU Support","text":""},{"location":"Basic%20knowledge/Drivers/#do-the-11th-and-12th-generation-cpus-support-it","title":"Do the 11th - and 12th - Generation CPUs Support It?","text":"<p>The CPU itself can be driven. The key problem is that the integrated graphics can't work. This means you must have a discrete graphics card that doesn't require additional drivers. Because few laptops are equipped with such discrete graphics cards (and they also need to support direct connection of discrete graphics cards), so for the 11th - and 12th - Generation laptops, there is basically no solution. There are indeed a few laptops equipped with AMD CPUs and AMD discrete graphics cards, but they are not cheap. Moreover, the AMD CPUs are not perfect either, and the virtualization function doesn't work. Of course, there are many other minor problems and I won't list them one by one.</p>"},{"location":"Basic%20knowledge/Drivers/#desktop-cpus","title":"Desktop CPUs","text":"<p>Take your CPU code and architecture as the standard. The following examples are for reference only. The CPU models are so chaotic that the list is not complete.</p> CPU Penryn Yonah Conroe Merom Penryn Lynnfield Clarkdale Sandy Bridge Ivy Bridge Haswell Broadwell SkyLake Kaby Lake Coffee Lake Comet Lake <p>The current integrated graphics (UHD 730/750) of the 11th - generation Intel CPU can't be driven, and it's not very perfect for Hackintosh. If you don't care about the integrated graphics, you can consider directly using the 12th - generation Intel CPU, which has stronger performance. It's great to pair it with a discrete graphics card that doesn't require additional drivers:</p> <p>To make the 12th - generation Core imitate the 10th - generation Core, just add the following content in config.plist \u2192 Kernel \u2192 Emulate of OpenCore:</p> <ul> <li>Cpuid1Data: <code>55060A00 00000000 00000000 00000000</code></li> <li>Cpuid1Mask: <code>FFFFFFFF 00000000 00000000 00000000</code></li> </ul>"},{"location":"Basic%20knowledge/Drivers/#laptop-cpu","title":"Laptop CPU","text":"<p>Take your CPU code and architecture as the standard. The following examples are for reference only. The CPU models are so chaotic that the list is not complete.</p> CPU \u4ee3\u53f7 Clarksfield Arrandale Sandy Bridge Ivy Bridge Haswell Broadwell SkyLake Kaby Lake Whiskey Lake Coffee Lake Comet Lake Ice Lake"},{"location":"Basic%20knowledge/Drivers/#high-end-desktop-cpu","title":"High - end Desktop CPU","text":"<p>It depends on the code and architecture of your CPU. The following examples are for reference only. The CPU models are in chaos, so the list is incomplete.</p> CPU Nehalem Westmere Sandy Bridge-E Ivy Bridge-E Haswell-E Broadwell-E Skylake-X/W Cascade Lake-X/W"},{"location":"Basic%20knowledge/Drivers/#amd-cpu","title":"AMD CPU","text":"<p>It depends on the code and architecture of your CPU. The following examples are for reference only. The CPU models are in chaos, so the list is incomplete.</p> CPU Bulldozer(15h) Jaguar(16h) Ryzen Threadripper(17h and 19h) <p>The Ryzen APU laptop series can't be used basically even if Hackintosh is installed well because the discrete graphics card can't be driven. Unless your laptop is equipped with an AMD CPU and also a discrete AMD graphics card that doesn't require additional drivers (this is the case for very few and expensive devices), but the price of such laptops is usually very high. You can buy a brand - new MBP instead, so there's no need to hack.</p>"},{"location":"Basic%20knowledge/Drivers/#gpu-support","title":"GPU Support","text":"<p>Graphics cards are also quite diverse, and it's hard to list them all completely. It's recommended to make sure there are successful cases of your graphics card model before purchasing. The graphics card driver situation can generally be referred to as follows:</p> <ul> <li> <p>AMD GPU support situation:</p> </li> <li> <p>AMD's APU series can't be driven currently.</p> </li> <li> <p>AMD's discrete graphics cards have had good driver support since the GCN architecture.</p> </li> <li> <p>Intel GPU support situation:</p> </li> <li> <p>macOS doesn't support low - end GT1 iGPUs on Pentium, Celeron, and Atom.</p> </li> <li>The vast majority of Intel integrated graphics can be well - driven.</li> <li> <p>Theoretically, the strongest integrated graphics is i7 - 1065G7, followed by the Iris series, and then the UHD and HD series.</p> </li> <li> <p>NVIDIA GPU support situation:</p> </li> <li> <p>The Maxwell (9XX) and Pascal (10XX) series can only be installed up to macOS 10.13 High Sierra at most.</p> </li> <li>The Turing (20XX, 16XX) series currently has no solution.</li> <li>The Ampere (30XX) series currently has no solution.</li> <li>The Kepler (6XX, 7XX) series currently supports the latest version of macOS because MBP was equipped with this graphics card in history.</li> </ul> <p>GPU models are also too diverse. These are not within the scope of this tutorial. The official summary of OpenCore is already very detailed. You can refer to:</p> <p>GPU Buyers Guide - Graphics Card Purchase Guide</p>"},{"location":"Basic%20knowledge/Drivers/#motherboard-support","title":"Motherboard Support","text":"<p>The vast majority of motherboards can be driven. I still recommend choosing motherboards with more BIOS functions as much as possible because Hackintosh requires adjusting many BIOS options. Motherboards with overly simplified BIOS are not very perfect for hacking.</p> <p>Here are some small tips for motherboard selection:</p> <ul> <li>Gigabyte B250M and B360M can't make the discrete and integrated graphics work perfectly, so they are not highly recommended.</li> <li>If the BIOS is set to integrated graphics output, if your monitor's HDMI/DP is plugged into the discrete graphics card, the screen will be black until you enter the system.</li> <li>If the BIOS is set to discrete graphics output, although you can enter the system, you will find that the integrated graphics is blocked by the motherboard, resulting in abnormal dual - hardware decoding.</li> <li>The perfect method is to set the integrated graphics output, plug the monitor into the integrated graphics to light up the screen, enter the password to enter the system, and then plug in the discrete graphics. At this time, the dual - hardware decoding is normal (it's really a pain).</li> <li>Motherboards with the CFG Lock option in the BIOS settings are preferred, which can bring a better Hackintosh experience.</li> <li>X79, X99, X299, C422, C612, and C621 don't support macOS NVRAM reading and writing, which is also a pitfall, and it's not recommended to buy them.</li> <li>For laptop motherboards, motherboards that support the S3 sleep mode are preferred, which can make the sleep consume less power.</li> <li>Starting from the 10th - generation CPU in laptops, many motherboard manufacturers use the S0 modern sleep mode instead of S3, resulting in very imperfect power consumption during sleep.</li> </ul>"},{"location":"Basic%20knowledge/Drivers/#hard-disk-support","title":"Hard Disk Support","text":"<p>All eMMC hard disks can't be driven (commonly found in some tablets or low - end laptops). Basically, all SATA hard disks are supported. A small number of NVME - protocol hard disks can't work perfectly, and may even cause kernel panics during installation. It's recommended to use all NVME hard disks with NVMeFix.kext. Here are some tips related to hard disks for your reference:</p> <ul> <li>List of hard disks with imperfect TRIM operation (can be used with TRIM disabled)</li> <li>Samsung 950 Pro</li> <li>Samsung 960 Evo/Pro</li> <li> <p>Samsung 970 Evo/Pro (there are many mysterious problems. It's recommended to block them if there are mysterious problems)</p> </li> <li> <p>List of hard disks with perfect TRIM operation</p> </li> <li>Western Digital Blue SN550</li> <li>Western Digital Blue SN570</li> <li>Western Digital Black SN700</li> <li>Western Digital Black SN720</li> <li>Western Digital Black SN750 (also called SanDisk Extreme PRO. It can be installed when the performance mode is turned off)</li> <li>Western Digital Black SN850 (more tests are needed)</li> <li>SK Hynix PC401 HFS512GD9TNG - 62A0A (comes with Alienware laptops)</li> <li>ADATA XPG S11L Pro, S50 Lite, 8200 Pro. It seems that ADATA series are all good for Hackintosh.</li> <li>SanDisk Ultra 3D NVme. It seems that SanDisk series are all good for Hackintosh.</li> <li>Hikvision C2000, C2000 Pro series. It seems that Hikvision series are all good for Hackintosh, but the quality is a concern.</li> <li> <p>Lexar series, Guangwei series, Crucial series, Pioneer APS - SE20G series, YMTC AH530, Plextor M6S, Lite - On SSD</p> </li> <li> <p>Incompatible with IONVMeFamily or having other strange problems (the system will freeze when booting up with code running. Try not to choose them)</p> </li> <li>Gigabyte 512 GB GIGABYTE M.2 PCIe SSD (such as GP - GSM2NE8512GNTD)</li> <li>ADATA Swordfish 2 TB M.2 - 2280</li> <li>SK Hynix HFS001TD9TNG - L5B0B, HFS512GD9TNG - L2A0A, HFS512GD9TNI - L2A0B</li> <li>SK Hynix P31, P711</li> <li>SK Hynix BC501/PC601/PC611/PC711/BC501 (mainly found in Lenovo and Dell laptops. Some batches can't install macOS)</li> <li>Samsung PM961/PM981/PM981a/PM991 series (MZVLB256HAHQ, etc.)</li> <li>Samsung 983ZET, SAMSUNGKLFGGAR4AA - K0T0</li> <li>Micron 2200V MTFDHBA512TCK, Micron 2200S</li> <li>Intel 600P/660P/760P series (with some strange problems)</li> <li>Kingston A2000 (needs to be paired with NVMeFix.kext), KINGSTONSA2000M8500G</li> <li>Asgard AN2 series</li> <li> <p>Asgard AN3 + (STAR1000P)</p> <ul> <li>May also need to be paired with Kexts patch:</li> </ul> <pre><code>IONVMeFamily   F6C1100F 85440100 00  F6C1010F 85440100 00\n</code></pre> </li> <li> <p>Kioxia - EXCERIA PLUS</p> </li> <li>Netac NVME SSD 480</li> <li>Plextor M9P Plus PX - 512M9PGN</li> </ul> <p>Although some of these models can fix kernel panics later with NVMeFix.kext, there may still be some minor problems. For beginners, it's still recommended to change hard disks and avoid these models.</p>"},{"location":"Basic%20knowledge/Drivers/#wired-network-card","title":"Wired Network Card","text":"<p>Almost all wired network adapters have some form of support in macOS, either through built - in drivers or kexts made by the community. However, there are also some tricky models:</p> <ul> <li> <p>Intel I225 2.5Gb Network Card</p> </li> <li> <p>May be equipped on high - end desktop Comet Lake motherboards</p> </li> <li>Possible solutions: Source and Example</li> <li> <p>There are new problems in macOS 12.3. Refer to the 12th question in QA</p> </li> <li> <p>Intel I350 1Gb Server Network Card</p> </li> <li> <p>May be equipped on various generations of Intel and Supermicro server motherboards</p> </li> <li> <p>Solution</p> </li> <li> <p>Intel 10Gb Server Network Card</p> </li> <li> <p>Possible workarounds for X520 and X540 chipsets</p> </li> <li> <p>Mellanox and Qlogic Server Network Cards</p> </li> </ul>"},{"location":"Basic%20knowledge/Drivers/#wireless-network-card","title":"Wireless Network Card","text":"<p>Most of the wireless network cards that come with laptops are not supported by the native system. The best choice is the Broadcom network cards used in genuine Macs.</p> <p>For more details about network cards, refer to: WiFi Buyers Guide The following mainly lists the Broadcom series of network cards that don't require additional drivers:</p>"},{"location":"Basic%20knowledge/Drivers/#broadcom-pcie-network-cards","title":"Broadcom PCIe Network Cards","text":"<ul> <li>BCM943602CDP</li> <li>BCM943602CD</li> <li>BCM94360CD</li> <li>Fenvi FV T919 (Bluetooth 4.0)</li> <li>Fenvi AC1900 (no Bluetooth, End - of - Life)</li> <li>TP - LINK Archer T9E AC1900 (no Bluetooth, End - of - Life)</li> <li>TP - LINK Archer T8E (no Bluetooth)</li> <li>RNX - AC1900PCE (no Bluetooth)</li> <li>ASUS PCE - AC66 (no Bluetooth)</li> <li>ASUS PCE - AC68 (no Bluetooth)</li> <li>BCM94331CD (may require forced kext loading in Catalina)</li> <li>BCM94360CS2</li> <li>Fenvi FV - HB1200 (Bluetooth 4.0)</li> <li>AWD wireless network card (no Bluetooth)</li> <li>BCM943602CS</li> <li>BCM94360CSAX</li> <li>BCM94360CS</li> <li>BCM94352Z</li> <li>TP - LINK Archer T6 (no Bluetooth)</li> <li>Rosewill RNX - AC1300PCE (no Bluetooth)</li> <li>ASUS PCE - AC56 (no Bluetooth)</li> <li>BCM94350ZAE</li> </ul>"},{"location":"Basic%20knowledge/Drivers/#broadcom-mini-pcie","title":"Broadcom Mini PCIe","text":"<ul> <li>BCM94360HMB (ABGN + AC, BT 4.0, 3x3:3):</li> <li>AzureWave AW - CB160H</li> <li>Alpha Networks WMC - AC01</li> <li>Arcadyan WN8833B - AC</li> <li>Gemtek WMDB - 150AC</li> <li>Unex DAXB - 81</li> <li>Wistron NeWeb DNXB - C1</li> <li>BCM94352HMB (ABGN + AC, BT 4.0, 2x2:2):</li> <li>AzureWave AW - CE123H</li> <li>Dell DW1550</li> <li>HP TPC - Q013</li> <li>Lenovo Lite - On WCBN606BH</li> </ul>"},{"location":"Basic%20knowledge/Drivers/#broadcom-m2","title":"Broadcom M.2","text":"<ul> <li>BCM94360NG</li> <li>Fenvi BCM94360NG (A + E Key, natively supported as based off of genuine Apple Airport card) (BT 4.0)</li> <li>BCM943602</li> <li>Dell DW1830 (A + E Key, quite wide so make sure your laptop has room) (BT 4.1)</li> <li>BCM94352Z</li> <li>Fenvi AC1200 (A + E Key, natively supported as based off of genuine Apple Airport card) (BT 4.0)</li> <li>Dell DW1560 (A + E Key) (BT 4.0)</li> <li>Lenovo Lite - On WCBN802B(04X6020) (E Key) (BT 4.0)</li> <li>AzureWave AW - CB162NF (A + E Key) (BT 4.0)</li> <li>BCM94350ZAE</li> <li>Lenovo Foxconn T77H649 (A + E Key) (BT 4.1)</li> <li>Lite - On WCBN808B (A + E Key) (BT 4.1)</li> <li>Dell DW1820A (A + E Key) (BT 4.1)</li> </ul> <p>Later, the domestic expert zxystd transplanted and open - sourced the Intel network card driver, which can also solve the driver problems of most Intel network cards. Although AirDrop can't be used for the time being, it's already a great improvement:</p> <p>List of drivable models of Intel network cards</p>"},{"location":"Basic%20knowledge/Drivers/#sound-card-support","title":"Sound Card Support","text":"<p>Sound cards are mainly driven by the open - source kexts of AppleALC, which can enable native macOS high - definition audio. For a detailed list of sound cards that support native drivers, refer to:</p> <p>Driver status table and layouts id status of Hackintosh sound cards</p>"},{"location":"Basic%20knowledge/Drivers/#other-hardware","title":"Other Hardware","text":"<ul> <li> <p>Fingerprint Sensor</p> </li> <li> <p>Currently, it's impossible to simulate the Touch ID sensor, so the fingerprint sensor basically has no solution.</p> </li> <li> <p>Windows Hello Face Recognition</p> </li> <li> <p>Some laptops have WHFR connected by I2C (and used through your iGPU), and these will not work properly.</p> </li> <li>Some laptops have WHFR connected by USB. If you're lucky, you may get the camera function, but no other functions.</li> <li> <p>Intel Smart Sound Technology</p> </li> <li> <p>The microphones of laptops equipped with Intel SST usually can't be driven, such as the Xiaoxin 13 Pro series.</p> </li> <li>However, some laptops that also use Intel smart sound technology can drive the microphones perfectly.</li> <li>So whether the microphone can work or not can only be known through practice.</li> <li> <p>Headphone - Microphone Combo Interface</p> </li> <li> <p>Some laptops with a combined headphone - microphone interface may not be able to get audio input through them, and must use the built - in microphone or an external audio input device via USB.</p> </li> <li> <p>Thunderbolt Interface</p> </li> <li> <p>The Thunderbolt interface is relatively difficult to handle and somewhat mysterious. The OC official recommends disabling the Thunderbolt ports on the motherboard. But it doesn't mean there's no solution; it's just difficult.</p> </li> <li> <p>Card Reader</p> </li> <li> <p>Some Realtek card readers can be driven perfectly. For details, refer to this project: https://github.com/0xFireWolf/RealtekCardReader</p> </li> </ul>"},{"location":"Basic%20knowledge/Drivers/#references","title":"References","text":"<ul> <li>Recommended Hardware Configuration Table for Hackintosh in 2022 </li> <li>https://github.com/dortania/bugtracker/issues/192</li> </ul>"},{"location":"Basic%20knowledge/Hardware/","title":"Hardware","text":""},{"location":"Basic%20knowledge/Hardware/#hardware","title":"Hardware","text":"<p>In the previous content, you have more or less understood the driver situation of the hardware. In this part, I will share the methods and techniques for determining your hardware model.</p>"},{"location":"Basic%20knowledge/Hardware/#using-windows-to-view-hardware","title":"Using Windows to View Hardware","text":""},{"location":"Basic%20knowledge/Hardware/#cpu-model","title":"CPU Model","text":"<p>You can use the Device Manager or the built - in Task Manager in Windows, or use third - party software such as CPU - Z, AIDA64, and LuDaShi.</p>"},{"location":"Basic%20knowledge/Hardware/#gpu-model","title":"GPU Model","text":"<p>You can use the Device Manager or the built - in Task Manager in Windows, or use third - party software such as GPU - Z, AIDA64, and LuDaShi.</p>"},{"location":"Basic%20knowledge/Hardware/#chipset-model","title":"Chipset Model","text":"<p>Device Manager:</p> <p> </p> <p>Or use third - party software like AIDA64:</p> <p> </p>"},{"location":"Basic%20knowledge/Hardware/#sound-card-model","title":"Sound Card Model","text":"<p>It is recommended to use third - party software such as AIDA64 and LuDaShi:</p> <p> </p>"},{"location":"Basic%20knowledge/Hardware/#network-card-model","title":"Network Card Model","text":"<p>You can use the Device Manager or AIDA64. It is still recommended to use third - party software to view:</p> <p> </p>"},{"location":"Basic%20knowledge/Hardware/#hard-disk-model","title":"Hard Disk Model","text":"<p>For hard disks, detailed information usually can't be seen through software. You can only confirm it with the help of Google:</p> <p> </p>"},{"location":"Basic%20knowledge/Hardware/#keyboard-touchpad-touchscreen-connection-types","title":"Keyboard, Touchpad, Touchscreen Connection Types","text":"<p>Unfortunately, AIDA64 doesn't provide any useful information for these types of devices. So we recommend using the Device Manager for this purpose.</p> <ul> <li>You can find these devices in the following locations:</li> <li><code>Human Interface Devices</code> (HID) </li> <li><code>Keyboards</code></li> <li><code>Mice and other Pointer Devices</code></li> <li>To view the exact connection type of the device, select the pointer device and then enter <code>View -&gt; Device by Connection</code>. This will more intuitively show whether it is connected via PS2, I2C, SMBus, USB, etc.</li> </ul> <p> </p> <p>Depending on the device, it may be displayed under multiple names and connections. Mainly focus on the following points:</p>"},{"location":"Basic%20knowledge/Hardware/#smbus","title":"SMBus","text":"<p>Generally, the driver support for this kind of touchpad is relatively friendly, and the gestures are perfect. In the Device Manager, it will be shown as a straight - line PCI device, such as <code>Synaptics SMBus Driver</code> or <code>ELAN SMBus Driver</code>.</p> <p> </p>"},{"location":"Basic%20knowledge/Hardware/#usb","title":"USB","text":"<p>These will be shown as a <code>PS2 Compliant Trackpad</code>, and in USB when we switch our connection view to <code>Device by Connection</code>.</p> <p> </p>"},{"location":"Basic%20knowledge/Hardware/#i2c","title":"I2C","text":"<p>These are almost always shown as Microsoft HID devices, but they can also be shown as other touchpads. However, they will always be shown under I2C.</p> <p> </p>"},{"location":"Basic%20knowledge/Hardware/#using-linux-to-view-hardware","title":"Using Linux to View Hardware","text":"<p>To find hardware using Linux, we will use the following commands:</p> <ul> <li><code>pciutils</code></li> <li><code>dmidecode</code></li> </ul> <p>Most Linux distributions have already installed these tools. If not, you may find them in the package manager of the distribution.</p> <pre><code># CPU model\ngrep -i \"model name\" /proc/cpuinfo\n\n# Graphics card model\nlspci | grep -i --color \"vga\\|3d\\|2d\"\n\n# Chipset model\ndmidecode -t baseboard\n\n# Sound card model\naplay -l\n\n# Network card model\nlspci | grep -i network\nlshw -class networ\n\n# Hard disk model\nlshw -class disk -class storage\n\n# Keyboard, touchpad, touchscreen connection types\ndmesg | grep -i input\n</code></pre>"},{"location":"Basic%20knowledge/Introduction/","title":"Introduction","text":""},{"location":"Basic%20knowledge/Introduction/#basic-knowledge","title":"Basic knowledge","text":"<p>Basic knowledge assumes that everyone understands by default. If you don't, it is recommended to review the basics before reading this tutorial.</p>"},{"location":"Basic%20knowledge/Introduction/#time-stability-copyright","title":"Time, Stability, Copyright","text":"<p>If you have a project with a deadline, please don't start reading this tutorial, because the process of starting with Hackintosh usually won't be smooth sailing. Even a small detour can be extremely time - consuming. Also, pay attention to rest. The process of Hackintosh doesn't require you to stay up all night.</p> <p>If you require a stable system, try not to use Hackintosh as much as possible. Although the perfection of Hackintosh is infinitely close to that of a genuine Mac, there is still the word \"Hack\" after all. When installing, make sure to back up important data.</p> <p>If your company is one that popularizes genuine software (usually large companies like BAT), don't use Hackintosh to connect to the company's network. Otherwise, you may receive a lawyer's letter from Apple (a tall tree catches the wind). Strictly speaking, Hackintosh belongs to hacking behavior and infringes on Apple's copyright.</p>"},{"location":"Basic%20knowledge/Introduction/#preparation-work","title":"Preparation Work","text":"<p>A computer that meets the hardware limitations of Hackintosh and a USB flash drive of at least 16GB. Although 16GB seems to be completely sufficient currently, the size of Apple's mirror images has been increasing in recent years. I once got a prompt of insufficient USB flash drive space when burning a 3 - partition mirror image.</p> <p>In addition, the faster the USB flash drive, the better. It can greatly shorten the time for making the Hackintosh installation USB flash drive and system installation.</p>"},{"location":"Basic%20knowledge/Introduction/#basic-operations","title":"Basic Operations","text":"<p>First, before installing Hackintosh, make sure that you can proficiently install the Windows or Linux system (a plus). Because Hackintosh installation requires the disk to meet certain requirements, it is common to delete partitions and reinstall the system. If you don't know how to install Windows or proficiently use the PE system, it is recommended to learn these basic skills before learning Hackintosh installation.</p>"},{"location":"Basic%20knowledge/Terminology/","title":"Terminology","text":""},{"location":"Basic%20knowledge/Terminology/#terminology","title":"Terminology","text":"Name Description Hackintosh The process of installing macOS on non - Apple - official PCs. Please note that Hackintosh is not an operating system. Bootloader Software for loading an operating system is usually made by the creator of the operating system. Boot Manager Software for managing boot loaders such as Clover and OpenCore. Clover A boot method that is gradually being replaced by OpenCore. OpenCore A new and more perfect Hackintosh boot method created by the Acidanthera team. ACPI Advanced Configuration and Power Interface (ACPI) enables the system to better recognize hardware information. DSDT/SSDT Tables in ACPI that describe devices and how the operating system should interact with them. .AML The compiled file format of ACPI. .DSL ACPI source code file. Kexts The full name is Kernel Extensions. We can commonly translate it as \"driver\". BIOS BIOS (Basic Input/Output System), which can be generally understood as the operating system of the motherboard. UEFI Unified Extensible Firmware Interface (UEFI) enables a PC to load from a pre - boot operating environment to an operating system. UEFI \u9a71\u52a8 Like any other operating system, UEFI has drivers, which are loaded by Clover or OpenCore. NVRAM Non - volatile random - access memory (NVRAM) is built - in on the motherboard. When UEFI boots, it will load NVRAM first."},{"location":"Basic%20knowledge/Terminology/#acpi","title":"ACPI","text":"Name Description EC Embedded Controller. It communicates between the motherboard and embedded peripheral devices (such as hotkeys, ports, or batteries). PLUG Allows connection to XCPM, Apple XNU power management for better overall CPU control. AWAC ACPI Wake Alarm Counter Clock, the internal clock of the board. Hackintosh must patch it. PMC Power Management Controller. Some motherboards require SSDT - PMC for patching. PNLF Internal backlight display. macOS uses this PNLF device to send and receive information for brightness control. XOSI/_OSI <code>_OSI</code> is used to determine the operating system that is booting. Renaming it to XOSI allows us to spoof the hardware. HPET High - Precision Event Timer. macOS is very picky about how the device is set up, so we sometimes need to patch HPET. RHUB Root USB Hub, in which USB ports are defined. IMEI Intel Management Engine Interface, which handles miscellaneous tasks. macOS relies on IMEI for Intel GPU acceleration. UNC Uncore Bridge, similar to the north bridge. It handles many cache - related functions. SMBS System Management Bus, used to allow easy communication between devices. ## UEFI Boot Disk Structure Partitioning"},{"location":"Basic%20knowledge/Terminology/#uefi-related-concepts","title":"UEFI - related Concepts","text":"<p>UEFI stands for Unified Extensible Firmware Interface. It enables a PC to load from a pre - boot operating environment to an operating system. You can think of UEFI as a system boot method. Basically, computers after 2010 support the UEFI boot method.</p> <p>UEFI boot is often used in conjunction with the GPT partition table. In DiskGenius, select the disk, right - click and select [Convert partition table type to GUID format] to convert the disk to a GPT partition table.</p> <p> </p> <p>The EFI partition is a necessary partition for UEFI boot. In the disk, its name is usually called the ESP partition. It is mostly located in the first partition of the disk. The format can be either FAT16 or FAT32. It is mainly used to store boot files. When installing Hackintosh, note that the ESP partition should be larger than 200MB. I, suggest setting it to 300MB, which is basically sufficient.</p>"},{"location":"Basic%20knowledge/Terminology/#installing-a-single-macos-on-a-single-hard-disk","title":"Installing a Single macOS on a Single Hard Disk","text":"<p>It's worth mentioning that in this case, there is no need for us to manually create an EFI partition at all. When installing directly, just select the entire disk where you want to install, and macOS will automatically create disk partitions:</p> <p></p>"},{"location":"Basic%20knowledge/Terminology/#installing-windows-and-macos-on-a-single-hard-disk","title":"Installing Windows and macOS on a Single Hard Disk","text":"<p>This is the partition situation of a 512GB SSD dual - system disk:</p> <p></p> <p>Drive C will be used as the C drive for Windows in the future. 123GB is usually sufficient for daily light - use.</p> <p>Drive D will be used to install macOS at that time. 353GB is actually sufficient for daily use.</p> <p>Drive E is a partition that is temporarily divided. Actually, it is the ESP boot partition. The boots of both Windows and macOS in the future will be placed here.</p>"},{"location":"Demonstration/BIOS/","title":"BIOS","text":"<p>The BIOS previous section has been introduced. Here, let's directly list the final settings:</p> <p>Motherboard model: GIGABYTE B360M AORUS PRO</p> <p>BIOS version: F3</p> <p>BIOS date: May 17, 2019</p> <ul> <li>[BIOS Features] - [Windows 8/10] - [Other Operating Systems]</li> <li>[BIOS Features] - [CSM Support] - [Disabled]</li> <li>[BIOS Features] - [Secure Mode] - [Secure Boot Enable] - [Disabled]</li> <li>[Integrated Peripherals] - [Preset Boot Display Device] - [IGFX] (integrated graphics are used here)</li> <li>[Integrated Peripherals] - [Intel Platform Trust Technology (PTT)] - [Disabled]</li> <li>[Integrated Peripherals] - [Software Guard Extension (SGX)] - [Disabled]</li> <li>[Integrated Peripherals] - [Trusted Computing] - [Security Device Support] - [Disable]</li> <li>[Integrated Peripherals] - [Super IO Configuration] - [Serial Port] - [Disabled]</li> <li>[Integrated Peripherals] - [USB Programs] - [Legacy USB Support] - [Enabled]</li> <li>[Integrated Peripherals] - [Integrated Peripherals] - [XHCI Hand - off] - [Enabled]</li> <li>[Integrated Peripherals] - [Integrated Peripherals] - [USB Mass Storege Driver Support] - [Enabled]</li> <li>[Integrated Peripherals] - [Network Stack Configuration] - [Network Stack] - [Disabled]</li> <li>[Integrated Peripherals] - [SATA And RST Configuration] - [SATA Mode Selection] - [AHCI]</li> <li>[Chipset] - [VT - d] - [Disabled]</li> <li>[Chipset] - [Internal Graphics] - [Enabled]</li> <li>[Chipset] - [DVMT Pre - Allocated] - [64M]</li> <li>[Chipset] - [DVMT Total Gfx Mem] - [256M]</li> <li>[Chipset] - [Decoding above 4G] - [Enabled]</li> <li>[Chipset] - [Wake on LAN Enable] - [Disabled]</li> <li>[Power Management] - [Platform Power Management] - [Disabled]</li> <li>[Power Management] - [Wake - up by Mouse] - [Double - click]</li> </ul>"},{"location":"Demonstration/Complete%20Success/","title":"Complete Success","text":""},{"location":"Demonstration/Complete%20Success/#questions","title":"Questions","text":"<p>Smart netizens will surely notice: Hey, that's not right! I can't insert a USB flash drive and then use the shortcut key to boot every time I want to enter the macOS system:</p> <p></p> <ol> <li>Of course, you can do without the USB flash drive. Follow my steps below to operate step by step.</li> </ol>"},{"location":"Demonstration/Complete%20Success/#mount-the-disk-boot-partition","title":"Mount the Disk Boot Partition","text":"<p>This step can be done both in macOS and Windows.</p> <p>If you operate in Windows, you generally need to use the DiskGenius tool to assist with the operation. If you are mounting in macOS, there are many more tools. Below, I will use OCC to mount the EFI partition.</p> <p>First, download the OCC tool. This tool is an essential tool for Hackintosh even if you don't use it for mounting.</p> <p>The download address of the OCC official website is: https://mackie100projects.altervista.org/download - opencore - configurator/</p> <p>After opening it, select the OC icon in the upper - right corner, click it, find the hard disk where your system is installed, and click \"Mount Partition\":</p> <p> </p> <p>After entering the password, the mounting will be successful. Then click \"Open Partition\" on the icon in the upper - left corner. The content of the hard disk's boot partition is as follows:</p> <p></p>"},{"location":"Demonstration/Complete%20Success/#mount-the-boot-partition-of-the-usb-flash-drive","title":"Mount the Boot Partition of the USB Flash Drive","text":"<p>Similarly, mount the boot partition of the USB flash drive. At this time, the content of the boot partition of the USB flash drive is as follows:</p> <p> </p>"},{"location":"Demonstration/Complete%20Success/#copy-the-oc-files-to-the-hard-disk-directory","title":"Copy the OC Files to the Hard Disk Directory","text":"<p>The task is completed. Now you can unplug the USB flash drive, then shut down and restart to enter the Windows operating system.</p>"},{"location":"Demonstration/Complete%20Success/#situation-explanation","title":"Situation Explanation","text":""},{"location":"Demonstration/Complete%20Success/#multiple-hard-disks-and-multiple-systems","title":"Multiple Hard Disks and Multiple Systems","text":"<p>For example:</p> <ul> <li>Disk A: Windows is installed.</li> <li>Disk B: macOS is installed.</li> </ul> <p>In this case, you don't need to manually use tools to add boot entries either. Just copy the OC EFI boot file directly to the EFI boot partition of Disk B, and then set the boot of Disk B as the first boot in the BIOS.</p>"},{"location":"Demonstration/Complete%20Success/#single-hard-disk-with-multiple-systems","title":"Single Hard Disk with Multiple Systems","text":"<p>For example:</p> <ul> <li>Disk A: Windows and macOS are installed.</li> </ul> <p>In this case, you have to use DG or EasyUEFI below to manually add the boot.</p>"},{"location":"Demonstration/Complete%20Success/#dg-method","title":"DG Method","text":"<p>Actually, this method is simpler, and the principle is exactly the same as the EasyIUEFI method below:</p> <p> </p>"},{"location":"Demonstration/Complete%20Success/#easyiuefi-method","title":"EasyIUEFI Method","text":"<p>When in Windows, we can use the EasyUEFI tool to add the boot. Of course, there are also some substitutes such as Bootice. However, this will make the article very long and verbose. So this article only uses EasyUEFI for a demonstration.</p> <p>EasyUEFI was free when it first came out, but it has gradually become charged later. So I'm using a cracked version copied from the Internet here. Please check the file security by yourself.</p> <p>Download address of the cracked version of EasyUEFI: https://sqlsec.lanzouw.com/i4amxzmj1cj</p> <p>The green version can be used by just clicking. The main interface after opening is as follows:</p> <p> </p> <p>Select \"Manage EFI Boot Entries\", and the final effect is as follows:</p> <p> </p> <p>First, click \"Create New Entry\":</p> <p> </p> <p>For the operating system type, select \"Linux or other operating systems\". Write any description. For the target partition, select \"The first ESP boot partition of the hard disk\", and then click \"Browse Data\". Select the OpenCpre.efi file in the EFI/OC/ directory, and then click OK:</p> <p></p> <p>Then move the newly added boot entry to the first position:</p> <p> </p>"},{"location":"Demonstration/Complete%20Success/#the-final-effect","title":"The Final Effect","text":"<p>After unplugging the USB flash drive, the interface for selecting the operating system every time you boot is as follows:</p> <p> </p> <p>You can easily enter the Windows and macOS systems. So far, it's all done.</p>"},{"location":"Demonstration/Complete%20Success/#no-effect","title":"No Effect?","text":"<p>If you use DG or EasyUEFI to manually add the boot but still don't have OC as the first boot, it's very simple. Just set the boot you manually added as the first boot in the BIOS.</p>"},{"location":"Demonstration/Hackintosh/","title":"Hackintosh","text":""},{"location":"Demonstration/Hackintosh/#making-a-hackintosh-usb-flash-drive","title":"Making a Hackintosh USB Flash Drive","text":"<p>You can refer to the previously written section: USB Flash Drive Preparation </p> <p>I have also open - sourced the EFI used for this model's installation this time on Github.</p> <p>The project address is: https://github.com/sqlsec/GIGABYTE - B360M - AORUS - PRO</p>"},{"location":"Demonstration/Hackintosh/#set-the-usb-flash-drive-as-the-first-boot-option","title":"Set the USB Flash Drive as the First Boot Option","text":"<p>Different motherboards are different. The shortcut key for booting from the USB flash drive in this operation is F12. If you really can't find the shortcut key for booting from the USB flash drive, you can also directly go to the BIOS to change the USB flash drive to the first boot option:</p> <p> </p> <p>You can see that the name of my USB flash drive is SMI ZEN - SMI, and there are two boot partitions. One partition is for Windows PE and the other is for OC. Since we need OC for installation, just select the OC partition. If you don't know which partition it is, you can try them one by one.</p>"},{"location":"Demonstration/Hackintosh/#explanation-of-the-opencore-interface","title":"Explanation of the OpenCore Interface","text":"<p>The main interface when entering the OpenCore interface is as follows:</p> <p> </p> <p>From left to right, they are: Windows PE, Windows 10 on the hard disk, the boot disk for installing macOS, switching SIP, and resetting NVRAM.</p> <p>Since our EFI is customized, just directly select Install macOS Big Sur.</p> <p>If you are not confident in the EFI, you can press the <code>Command/Windows + V</code> keys before pressing Enter. In this way, you will enter the <code>-v</code> verbose mode. If the shortcut keys don't work, it means that your EFI has not configured the Apple hotkeys properly. Then you can manually add <code>-v</code> in the boot - args boot option.</p>"},{"location":"Demonstration/Hackintosh/#the-first-progress-bar","title":"The First Progress Bar","text":"<p>If your EFI is perfect, the progress bar should move very quickly:</p> <p> </p>"},{"location":"Demonstration/Hackintosh/#enter-the-system-installation-interface","title":"Enter the System Installation Interface","text":"<p>Then you will come to the system installation interface:</p> <p></p> <p>If this interface is in Russian, it means that the language setting in the EFI NVRAM part is wrong. You can set it to Chinese and then reset the NVRAM.</p>"},{"location":"Demonstration/Hackintosh/#format-as-apples-disk-format","title":"Format as Apple's Disk Format","text":"<p>Now we open \"Disk Utility\", find the disk partition reserved for macOS before, select it, and then click \"Erase\" in the upper right corner:</p> <p> </p> <p>Then write any name you like. Remember to choose the \"APFS\" format (for older macOS systems without this format, choose the HFS format).</p> <p>The interface after successful formatting is as follows:</p> <p> </p> <p>After clicking \"Done\", you can exit Disk Utility. Find the upper left corner, click \"Disk Utility\" and select \"Quit Disk Utility\" to exit.</p> <p> </p>"},{"location":"Demonstration/Hackintosh/#install-macos","title":"Install macOS","text":"<p>Then you will return to the previous interface. At this time, select \"Install macOS Big Sur\" and then click \"Continue\":</p> <p> </p> <p>Keep clicking \"Continue\", and \"Agree\" to Apple's agreement. Then select the disk partition in Apple format that we formatted before, \"Macintosh\", and then click \"Continue\":</p> <p> </p> <p>Then it will start to copy the image from the USB flash drive and write it to the hard disk:</p> <p> </p> <p>The writing speed depends on the speeds of your hard disk and USB flash drive. So a high - speed USB flash drive can save a lot of time.</p>"},{"location":"Demonstration/Hackintosh/#the-second-progress-bar","title":"The Second Progress Bar","text":"<p>During the above writing operation, the computer will suddenly restart. We continue to select the OC partition:</p> <p> </p> <p>At this time, the OC installation interface is a little different, probably like the following: </p> <p> </p> <p>At this time, we select the newly emerged \"macOS Install\", and then the progress bar will be run again: </p> <p> </p> <p>Different from before, the remaining installation time will be displayed behind this progress bar. We just wait patiently.</p>"},{"location":"Demonstration/Hackintosh/#the-third-progress-bar","title":"The Third Progress Bar","text":"<p>The above progress bar will also automatically restart during its progress. Continue to select the OC partition of the USB flash drive as the first boot option:</p> <p> </p> <p>At this time, it returns to this interface:</p> <p> </p> <p>We still select \"macOS Install\", and then the progress bar will be run again. However, this time there is no countdown on the progress bar. It is just a simple Apple Logo:</p> <p> </p> <p>Similarly, the computer will automatically restart after the Logo is completed.</p>"},{"location":"Demonstration/Hackintosh/#the-fourth-progress-bar","title":"The Fourth Progress Bar","text":"<p>After the automatic restart, continue to select the OC partition of the USB flash drive as the first boot option:</p> <p> </p> <p>The OC interface at this time is as follows. You can see that the Mac - formatted hard disk with the custom - named we set before, \"Macintosh\", appears:</p> <p> </p> <p>Select \"Macintosh\" and then press Enter. At this time, the progress bar will be run again:</p> <p> </p> <p>Then the computer will automatically restart once after the progress bar is completed.</p>"},{"location":"Demonstration/Hackintosh/#the-fifth-progress-bar","title":"The Fifth Progress Bar","text":"<p>After the automatic restart, continue to select the OC partition of the USB flash drive as the first boot option:</p> <p> </p> <p>The OC interface at this time is as follows. You can see that the Mac - formatted hard disk with the custom - named we set before, \"Macintosh\", appears:</p> <p> </p> <p>Select \"Macintosh\" and then press Enter. At this time, the progress bar will be run again. This time, the progress bar will not restart. If everything goes well, you will enter the Apple initialization interface.</p>"},{"location":"Demonstration/Hackintosh/#initialization-settings","title":"Initialization Settings","text":"<p>If the above steps are successful, you will come to the Apple initialization settings interface:</p> <p> </p> <p>Select your country/region, and then click \"Continue\". Then you will come to the \"Language &amp; Input Method\" interface:</p> <p> </p> <p>These are all in line with my requirements, so continue to click \"Continue\". Then you will come to the \"Accessibility\" interface. We can skip this step for now by clicking \"Later\":</p> <p> </p> <p>Then comes the network step. We can choose not to connect to the network first and select \"Other Network Options\":</p> <p> </p> <p>Because for a normal computer, the network connection step needs to be adjusted later. I can see the WiFi option here because I'm using a driver - free network card. Then select \"My computer is not connected to the Internet\":</p> <p> </p> <p>Not connecting to the network reduces unnecessary operations. We can set up the network connection operations after entering the system. At this time, a warning box should pop up. We ignore the warning and select \"Continue\":</p> <p> </p> <p>Then comes the \"Data &amp; Privacy\" part. Select \"Continue\":</p> <p> </p> <p>Then comes the \"Migration Assistant\" interface. Select according to your own situation. Generally, for a clean installation, select \"Later\" in the lower left corner:</p> <p> </p> <p>Damn, there are so many interfaces. I'm so tired of writing. Then comes the \"Apple ID\" login interface. Since we are not connected to the network, select \"Set Up Later\" in the lower left corner:</p> <p> </p> <p>Then a warning pops up. We ignore it and select \"Skip\":</p> <p> </p> <p>Finally, agree to Apple's terms:</p> <p> </p> <p>Set up some of your own accounts and login passwords, select an avatar, and then click \"Continue\":</p> <p> </p> <p>Damn, I'm so tired that I won't take screenshots anymore. There are so many interfaces. Anyway, just keep clicking according to your own feeling. Normal people will be fine. Finally, you will successfully enter the system:</p> <p> </p> <p>So far, the installation is completed!!!</p> <p>You must be very happy at this moment. Throwing out the donation link at this time should have a good effect. 2333</p> <p>In this noisy and impetuous era, how many people still insist on writing blogs and outputting original articles? Writing a blog always feels like generating electricity with love...</p> <p>If you happen to be wealthy and feel that this article has helped you, you can consider making a donation to maintain the high - cost server operation (domain name cost, server cost, CDN cost, etc.)</p>"},{"location":"Demonstration/Machine%20Overview/","title":"Machine Overview","text":""},{"location":"Demonstration/Machine%20Overview/#random-thoughts","title":"Random Thoughts","text":"<p>There are so many beginners these days. I'm not their parents, and I'm not obliged to spoon - feed them.</p>"},{"location":"Demonstration/Machine%20Overview/#machine-overview","title":"Machine Overview","text":"<p>I've said a lot, but it's still impossible to fully express what's on my mind at the moment. Well, let's get back on track and continue writing the article:</p> Component Model CPU i5 - 8500 Graphics Card Intel UHD 630 integrated graphics Motherboard Gigabyte 360M AORUS Pro Memory Kingston HyperX Fury 8GB 2666Mhz * 2 Hard Disk Hikvision C2000 Pro 512GB Network Card Fenvi T919 BCM94360CD four - antenna version Computer Case JONSBO T03 Power Supply Patriot e - sport 500W Cooling JONSBO CR1000 <p>This machine is quite suitable for making a Hackintosh tutorial. It's a relatively common configuration.</p>"},{"location":"Demonstration/Upgrade/","title":"Upgrade","text":""},{"location":"Demonstration/Upgrade/#preface","title":"Preface","text":"<p>Under normal circumstances, if you are using OC to boot, you can directly upgrade for minor versions without thinking. For major versions, there may be some minor adjustments. You need to pay timely attention to the system changes in major versions. However, there are always some people who will test first and make summaries. When there are major changes, OC or some well - known Kexts will also be adjusted and upgraded.</p>"},{"location":"Demonstration/Upgrade/#demonstration","title":"Demonstration","text":"<p>One day, while surfing the Internet happily, suddenly, a reminder of \"There are update items\" appeared in the upper - right corner:</p> <p> </p> <p>Can those with obsessive - compulsive disorder tolerate this? Click \"Restart Now\" directly:</p> <p> </p> <p>Then, after the update is installed, the computer will restart. At this time, when you return to the OC boot interface, you will find that there are new boot items:</p> <p></p> <p>Yes, we select this new boot item \"Macintosh HD\" to boot.</p> <p>For minor updates of the macOS system, there will always be this boot item. So it is strongly recommended that you do not change the name of your own disk to Macintosh HD, because it is easy to get confused during the update.</p> <p>After the update is installed, the computer may restart several times. In short, as long as this boot item exists, always select this new boot item \"Macintosh HD\" to boot.</p> <p>After the update is successful, the boot item returns to normal. We select the original boot item \"Macintosh\" to boot:  </p> <p>Finally, this update is very smooth, and it is directly upgraded to the latest version:</p> <p></p>"},{"location":"Demonstration/WinNTSetup/","title":"WinNTSetup","text":"<p>This chapter is a bit redundant. Under normal circumstances, it is default that everyone will install Windows. If Windows can't be installed smoothly, then installing a Hackintosh will be extremely difficult.</p>"},{"location":"Demonstration/WinNTSetup/#copy-the-image-to-disk-d","title":"Copy the Image to Disk D","text":"<p>This step doesn't necessarily mean copying the image to Disk D. You can also directly put the image in a USB flash drive and then insert it into the computer. But theoretically, if the image is placed on the hard disk, the installation speed will be much faster.</p> <p> </p>"},{"location":"Demonstration/WinNTSetup/#install-the-system-with-winntsetup","title":"Install the System with WinNTSetup","text":"<p>Basically, this tool comes with almost every Windows PE. It is also translated as Windows Installer. Just recognize this icon.</p> <p>The main operations are as follows, and the key steps are all marked on the pictures:</p> <p> </p> <p>After configuring, click \"Install\". After the installation is completed, unplug the PE USB flash drive and click \"Restart\":</p> <p> </p>"},{"location":"Demonstration/WinNTSetup/#wait-for-windows-initialization","title":"Wait for Windows Initialization","text":"<p>Restart and go through the settings according to the prompts, and wait patiently for Windows 10 to be initialized:</p> <p></p>"},{"location":"Demonstration/Windows%26macOS/","title":"Windows&macOS","text":""},{"location":"Demonstration/Windows%26macOS/#windows-macos","title":"Windows + macOS","text":"<p>This is the partition situation of a 512GB SSD dual - system disk:</p> <p></p> <p>Drive C will be used as the C drive for Windows in the future, and 123GB is usually sufficient for daily light - use.</p> <p>Drive D will be used to install macOS at that time, and 353GB is actually sufficient for daily use.</p> <p>Drive E is a partition created temporarily. Actually, it is the ESP boot partition (the partition must be &gt; 200MB). The boot files of both Windows and macOS in the future will be placed here.</p>"},{"location":"Demonstration/Windows%26macOS/#macos-single-system","title":"macOS Single - system","text":"<p>If it is a single - system of macOS, actually there is no need to enter PE for disk partitioning. When installing the system, just select the entire disk directly.</p>"},{"location":"Frequently%20Asked%20Questions%20%28FAQ%29/Question%20list/","title":"Question list","text":"<p>??? + question \"1. Wake from sleep with black screen or need to plug and unplug the monitor cable to turn on the screen and enter the system during boot.\"     Try adding the <code>igfxonln = 1</code> parameter to the boot options, and you can also try adding the <code>gfxrst = 1</code> parameter to the boot options.</p> <p>??? + question \"2. My graphics card is driver - free, but the system boots to a black screen with no output signal.\"     Try adding the <code>agdpmod = pikera</code> parameter to the boot options. This can be used for new driver - free series graphics cards such as RX5500/5600/5700/6600/6800/6900 to prevent black screens during the boot process.</p> <p>??? + question \"3. Laptop wakes from sleep with black screen.\"     There are many possibilities for this situation. One possibility is that the discrete graphics card is not masked. Try adding the <code>-wegnoegpu</code> parameter to the boot options.</p> <p>??? + question \"4. When installing the system, it prompts 'An Internet connection is required to install macOS'.\"     Some friends in the group have encountered this problem. The solution is: just connect the network cable. It's really as the name implies.</p> <p>??? + question \"5. What if macOS always fails to detect system updates?\"     Open OCC, under the \u300cMisc - Other Settings\u300d - \u300cSecurity\u300d tab, change SecureBootMode to Default.</p> <p>??? + question \"6. After the integrated graphics finishes buffering frames, HEVC decoding doesn't work, and REQ is only up to 0.35Ghz at most.\"     For the integrated graphics device in the DeviceProperties device attribute settings, delete <code>AAPL, slot - name</code>.</p> <p>??? + question \"7. When booting, if it prompts [oc grabbed zero systm - id for sb. this is not allowed halting on critlcal error]\"     Basically, it's a problem with \u3010SecureBootModel\u3011 under \u3010Misc\u3011 --&gt; \u3010security\u3011. The default \u3010Default\u3011 can be changed to \u3010Disabled\u3011 or other options.</p> <p>??? + question \"8. When booting, if it gets stuck at the \u3010End SetConsoleMode\u3011 error.\"     Basically, it's a problem with \u3010SecureBootModel\u3011 under \u3010Misc\u3011 --&gt; \u3010security\u3011. The default \u3010Default\u3011 can be changed to \u3010Disabled\u3011 or other options.</p> <p>??? + question \"9. After waking from sleep, there are inexplicable screen - glitching phenomena.\"     Try injecting more video memory into the integrated graphics properties, such as 2048MB <code>framebuffer - unifiedmem 00000080</code> of data type.</p> <p>??? + question \"10. Can't find the disk partition where macOS has been installed.\"     Use OCC to apply a <code>Fix RTC _STA bug</code> patch in the ACPI options, or if your OCC version is higher than the installed system version, change \u300cMinVersion\u300d to \u300c- 1\u300d (unlimited) in \u300cUEFI Settings\u300d - \u300cEmbedded APFS\u300d.</p> <p>??? + question \"11. When installing the system, it prompts: 'Installation cannot continue because the installer is damaged'.\"     There are two possibilities:</p> <pre><code>1. As the name implies, the installation image is really damaged. The solution is to change to another image and burn and install again. (This possibility is not high.)\n2. The current time is incorrect. Open the terminal and enter date to see if the time is correct. If it's incorrect, use the date command to change the time.\n</code></pre> <p>??? + question \"12. I enter the system, and after a few minutes, it freezes, blacks out, and restarts. It's normal without plugging in the network cable. The 1225V network card doesn't work properly.\"     First, make sure the path of your network card is correct, and then the way of driving is correct. The following two are the key parameters: </p> <p>      Then, starting from macOS12.3, the boot option parameter has changed from the previous <code>dk.e1000 = 0</code> parameter to adding the <code>e1000 = 0</code> parameter. So, if it's incorrect, replace or add it.</p> <p>??? + question \"13. USB works normally without customization, but if customized using USBToolBox, it will directly get stuck at APFS and can't enter the operating system.\"     This may have occurred on some USB3.1 devices such as ASMedia ASM1142. When customizing USB, don't plug in this interface, and then choose <code>I</code> (ignore) at the following step:</p> <p></p> <p>??? + question \"14. The App Store of macOS 10.13.6 can't be used, and the download prompt is 'Try again from the Purchased page'.\"     Actually, the App Store of 10.13.6 is too old. Update the browser and iTunes, and these mysterious problems can be solved:</p> <p></p> <p>??? + question \"15. The ASMedia ASM1142 USB 3.1 Type - A and Type - C integrated interface doesn't work.\"     Use this SSDT - USB3 - 1 - XHC2.aml SSDT to solve the problem.</p> <p>??? + question \"16. This copy of the macOS XXXX installation application is damaged and can't be used to install macOS.\"         The reason is that the current time is too new, and the system we are installing is no longer maintained. Just change the time to 2015. For detailed operations, refer to an online article: This copy of the macOS Mojave installation application is damaged and can't be used to install Mac OS</p> <p>??? + question \"17. The laptop's Type - C has no video output.\"     If you confirm that your Type - C is using the integrated graphics, then it's mostly related to the model. If it's a 16 - inch laptop model, change it to a 13 - inch one. If the integrated graphics ID is correct, there will mostly be a Type - C output signal.</p> <p>??? + question \"18. Copying EFI prompts that there is not enough free space on EFI.\"     It's more of a problem with the USB flash drive. Remember to clear the recycle bin in macOS, and in Windows, you can manually delete the.Trashes junk files:</p> <p></p> <pre><code>Or in macOS, after mounting the EFI partition, use the command line to manually delete junk files:\n```shell\ncd /Volumes/EFI &amp;&amp; rm -rf.Trashes \n```\n</code></pre> <p>??? + question \"19. After the installation code finishes running, the pictures of Magic Trackpad and Magic Mouse appear.\"     There are two possibilities:</p> <pre><code>1. USB is not customized. It is recommended to refer to the [USB customization tutorial](/6 - Practical Postures/6 - 1.html#reloaded) to customize again.\n2. Keyboard and mouse drivers are missing. Just install `VoodooPS2Controller.kext`.\n</code></pre> <p>??? + question \"20. Lenovo ThinkPad X13 20T3 with 10th - generation U actually has a pretty perfect Hackintosh, and sleep is also great.\"     Adjust the hibernation strategy to Linux in the BIOS to enable S3 sleep. Self - tested with normal power consumption overnight. This is specially recorded to give some experience to future generations.</p> <p>??? + question \"21. The I2C touchpad in the default polling mode doesn't work.\"     Here, take the DELL08BC touchpad of Dell Latitude 3400 i5 - 8265U as an example. The default IRQ is 0x00000033(51) which is greater than 2F, but the default XOSI polling mode doesn't work. Actually, those with i2cAddress 0x2c are all rather troublesome as they lack SSCN. We can solve the problem by adding the following SSCN SSDT:</p> <pre><code>```c\nDefinitionBlock (\"\", \"SSDT\", 2, \"LENOVO\", \"ICL     \", 0x20170001)\n{\n    External (_SB_.PCI0.I2C0, DeviceObj)\n    External (FMD1, IntObj)\n    External (FMH1, IntObj)\n    External (FML1, IntObj)\n    External (SSD1, IntObj)\n    External (SSH1, IntObj)\n    External (SSL1, IntObj)\n    External (TPDM, IntObj)\n\n    Method (PKG3, 3, Serialized)\n    {\n        Name (PKG, Package (0x03)\n        {\n            Zero, \n            Zero, \n            Zero\n        })\n        PKG [Zero] = Arg0\n        PKG [One] = Arg1\n        PKG [0x02] = Arg2\n        Return (PKG) /* \\PKG3.PKG_ */\n    }\n\n    Scope (_SB.PCI0.I2C0)\n    {\n        Method (SSCN, 0, NotSerialized)\n        {\n            Return (PKG3 (SSH1, SSL1, SSD1))\n        }\n\n        Method (FMCN, 0, NotSerialized)\n        {\n            Return (PKG3 (FMH1, FML1, FMD1))\n        }\n    }\n}\n```\nThe following is the comparison before and after adding the SSCN SSDT. It can be seen that the one on the left (at the beginning) is indeed an incomplete I2C:\n</code></pre> <p></p> <p>??? + question \"22. The installation code finishes running, but during the subsequent installation, it prompts 'An error occurred while preparing for the software update'.\"     This situation has been seen on some Dell laptops. Check the \u300cEnable Custom Mode\u300d option in the BIOS to solve this problem.</p> <p>??? + question \"23. After USB customization is completed, but USB3.X still doesn't work properly.\"     This problem is common on 400 - series motherboards. In this case, install a XHCI - unsupported.kext.</p> <p>??? + question \"24. When the ASUS motherboard boots, it prompts 'The system has POSTed in safe mode'.\"     This problem is common on ASUS motherboards. Check the \u300cDisableRtcChecksum\u300d option in the Kernel of the OC configuration file.</p>"},{"location":"Frequently%20Asked%20Questions%20%28FAQ%29/Usage%20method/","title":"Usage method","text":"<p>How to use this page? On a computer, simply use the <code>Ctrl/Command + F</code> shortcut key to quickly search for the keyword you want to find.</p> <p>If you also want to contribute QA to improve this page, you are welcome to send an email to me at x@xuanyuan.me. Hackintosh really needs everyone's joint contribution and effort. </p>"},{"location":"Introduction/Background/","title":"Background","text":""},{"location":"Introduction/Background/#background","title":"Background","text":"<p>This article was written on September 29, 2021. At today's Apple press conference, there is still no news of the next - generation Mac for the time being. Hackintosh is doomed to become history. However, it's a pity that until Hackintosh is about to fade away, there hasn't been a set of tutorials suitable for beginners to learn in China. So i took the time to write this series of Hackintosh tutorials from scratch. While helping others, it can also prove that I have been in the field of Hackintosh.</p> <p>Actually, the OpenCore official documentationis already very good. Most of the content of this tutorial will also be borrowed from the OpenCore official documentation. The original files of this tutorial have also been open - sourced, and the project address is:https://github.com/SeanChang/Hackintosh</p>"},{"location":"Introduction/Precautions/","title":"Precautions","text":""},{"location":"Introduction/Precautions/#precautions","title":"Precautions","text":"<p>Writing this tutorial is not to encourage everyone to use the pirated macOS system. Of course, I also strongly recommend that everyone support Apple's genuine system and buy a genuine Mac to experience it. Everything that exists is reasonable. The English name of Hackintosh is Hackintosh, and the word \"Hack\" appears in it. When it comes to Hack, we have to mention several basic spirits of Hackers: love, rebellion, sharing, open source, and free... Therefore, Hackintosh itself also inherits these characteristics. Just imagine, if the famous Hackintosh kexts drivers such as Lilu, WhateverGreen, and AppleALC were not open source, would Hackintosh technology still have anything to do with ordinary people like us? Essentially, we are just porters of some kexts and haven't created anything ourselves. We just do some basic permutations and combinations. This is also the reason why I also adhere to open - sourcing the EFI. After all, we should not forget those who dug the well when we drink water. Well, after saying a lot of messy things, the Hackintosh tutorial officially begins now.</p>"},{"location":"OpenCore%20Configuration/Kernel/","title":"Kernel","text":"<p>Kernel - related option settings.</p>"},{"location":"OpenCore%20Configuration/Kernel/#complete-quirks","title":"Complete Quirks","text":"<p>Since the versions of each platform are different, before the detailed description, here is a complete Quirks description of OC 0.7.3, so that everyone generally has an idea when setting.</p> <ul> <li>AppleCpuPmCfgLock<ul> <li>If CFG - Lock in your BIOS has been turned off, this is not required.</li> </ul> </li> <li>AppleXcpmCfgLock<ul> <li>If CFG - Lock in your BIOS has been turned off, this is not required.</li> </ul> </li> <li>AppleXcpmExtraMsrs<ul> <li>Disable multiple critical MSR accesses for certain CPUs without native XCPM support.</li> <li>It is mainly used on CPUs without native power management.</li> <li>Generally, only these three types of CPUs, namely <code>Haswell - E</code>, <code>Broadwell - E</code>, and <code>Skylake - X</code>, are checked for use.</li> </ul> </li> <li>AppleXcpmForceBoost<ul> <li>Force maximum performance in XCPM mode.</li> <li>Force to increase the turbo boost. It is recommended to be used on professional equipment with long - term high load.</li> <li>Some Xeon series processors will benefit from this option being enabled.</li> </ul> </li> <li>CustomSMBIOSGuid<ul> <li>Perform GUID patching for the UpdatesBiosModeCustom custom mode.</li> <li>Dell laptops usually need to have this checked.</li> <li>If your laptop cannot display the serial number normally, you can also try checking this.</li> </ul> </li> <li>DisableIoMapper<ul> <li>Disable IOMapper support in XNU (VT - d).</li> <li>If VT - d is disabled in the BIOS, then there is no need to check this.</li> </ul> </li> <li>DisableLinkeditJettison<ul> <li>This option allows Lilu.kext and possibly other kext to run at the optimal performance level in macOS Big Sur.</li> <li>And there is no need to add keepsyms = 1 in the boot entry, which is equivalent to replacing it.</li> </ul> </li> <li>DisableRtcChecksum<ul> <li>Disable writing the main checksum in AppleRTC.</li> </ul> </li> <li>ExtendBTFeatureFlags<ul> <li>Set FeatureFlags to 0x0F to achieve all the functions of Bluetooth.</li> </ul> </li> <li>ForceSecureBootScheme<ul> <li>Force the x86 scheme for IMG4 verification.</li> <li>When using a SecureBootModel different from x86 legacy, this option is required on virtual machines.</li> </ul> </li> <li>IncreasePciBarSize<ul> <li>Increase the 32 - bit PCI Bar size in IOPCIFamily from 1GBs to 4GBs.</li> <li>The need for this option indicates a firmware configuration error or defect, so it is generally not used either.</li> </ul> </li> <li>LapicKernelPanic<ul> <li>Disable kernel panics caused by AP core lapic interrupts.</li> <li>For kernel crashes of HP laptops. If there is no crash, it is not recommended to check this.</li> </ul> </li> <li>LegacyCommpage<ul> <li>Replace the default 64 - bit commpage bcopy implementation with an implementation that does not require SSE3.</li> <li>This is very useful for traditional old platforms 10.4 - 10.6.</li> <li>New platforms generally do not check this for use.</li> </ul> </li> <li>PanicNoKextDump<ul> <li>Prevent the output of the Kext list when a kernel panic occurs, and provide a crash log for troubleshooting reference.</li> <li>It is recommended to enable this when troubleshooting.</li> </ul> </li> <li>PowerTimeoutKernelPanic<ul> <li>Fix kernel panics in macOS Catalina caused by device power state change time - outs.</li> <li>Check this when encountering situations where the computer cannot wake up from sleep and can only be woken up after a restart.</li> <li>Desktop computers generally do not check this.</li> </ul> </li> <li>ProvideCurrentCpuInfo<ul> <li>Provide current CPU information to the kernel.</li> </ul> </li> <li>SetApfsTrimTimeout<ul> <li>Versions before 10.14 do not need to be set.</li> <li>Mainly for SATA SSDs, different delays are set according to different controllers.</li> </ul> </li> <li>ThirdPartyDrives<ul> <li>Enable the TRIM instruction for SSDs, which may improve hibernation.</li> <li>NVMe SSDs will be automatically loaded by macOS, so this is not required.</li> <li>SATA SSDs can be enabled by executing <code>sudo trimforce enable</code> in the terminal, and the effect is the same.</li> </ul> </li> <li>XhciPortLimit<ul> <li>Remove the 15 - port limit. If the USB ports are perfectly customized, this may not be checked.</li> </ul> </li> </ul>"},{"location":"OpenCore%20Configuration/Kernel/#intel-desktop-platform","title":"Intel Desktop Platform","text":""},{"location":"OpenCore%20Configuration/Kernel/#yonah-conroe-penryn","title":"Yonah, Conroe, Penryn","text":""},{"location":"OpenCore%20Configuration/Kernel/#propertree","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/Kernel/#opencore-configurator","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/Kernel/#ocauxiliarytools","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/Kernel/#lynnfield-clarkdale-sandy-bridge-ivy-bridge","title":"Lynnfield, Clarkdale, Sandy Bridge, Ivy Bridge","text":""},{"location":"OpenCore%20Configuration/Kernel/#propertree_1","title":"ProperTree","text":"<p>CustomSMBIOSGuid: Consider enabling for Dell or VIAO machines.</p> <p>LapicKernelPanic: Consider enabling for HP machines.</p> <p>XhciPortLimit: If your computer does not have USB 3.0, do not enable it.</p>"},{"location":"OpenCore%20Configuration/Kernel/#opencore-configurator_1","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/Kernel/#ocauxiliarytools_1","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/Kernel/#haswell-broadwell-skylake-kaby-lake-coffee-lake-comet-lake","title":"Haswell, Broadwell, Skylake, Kaby Lake, Coffee Lake, Comet Lake","text":""},{"location":"OpenCore%20Configuration/Kernel/#propertree_2","title":"ProperTree","text":"<p>AppleCpuPmCfgLock: Required for systems 10.10 or older.</p> <p>CustomSMBIOSGuid: Consider enabling for Dell or VIAO machines.</p> <p>LapicKernelPanic: Consider enabling for HP machines.</p> <p>XhciPortLimit: Remove the 15 - port limit. If the USB ports are perfectly customized, this may not be checked.</p>"},{"location":"OpenCore%20Configuration/Kernel/#opencore-configurator_2","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/Kernel/#ocauxiliarytools_2","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/Kernel/#intel-high-end-desktop-platform","title":"Intel High - end Desktop Platform","text":""},{"location":"OpenCore%20Configuration/Kernel/#nehalem-westmere-sandy-and-ivy-bridge-e-haswell-e-broadwell-e","title":"Nehalem, Westmere, Sandy and Ivy Bridge - E, Haswell - E, Broadwell - E","text":""},{"location":"OpenCore%20Configuration/Kernel/#propertree_3","title":"ProperTree","text":"<p>CustomSMBIOSGuid: Consider enabling for Dell or VIAO machines.</p> <p>LapicKernelPanic: Consider enabling for HP machines.</p> <p>XhciPortLimit: Remove the 15 - port limit. If your computer does not have USB 3.0, do not enable it, or if the USB ports are perfectly customized, this may not be checked.</p>"},{"location":"OpenCore%20Configuration/Kernel/#opencore-configurator_3","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/Kernel/#ocauxiliarytools_3","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/Kernel/#skylake-xw-and-cascade-lake-xw","title":"Skylake - X/W and Cascade Lake - X/W","text":""},{"location":"OpenCore%20Configuration/Kernel/#propertree_4","title":"ProperTree","text":"<p>CustomSMBIOSGuid: Consider enabling for Dell or VIAO machines.</p> <p>LapicKernelPanic: Consider enabling for HP machines.</p> <p>XhciPortLimit: Remove the 15 - port limit. If your computer does not have USB 3.0, do not enable it, or if the USB ports are perfectly customized, this may not be checked.</p>"},{"location":"OpenCore%20Configuration/Kernel/#opencore-configurator_4","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/Kernel/#ocauxiliarytools_4","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/Kernel/#intel-laptop-platform","title":"Intel Laptop Platform","text":""},{"location":"OpenCore%20Configuration/Kernel/#clarksfield-arrandale-sandy-bridge-ivy-bridge","title":"Clarksfield, Arrandale, Sandy Bridge, Ivy Bridge,","text":""},{"location":"OpenCore%20Configuration/Kernel/#propertree_5","title":"ProperTree","text":"<p>CustomSMBIOSGuid: Consider enabling for Dell or VIAO machines.</p> <p>LapicKernelPanic: Consider enabling for HP machines.</p> <p>XhciPortLimit: Remove the 15 - port limit. If your computer does not have USB 3.0, do not enable it, or if the USB ports are perfectly customized, this may not be checked.</p>"},{"location":"OpenCore%20Configuration/Kernel/#opencore-configurator_5","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/Kernel/#ocauxiliarytools_5","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/Kernel/#haswell-broadwell-skylake-kaby-lake-coffee-lake-whiskey-lake-coffee-lake-plus-comet-lake-icelake","title":"Haswell, Broadwell, Skylake, Kaby Lake, Coffee Lake, Whiskey Lake, Coffee Lake Plus, Comet Lake, Icelake","text":""},{"location":"OpenCore%20Configuration/Kernel/#propertree_6","title":"ProperTree","text":"<p>AppleCpuPmCfgLock: Required for installing systems 10.10 or older.</p> <p>CustomSMBIOSGuid: Consider enabling for Dell or VIAO machines.</p> <p>LapicKernelPanic: Consider enabling for HP machines.</p> <p>XhciPortLimit: Remove the 15 - port limit. If your computer does not have USB 3.0, do not enable it, or if the USB ports are perfectly customized, this may not be checked.</p>"},{"location":"OpenCore%20Configuration/Kernel/#opencore-configurator_6","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/Kernel/#ocauxiliarytools_6","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/Kernel/#amd-desktop-platform","title":"AMD Desktop Platform","text":""},{"location":"OpenCore%20Configuration/Kernel/#bulldozer15h-jaguar16h-ryzen-threadripper17h-and-19h","title":"Bulldozer(15h), Jaguar(16h), Ryzen, Threadripper(17h and 19h)","text":"<p>The AMD platform is a little special. You also need to check DummyPowerManagement. Other Quirks can be configured with reference to the following figure:</p> <p> </p> <p>In addition, you also need to apply the Path patch. Since there are many attributes, it is recommended that you operate in text mode for higher efficiency:</p> <p></p>"},{"location":"OpenCore%20Configuration/Misc/","title":"Misc","text":"<p>Misc miscellaneous part. This part is basically universal, so I like this chapter very much. In this way, there is no need to consider various models, and it is more comfortable to write.</p>"},{"location":"OpenCore%20Configuration/Misc/#boot","title":"Boot","text":"<p>The following are my usage habits:</p> <p> </p> <ul> <li>Picker Mode: Select External for this, which means enabling an external theme (provided that you have copied the corresponding theme files).</li> <li>PickerVariant: You can manually select the theme you want to load here.</li> <li>PollAppleHotKeys:<ul> <li>It needs to be used in combination with the Quirk <code>KeySupport = Yes</code>.</li> <li>This is my personal habit, which means simulating Apple hotkeys.</li> <li>In this way, there is no need to add the <code>-v</code> parameter in the boot entry. You can directly use <code>Commad/Ctrl + V</code> on the system selection interface, which is very simple and convenient.</li> </ul> </li> </ul> <p>Shortcut key combinations:</p> <ul> <li><code>Cmd + V</code>: Enable <code>-v</code> to display boot codes.</li> <li><code>Cmd + Opt + P + R</code>: Reset NVRAM.</li> <li><code>Cmd + R</code>: Boot into the recovery partition.</li> <li><code>Cmd + S</code>: Boot into single - user mode.</li> <li><code>Option / ALT</code>: When <code>ShowPicker</code> is set to <code>NO</code>, display the boot item selection interface. When <code>ALT</code> is unavailable, the <code>ESC</code> key can be used instead.</li> <li><code>Cmd + C + Minus</code>: Turn off motherboard compatibility check, which is equivalent to adding the boot identifier <code>-no_compat_check</code>.</li> <li><code>Shift</code>: Safe mode.</li> </ul>"},{"location":"OpenCore%20Configuration/Misc/#debug","title":"Debug","text":"<p>This is mainly used for Debug debugging. Actually, the default settings can also be used. The following are the settings recommended by the OC official:</p> <p> </p> <p>Among them, Target means:</p> <p> </p> <p>The boot log will be recorded in the root directory of the EFI partition each time, which is convenient for debugging. When it is stable in the later stage, you can uncheck \"Record to File\", that is, the value of Target is <code>3</code>.</p>"},{"location":"OpenCore%20Configuration/Misc/#security","title":"Security","text":"<p>The following are also my usage habits:</p> <p> </p> <ul> <li>Scan Policy can be changed to 0. Actually, the selectable values are as follows:</li> </ul> <p> </p> <p>Sometimes, when installing the system, there is a situation where OC cannot recognize the Windows boot entry. Checking \"Allow scanning of EFI system partition file system\" has solved this problem. Theoretically, changing Scan Policy to 0 can also solve this kind of problem.</p> <ul> <li> <p>Valut: Optional. If you make a mistake, theoretically, the computer will not be able to boot directly, so it is basically a required option.</p> </li> <li> <p>AllowToggle: Checked. This is also my habit. After checking this, each time you turn SIP on or off, you only need to switch it on the system selection interface, which is very convenient:</p> </li> </ul> <p></p>"},{"location":"OpenCore%20Configuration/NVRAM/","title":"NVRAM","text":"<p>NVRAM part. This part is basically universal, so I also like this chapter very much. In this way, there is no need to consider various models, and it is more comfortable to write.</p> <p> </p> <p>This part usually mainly focuses on the following five options.</p>"},{"location":"OpenCore%20Configuration/NVRAM/#uiscale-ui-scaling","title":"UIScale UI Scaling","text":"<p>UIScale has two selectable values, 01 and 02:</p> <p> </p> <ul> <li>01 indicates the default scaling.</li> <li>02 indicates enabling HiDPi.<ul> <li>Generally, if it is used with a native 4K display, the effect will be better.</li> <li>If a non - 4K display uses a script to forcibly enable HiDPi, it is also recommended to use this, so that the boot logo will not change in size.</li> </ul> </li> </ul> <p>Update. This part has been adjusted in later versions of OC. The specific changes are as follows:</p> <p>In later versions of OC, the UCScale parameter has been moved to the \"Display Output\" tab under \"UEFI Settings\". In this way, everyone can manually select the corresponding value:</p> <p></p>"},{"location":"OpenCore%20Configuration/NVRAM/#boot-args-boot-options","title":"boot - args Boot Options","text":"<p>It is mainly used to set some boot options and the like:</p> <p> </p> <p>Common kernel boot identifier set:</p> Boot Identifier Function <code>-amd_no_dgpu_accel</code> Disable AMD graphics card hardware acceleration <code>cpus = #</code> Enable <code>#</code> CPU cores <code>darkwake = 0</code> Disable Power Nap <code>dart = 0</code> Disable VT - d <code>debug = 0x100</code> Do not auto - restart when KP occurs <code>kext - dev - mode = 1</code> Enable Kext development mode. Do not use if you are not a developer. <code>-no_compat_check</code> Disable compatibility check <code>-s</code> Single - user mode <code>slide = #</code> Manually set the KASLR slide value to <code>#</code> <code>-v</code> Verbose boot code mode <code>-x</code> Safe mode <code>alcid = x</code> Inject AppleALC sound card ID <code>agdpmod = pikera</code> High - end A - cards such as 5700XT need to be used with this parameter, otherwise the screen may be black. <code>-wegnoegpu</code> Used to disable all other GPUs except the integrated Intel iGPU"},{"location":"OpenCore%20Configuration/NVRAM/#csr-active-config-sip-related","title":"csr - active - config SIP - related","text":"<p>Settings for System Integrity Protection (SIP). Generally, it is recommended to use the default.</p> <p> </p> <p>Explanation of relevant values:</p> <ul> <li><code>00000000</code> - SIP is fully enabled (0x0).</li> <li><code>03000000</code> - Disable kext signing (0x1) and file system protection (0x2).</li> <li><code>FF030000</code> - Disable all flags in macOS High Sierra (0x3ff).</li> <li><code>FF070000</code> - Disable all flags in macOS Mojave and in macOS Catalina (0x7ff), because Apple introduced a value for the executable policy.</li> <li><code>FF0F0000</code> - Disable all flags in macOS Big Sur (0xfff), which provides another new flag for authenticated root.</li> </ul> <p>I personally recommend using the following to switch SIP, which is more convenient and efficient:</p> <p> </p>"},{"location":"OpenCore%20Configuration/NVRAM/#prev-langkbd-language-settings","title":"prev - lang:kbd Language Settings","text":"<p>Set the language during system installation here:</p> <p> </p> <p>If you find that the system installation language is Russian, most likely the language setting here is wrong. Remember to change it back to the corresponding language. After changing, you need to reset NVRAM for it to take effect.</p> <p>Common languages:</p> Language String DATA Type English en - US:0 656e2d55533a30 Chinese zh - Hans:0 7A682D48616E733A323532"},{"location":"OpenCore%20Configuration/NVRAM/#writeflash","title":"WriteFlash","text":"<p>This option is also checked by default. It means allowing to write flash memory for the added variables. We can keep the default:</p> <p></p>"},{"location":"OpenCore%20Configuration/PCI/","title":"PCI","text":"<p>Device configurations are provided to macOS through dedicated buffers for setting PCI device properties, such as Intel buffer frame patches, sound card Layout ID, etc. Of course, the ID of the sound card can also be added directly in the form of <code>alcid = xx</code> through the boot entry.</p>"},{"location":"OpenCore%20Configuration/PCI/#finding-device-addresses","title":"Finding Device Addresses","text":"<p>Hardware addresses of different devices are different. You can use Hackintool to view specific address information:</p> <p> </p> <p>Or you can also use OCC directly to identify and add device address information:</p> <p> </p> <p>The effect after adding is as follows:</p> <p> </p> <p>Of course, there are still some missing device properties, which require us to manually supplement them.</p>"},{"location":"OpenCore%20Configuration/PCI/#intel-desktop-platform","title":"Intel Desktop Platform","text":""},{"location":"OpenCore%20Configuration/PCI/#yonah-conroe-penryn-lynnfield-clarkdale","title":"Yonah, Conroe, Penryn, Lynnfield, Clarkdale","text":"<ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> </ul> <p>These platforms do not require special settings. You only need to add and improve the sound card information. Of course, you can also directly add it through the boot entry. During the early debugging process, I suggest that you add it in the form of <code>alcid = xx</code> through the boot entry.</p>"},{"location":"OpenCore%20Configuration/PCI/#sandy-bridge","title":"Sandy Bridge","text":"<ul> <li> <p>PciRoot(0x0)/Pci(0x1b,0x0)</p> <ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li> <p>PciRoot(0x0)/Pci(0x2,0x0)</p> <ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,snb - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> </ul> </li> </ul> AAPL,snb - platform - id Explanation <code>10000300</code> When the desktop iGPU is used to drive the output display signal. <code>00000500</code> The integrated graphics is only used for calculation and does not drive the output display signal (recommended when there is a discrete graphics card). device - id Explanation <code>26010000</code> When the desktop iGPU is used to drive the output display signal. <code>02010000</code> The integrated graphics is only used for calculation and does not drive the output display signal (recommended when there is a discrete graphics card). <p>The following is an example of the final configuration of the desktop HD 3000 integrated graphics:</p> <p> </p>"},{"location":"OpenCore%20Configuration/PCI/#ivy-bridge","title":"Ivy Bridge","text":"<ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li>PciRoot(0x0)/Pci(0x2,0x0)<ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and provide compatibility.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Explanation <code>0A006601</code> When the desktop iGPU is used to drive the output display signal. <code>07006201</code> The integrated graphics is only used for calculation and does not drive the output display signal (recommended when there is a discrete graphics card). <p>The AAPL,ig - platform - id of the desktop HD 4000 integrated graphics is <code>0A006601</code>.</p> <ul> <li>PciRoot(0x0)/Pci(0x16,0x0)<ul> <li>Required for the Ivy Bridge CPU to work with 6 - series motherboards (i.e., H61, B65, Q65, P67, H67, Q67, Z68).</li> <li>Deceive the IMEI device to obtain support.</li> <li>This property is still required regardless of whether SSDT - IMEI is used.</li> </ul> </li> </ul> Key Type Value device - id Data <code>3A1E0000</code> <p>If it is a 7 - series motherboard (i.e., B75, Q75, Z75, H77, Q77, Z77), this item is not required.</p>"},{"location":"OpenCore%20Configuration/PCI/#haswell-broadwell","title":"Haswell, Broadwell","text":"<ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li>PciRoot(0x0)/Pci(0x2,0x0)<ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext.</li> <li>If it is discrete graphics output, this property may not be required.</li> <li>If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics.</li> <li>If it is discrete graphics output, this property may not be required.</li> <li>If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size.</li> <li>If it is discrete graphics output, this property may not be required.</li> <li>If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Explanation <code>0300220D</code> When the desktop iGPU is used to drive the output display signal. <code>04001204</code> The integrated graphics is only used for calculation and does not drive the output display signal (recommended when there is a discrete graphics card). <code>07002216</code> Another optional ID when the desktop iGPU is used to drive the output display signal. device - id Explanation <code>12040000</code> The device ID of the HD 4600 integrated graphics. <p>The following is an example of the final configuration of the HD 4400 integrated graphics:</p> Key Type Value AAPL,ig - platform - id Data <code>0300220D</code> framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> framebuffer - fbmem Data <code>00009000</code> device - id Data <code>12040000</code> <p> </p> <p>The following is an example of the final configuration of the lris Pro 6200 integrated graphics:</p> Key Type Value AAPL,ig - platform - id Data <code>07002216</code> framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> framebuffer - fbmem Data <code>00009000</code> <p> </p>"},{"location":"OpenCore%20Configuration/PCI/#skylake","title":"Skylake","text":"<ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li>PciRoot(0x0)/Pci(0x2,0x0)<ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext.</li> <li>If it is discrete graphics output, this property may not be required.</li> <li>If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics.</li> <li>If it is discrete graphics output, this property may not be required.</li> <li>If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size.</li> <li>If it is discrete graphics output, this property may not be required.</li> <li>If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Explanation <code>00001219</code> Used when the desktop iGPU is used to drive the monitor. <code>01001219</code> The integrated graphics is only used for calculation and does not drive the output display signal (recommended when there is a discrete graphics card). <p>Users of the HD P530 integrated graphics should note that your iGPU integrated graphics is not natively supported, so you need to add the following properties:</p> Key Type Value device - id Data <code>1B190000</code> <p>The following is an example of the final configuration of the HD P530 integrated graphics:</p> Key Type Value AAPL,ig - platform - id Data <code>00001219</code> framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> framebuffer - fbmem Data <code>00009000</code> device - id Data <code>1B190000</code> <p> </p>"},{"location":"OpenCore%20Configuration/PCI/#kaby-lake","title":"Kaby Lake","text":"<ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li>PciRoot(0x0)/Pci(0x2,0x0)<ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Patch through WhateverGreen.kext.</li> <li>If it is discrete graphics output, this property may not be required.</li> <li>If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics.</li> <li>If it is discrete graphics output, this property may not be required.</li> <li>If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size.</li> <li>If it is discrete graphics output, this property may not be required.</li> <li>If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Explanation <code>00001259</code> When the desktop iGPU is used to drive the output display signal. <code>03001259</code> When the desktop iGPU is only used for calculation tasks and does not drive the monitor. <p>The following is an example of the final configuration of the HD630 integrated graphics:</p> Key Type Value AAPL,ig - platform - id Data <code>00001259</code> framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> <p> </p>"},{"location":"OpenCore%20Configuration/PCI/#coffee-lake","title":"Coffee Lake","text":"<ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li>PciRoot(0x0)/Pci(0x2,0x0)<ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Explanation <code>07009B3E</code> When the desktop iGPU is used to drive the output display signal. <code>00009B3E</code> If <code>07009B3E</code> doesn't work, you can consider using this ID. <code>0300913E</code> The integrated graphics is only used for calculation and does not drive the output display signal (recommended when there is a discrete graphics card). <p>The following is an example of the final configuration of the HD630 integrated graphics:</p> Key Type Value AAPL,ig - platform - id Data <code>07009B3E</code> framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> <p> </p>"},{"location":"OpenCore%20Configuration/PCI/#comet-lake","title":"Comet Lake","text":"<ul> <li> <p>PciRoot(0x0)/Pci(0x1b,0x0)</p> <ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li> <p>PciRoot(0x0)/Pci(0x2,0x0)</p> <ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Explanation <code>07009B3E</code> When the desktop iGPU is used to drive the output display signal. <code>00009B3E</code> If <code>07009B3E</code> doesn't work, you can consider using this ID. <code>0300C89B</code> The integrated graphics is only used for calculation and does not drive the output display signal (recommended when there is a discrete graphics card). <p>The following is an example of the final configuration of the HD630 integrated graphics:</p> Key Type Value AAPL,ig - platform - id Data <code>07009B3E</code> framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> <p> </p>"},{"location":"OpenCore%20Configuration/PCI/#intel-high-end-desktop-platform","title":"Intel High - end Desktop Platform","text":""},{"location":"OpenCore%20Configuration/PCI/#nehalem-westmere-sandy-and-ivy-bridge-e-haswell-e-skylake-xw-and-cascade-lake-xw","title":"Nehalem, Westmere, Sandy and Ivy Bridge - E, Haswell - E, Skylake - X/W and Cascade Lake - X/W","text":"<ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> </ul> <p>These platforms do not require special settings. You only need to add and improve the sound card information. Of course, you can also directly add it through the boot entry. During the early debugging process, I suggest that you add it in the form of <code>alcid = xx</code> through the boot entry.</p>"},{"location":"OpenCore%20Configuration/PCI/#intel-laptop-platform","title":"Intel Laptop Platform","text":""},{"location":"OpenCore%20Configuration/PCI/#skylake-xw-cascade-lake-xw","title":"Skylake - X/W, Cascade Lake - X/W","text":"<ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li>PciRoot(0x0)/Pci(0x2,0x0)<ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - singlelink<ul> <li>Frame buffer single - link. Some old laptops need to configure this option.</li> </ul> </li> </ul> </li> </ul> Property Type Value framebuffer - patch - enable Data <code>01000000</code> framebuffer - singlelink Data <code>01000000</code>"},{"location":"OpenCore%20Configuration/PCI/#sandy-bridge_1","title":"Sandy Bridge","text":"<ul> <li> <p>PciRoot(0x0)/Pci(0x1b,0x0)</p> <ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li> <p>PciRoot(0x0)/Pci(0x2,0x0)</p> <ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,snb - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> </ul> </li> </ul> AAPL,snb - platform - id Type Explanation <code>00000100</code> Laptop For laptops. <code>10000300</code> NUC For Intel NUC. <ul> <li>PciRoot(0x0)/Pci(0x16,0x0)<ul> <li>It is a common configuration for Sandy Bridge CPU and Ivy Bridge chipset.</li> <li>Deceive the IMEI device to get support.</li> <li>This property is still required regardless of whether SSDT - IMEI is used.</li> <li>Models with Hx6x chipset need to be configured. You can use AIDA64 to check. For example, the chipset of Core i3 - 3110M is HM67.</li> </ul> </li> </ul> Key Type Value device - id Data <code>3A1C0000</code>"},{"location":"OpenCore%20Configuration/PCI/#ivy-bridge_1","title":"Ivy Bridge","text":"<ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. You can use Hackintool to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, you can refer to: AppleALC Supported Device List</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li>PciRoot(0x0)/Pci(0x2,0x0)<ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - memorycount<ul> <li>Match FBMemoryCount.</li> </ul> </li> <li>framebuffer - pipecount<ul> <li>Match PipeCount.</li> </ul> </li> <li>framebuffer - portcount<ul> <li>Match PortCount.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - con1 - enable<ul> <li>Enable patching for external monitor 1.</li> </ul> </li> <li>framebuffer - con1 - alldata<ul> <li>Connection information (interface information, etc.) of monitor 1.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Type Explanation <code>03006601</code> Laptop Recommended for monitors with 1366*768 or lower resolution. <code>04006601</code> Laptop Recommended for monitors with 1600*900 or higher resolution. <code>09006601</code> Laptop If the above two IDs don't work, you can try this one, mainly for use with some eDP monitors. <code>0B006601</code> NUC Recommended for Intel NUC. <p>The buffer settings are as follows:</p> <ul> <li>framebuffer - patch - enable<ul> <li>Number</li> <li>1</li> </ul> </li> <li>framebuffer - memorycount<ul> <li>Number</li> <li>2</li> </ul> </li> <li>framebuffer - pipecount<ul> <li>Number</li> <li>2</li> </ul> </li> <li>framebuffer - portcount<ul> <li>Number</li> <li>4</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Data</li> <li><code>00000004</code></li> </ul> </li> <li>framebuffer - con1 - enable<ul> <li>Number</li> <li>1</li> </ul> </li> <li>framebuffer - con1 - alldata<ul> <li>Data</li> <li><code>02050000 00040000 07040000 03040000 00040000 81000000 04060000 00040000 81000000</code></li> </ul> </li> </ul>"},{"location":"OpenCore%20Configuration/PCI/#haswell","title":"Haswell","text":"<ul> <li> <p>PciRoot(0x0)/Pci(0x1b,0x0)</p> <ul> <li>The device path is subject to the actual situation and there may be errors. Hackintool can be used to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, refer to: AppleALC Supported Device List.</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li> <p>PciRoot(0x0)/Pci(0x2,0x0)</p> <ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Type Explanation <code>0500260A</code> Laptop Recommended ID values for HD 5000, HD 5100, and HD 5200 integrated graphics. <code>0600260A</code> Laptop Recommended ID values for HD 4200, HD 4400, and HD 4600 integrated graphics. Device - id is required. <code>0300220D</code> NUC Recommended ID values for all NUCs with the Hasewell architecture. Device - id is required. <p>The buffer settings are as follows:</p> Key Type Value framebuffer - patch - enable Data <code>01000000</code> framebuffer - cursormem Data <code>00009000</code> <p>Device - id values for HD 4200, HD 4400, and HD 4600 integrated graphics:</p> Key Type Value device - id Data <code>12040000</code>"},{"location":"OpenCore%20Configuration/PCI/#broadwell","title":"Broadwell","text":"<ul> <li> <p>PciRoot(0x0)/Pci(0x1b,0x0)</p> <ul> <li>The device path is subject to the actual situation and there may be errors. Hackintool can be used to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, refer to: AppleALC Supported Device List.</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li> <p>PciRoot(0x0)/Pci(0x2,0x0)</p> <ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Type Explanation <code>06002616</code> Laptop Recommended for most laptops. <code>02001616</code> NUC Recommended for NUCs with the Broadwell architecture. <p>If your graphics card is HD 5600, you usually need to fake the device - id value:</p> Key Type Value device - id data 26160000 <p>The buffer settings are as follows:</p> Key Type Value framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> framebuffer - fbmem Data <code>00009000</code>"},{"location":"OpenCore%20Configuration/PCI/#skylake_1","title":"Skylake","text":"<ul> <li> <p>PciRoot(0x0)/Pci(0x1b,0x0)</p> <ul> <li>The device path is subject to the actual situation and there may be errors. Hackintool can be used to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, refer to: AppleALC Supported Device List.</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li> <p>PciRoot(0x0)/Pci(0x2,0x0)</p> <ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Type Explanation <code>00001619</code> Laptop Recommended for HD 515, HD 520, HD 530, HD 540, HD 550, and P530 integrated graphics. <code>00001E19</code> Laptop If the above ID doesn't work, you can try this one. <code>00001B19</code> Laptop Recommended for HD 510. <code>00001E19</code> NUC Recommended for HD 515. <code>02001619</code> NUC Recommended for HD 520/530. <code>02002619</code> NUC Recommended for HD 540/550. <code>05003B19</code> NUC Recommended for HD 580. <p>If your integrated graphics is HD 510, you usually need to fake the device - id value:</p> Key Type Value device - id Data <code>02190000</code> <p>If your integrated graphics is HD 550 or P530, you usually need to fake the device - id value:</p> Key Type Value device - id Data <code>16190000</code> <p>The buffer settings are as follows:</p> Key Type Value framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> framebuffer - fbmem Data <code>00009000</code>"},{"location":"OpenCore%20Configuration/PCI/#kaby-lake_1","title":"Kaby Lake","text":"<ul> <li> <p>PciRoot(0x0)/Pci(0x1b,0x0)</p> <ul> <li>The device path is subject to the actual situation and there may be errors. Hackintool can be used to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, refer to: AppleALC Supported Device List.</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li> <p>PciRoot(0x0)/Pci(0x2,0x0)</p> <ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with our system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Patch through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Type Explanation <code>00001B59</code> Laptop Recommended for HD 615, HD 620, HD 630, HD 640, and HD 650. <code>00001659</code> Laptop If <code>00001B59</code> fails to accelerate, you can try this value. <code>0000C087</code> Laptop Recommended for UHD 617 of Amber Lake and UHD 62 of Kaby Lake - R. <code>00001E59</code> NUC Recommended for HD 615. <code>00001B59</code> NUC Recommended for HD 630. <code>02002659</code> NUC Recommended for HD 640/650. <p>If your integrated graphics is HD 620, you usually need to fake the device - id value:</p> Key Type Value device - id Data <code>16590000</code> <p>All HD 6XX series (UHD is fine) may have some small output problems, which may lead to lock - ups or kernel crashes. Consider the following buffer frame patches:</p> <ul> <li>framebuffer - con1 - enable<ul> <li>Data</li> <li><code>01000000</code></li> </ul> </li> <li>framebuffer - con1 - alldata<ul> <li>Data</li> <li><code>01050A00 00080000 87010000 02040A00 00080000 87010000 FF000000 01000000 20000000</code></li> </ul> </li> </ul> <p>Other buffer frame settings:</p> Key Type Value framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> framebuffer - fbmem Data <code>00009000</code>"},{"location":"OpenCore%20Configuration/PCI/#coffee-lake-whiskey-lake","title":"Coffee Lake, Whiskey Lake","text":"<ul> <li> <p>PciRoot(0x0)/Pci(0x1b,0x0)</p> <ul> <li>This device path is subject to the actual situation and may have errors. Hackintool can be used to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, refer to: AppleALC Supported Device List.</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li> <p>PciRoot(0x0)/Pci(0x2,0x0)</p> <ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with the system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Type Explanation <code>0900A53E</code> Laptop Recommended for UHD 630. <code>00009B3E</code> Laptop Recommended for UHD 620. <code>07009B3E</code> NUC Recommended for UHD 620/630. <code>0000A53E</code> NUC Recommended for UHD 655. <p>For UHD 630, you can try the following device - id to improve stability:</p> Key Type Value device - id Data <code>9B3E0000</code> <p>For UHD 620 of Coffee Lake CPU, you can try the following device - id to improve stability:</p> Key Type Value device - id Data <code>9B3E0000</code> <p>The reference settings for other buffer settings are as follows:</p> Key Type Value framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> framebuffer - fbmem Data <code>00009000</code>"},{"location":"OpenCore%20Configuration/PCI/#coffee-lake-plus-and-comet-lake","title":"Coffee Lake Plus and Comet Lake","text":"<ul> <li> <p>PciRoot(0x0)/Pci(0x1b,0x0)</p> <ul> <li>This device path is subject to the actual situation and may have errors. Hackintool can be used to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, refer to: AppleALC Supported Device List.</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> <li> <p>PciRoot(0x0)/Pci(0x2,0x0)</p> <ul> <li>Basically, the integrated graphics of all Intel devices use this path (the same for genuine Macs).</li> <li>Configure the iGPU integrated graphics.</li> <li>AAPL,ig - platform - id<ul> <li>macOS uses this to determine how the iGPU driver interacts with the system.</li> </ul> </li> <li>device - id<ul> <li>Solve some driver abnormal problems and improve compatibility.</li> </ul> </li> <li>framebuffer - patch - enable<ul> <li>Enable patching through WhateverGreen.kext. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - stolenmem<ul> <li>Set the minimum stolen memory of the integrated graphics. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> <li>framebuffer - fbmem<ul> <li>Set the buffer frame memory size. If it is discrete graphics output, this property may not be required. If the BIOS can set <code>DVMT Pre - Allocated: 64MB</code>, this property may not be required either.</li> </ul> </li> </ul> </li> </ul> AAPL,ig - platform - id Type Explanation <code>0900A53E</code> Laptop Recommended for UHD 630. <code>00009B3E</code> Laptop Recommended for UHD 620. <code>07009B3E</code> NUC Recommended for UHD 620/630. <code>0000A53E</code> NUC Recommended for UHD 655. <p>For UHD 630, you can try the following device - id to improve stability:</p> Key Type Value device - id Data <code>9B3E0000</code> <p>For UHD 620 of Comet Lake CPU, you can try the following device - id to improve stability:</p> Key Type Value device - id Data <code>9B3E0000</code> <p>The reference settings for other buffer settings are as follows:</p> Key Type Value framebuffer - patch - enable Data <code>01000000</code> framebuffer - stolenmem Data <code>00003001</code> framebuffer - fbmem Data <code>00009000</code>"},{"location":"OpenCore%20Configuration/PCI/#amd-desktop-platform","title":"AMD Desktop Platform","text":"<p>Since AMD CPUs do not have integrated graphics, these platforms do not require special settings. You only need to add and improve sound card information. Of course, you can also directly add it through the boot entry. During the early debugging process, I suggest that you add it in the form of <code>alcid = xx</code> through the boot entry:</p> <ul> <li>PciRoot(0x0)/Pci(0x1b,0x0)<ul> <li>This device path is subject to the actual situation and may have errors. Hackintool can be used to obtain the specific device path.</li> <li>layout - id</li> <li>AppleALC audio injection. For the complete ALC ID, refer to: AppleALC Supported Device List.</li> <li>I suggest that you directly add it in the form of <code>alcid = xx</code> through the boot entry, which is simple and convenient.</li> </ul> </li> </ul>"},{"location":"OpenCore%20Configuration/Quiks/","title":"Quiks","text":"<p>Through the configuration of the preparatory work in the previous section, our SSDTs should have been loaded. At this point, generally, we only need to adjust the Quirks. A few SSDTs require corresponding patches to take effect. For details of patching, you can refer to the video content. However, if the following sample configurations require patching, it will be written out and you can just follow it.</p>"},{"location":"OpenCore%20Configuration/Quiks/#complete-quirks","title":"Complete Quirks","text":"<p>Because the versions of different platforms vary, before the detailed explanation, here is a complete Quirks explanation for OC 0.7.3, so that you generally have an idea when setting it up.</p> <ul> <li>FadtEnableReset<ul> <li>Fixes reboot and shutdown on old hardware. It's not recommended to enable it unless necessary.</li> <li>Some newer laptops may also need this option to fix reboot and shutdown.</li> </ul> </li> <li>NormalizeHeaders<ul> <li>Clears the ACPI header fields. Only macOS 10.13 requires this.</li> <li>Versions after 10.14 have already fixed this problem.</li> </ul> </li> <li>RebaseRegions<ul> <li>Tries to tentatively relocate the ACPI memory regions. It must be enabled if using a custom DSDT.</li> </ul> </li> <li>ResetHwSig<ul> <li>Applicable to hardware that can't maintain the hardware signature during reboot and causes problems with waking from hibernation.</li> </ul> </li> <li>ResetLogoStatus<ul> <li>Hardware that can't display the OEM Windows logo on systems with a BGRT table needs to enable this.</li> </ul> </li> <li>SyncTableIds<ul> <li>This can solve the licensing problem in old Windows operating systems caused by the incompatibility between the patched table and the SLIC table.</li> </ul> </li> </ul>"},{"location":"OpenCore%20Configuration/Quiks/#intel-desktop-platform","title":"Intel Desktop Platform","text":""},{"location":"OpenCore%20Configuration/Quiks/#yonah-conroe-penryn-lynnfield-clarkdale","title":"Yonah, Conroe, Penryn, Lynnfield, Clarkdale","text":"<p>The initially supported version is OS X 10.4.10, and the last supported operating system version is macOS 10.13.6.</p> <p>These versions do not require adjustment of Quirks, and you can keep them all as the default in the sample configuration.</p>"},{"location":"OpenCore%20Configuration/Quiks/#sandy-bridge-ivy-bridge","title":"Sandy Bridge, Ivy Bridge","text":"<p>The iGPU integrated graphics of Sandy Bridge is only officially supported before macOS 10.13, and most Sandy Bridge motherboards do not support UEFI.</p> <p>The ACPI of Sandy Bridge and Ivy Bridge often needs to be used with \"deletion\": delete CpuPm, delete Cpu0Ist.</p> <p>Fortunately, the default sample file already has these, and we only need to check \"Enable\" and it's okay.</p> <p> </p> <p>These versions do not require adjustment of Quirks, and you can keep them all as the default in the sample configuration.</p>"},{"location":"OpenCore%20Configuration/Quiks/#haswell-broadwell-skylake-kaby-lake-coffee-lake-comet-lake","title":"Haswell, Broadwell, Skylake, Kaby Lake, Coffee Lake, Comet Lake","text":"<p>These versions do not require adjustment of Quirks, and you can keep them all as the default in the sample configuration.</p>"},{"location":"OpenCore%20Configuration/Quiks/#intel-high-end-desktop-platform","title":"Intel High - end Desktop Platform","text":""},{"location":"OpenCore%20Configuration/Quiks/#nehalem-westmere-sandy-ivy-bridge-e-haswell-e-broadwell-e-skylake-xw-cascade-lake-xw","title":"Nehalem, Westmere, Sandy, Ivy Bridge - E, Haswell - E, Broadwell - E, Skylake - X/W, Cascade Lake - X/W","text":"<p>These versions do not require adjustment of Quirks, and you can keep them all as the default in the sample configuration.</p>"},{"location":"OpenCore%20Configuration/Quiks/#intel-laptop-platform","title":"Intel Laptop Platform","text":""},{"location":"OpenCore%20Configuration/Quiks/#clarksfield-arrandale","title":"Clarksfield, Arrandale","text":"<p>Because of the use of SSDT - XOSI, it also needs to be used with the Change _OSI to XOSI patch:</p> Comment String Change _OSI to XOSI Enabled Boolean YES Count Number 0 Limit Number 0 Find Data <code>5f4f5349</code> Replace Data <code>584f5349</code> <p>This XOSI patch is also integrated in OCC, and you can patch and enable it with just one click.</p> <p> </p> <p>These versions do not require adjustment of Quirks, and you can keep them all as the default in the sample configuration.</p>"},{"location":"OpenCore%20Configuration/Quiks/#sandy-bridge-ivy-bridge_1","title":"Sandy Bridge, Ivy Bridge","text":"<p>The iGPU integrated graphics of Sandy Bridge is only officially supported before macOS 10.13, and most Sandy Bridge motherboards do not support UEFI.</p> <p>The ACPI of Sandy Bridge and Ivy Bridge often needs to be used with \"deletion\": delete CpuPm, delete Cpu0Ist.</p> <p>Fortunately, the default sample file already has these, and we only need to check \"Enable\" and it's okay.</p> <p> </p> <p>Because of the use of SSDT - XOSI, it also needs to be used with the Change _OSI to XOSI patch:</p> Comment String Change _OSI to XOSI Enabled Boolean YES Count Number 0 Limit Number 0 Find Data <code>5f4f5349</code> Replace Data <code>584f5349</code> <p>This XOSI patch is also integrated in OCC, and you can patch and enable it with just one click.</p> <p> </p> <p>These versions do not require adjustment of Quirks, and you can keep them all as the default in the sample configuration.</p>"},{"location":"OpenCore%20Configuration/Quiks/#haswell-broadwell-skylake-kaby-lake-coffee-lake-whiskey-lake-coffee-lake-plus-comet-lake-icelake","title":"Haswell, Broadwell, Skylake, Kaby Lake, Coffee Lake, Whiskey Lake, Coffee Lake Plus, Comet Lake, Icelake","text":"<p>Because of the use of SSDT - XOSI, it also needs to be used with the Change _OSI to XOSI patch:</p> Comment String Change _OSI to XOSI Enabled Boolean YES Count Number 0 Limit Number 0 Find Data <code>5f4f5349</code> Replace Data <code>584f5349</code> <p>This XOSI patch is also integrated in OCC, and you can patch and enable it with just one click.</p> <p> </p> <p>These versions do not require adjustment of Quirks, and you can keep them all as the default in the sample configuration.</p>"},{"location":"OpenCore%20Configuration/Quiks/#amd-desktop-platform","title":"AMD Desktop Platform","text":""},{"location":"OpenCore%20Configuration/Quiks/#bulldozer15h-jaguar16h-ryzen-threadripper17h-and-19h","title":"Bulldozer(15h), Jaguar(16h), Ryzen, Threadripper(17h and 19h)","text":"<p>These versions do not require adjustment of Quirks, and you can keep them all as the default in the sample configuration.</p>"},{"location":"OpenCore%20Configuration/SMBIOS/","title":"SMBIOS","text":"<p>This part mainly introduces information related to machine models. Tools like OCC can be used to generate it with one click. Just choose the one similar to your CPU. Since Intel CPUs are rather complex, if you are not sure, you can search on the official website to ensure that they are of the same architecture. This is the most efficient and simplest way. Or you can also refer to the OC official SMBIOS selection for suggestions.</p>"},{"location":"OpenCore%20Configuration/SMBIOS/#ocauxiliarytools","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/SMBIOS/#opencore-configurator","title":"Opencore Configurator","text":"<p>OCC will automatically change the CPU model according to the machine model you choose. If you find that your CPU model is incorrect, you can manually change the ProcessorType to 0.</p>"},{"location":"OpenCore%20Configuration/SMBIOS/#amd-and-cpu-settings-without-integrated-graphics","title":"AMD and CPU settings without integrated graphics","text":"<p>Generally, if your CPU does not have an integrated graphics (ending with F) or your CPU's integrated graphics has no solution (AMD series), it is recommended that the best machine model to set is iMac Pro1,1.</p> <p></p> <p>Because the Mac model in this area also does not have an integrated graphics card, you can fully utilize the discrete graphics card for hardware decoding:</p> <p></p>"},{"location":"OpenCore%20Configuration/SMBIOS/#is-your-serial-number-perfect","title":"Is your serial number perfect?","text":"<p>Since the serial number will affect the use of iMessage (text messages), if you want a closer experience to a genuine Apple product, you have to choose a valid serial number. The official Apple serial number query address is:</p> <p>https://checkcoverage.apple.com/cn/zh/</p> <p>There are 3 levels of serial numbers.</p> <p>Valid and unused serial numbers &gt; Invalid serial numbers &gt; Valid but used serial numbers</p> <p>I tested that the invalid serial numbers automatically generated by the editor do not affect the use of Apple services. Therefore, I suggest that if you can't get a perfect valid and unused serial number, just use an invalid serial number directly. As time goes by, the number of valid and unused serial numbers will only become fewer and fewer.</p>"},{"location":"OpenCore%20Configuration/SMBIOS/#invalid-serial-numbers","title":"Invalid serial numbers","text":""},{"location":"OpenCore%20Configuration/SMBIOS/#valid-but-used-serial-numbers","title":"Valid but used serial numbers","text":"<p>Next are valid serial numbers that have been used. Maybe the telephone technical support has expired:</p> <p></p> <p>Used and the telephone support has expired</p> <p>Or maybe the telephone technical support is still valid:</p> <p></p> <p>Used but the telephone support is still valid</p> <p>But it doesn't help much. This means that this serial number has also been used.</p>"},{"location":"OpenCore%20Configuration/SMBIOS/#valid-and-unused-serial-numbers","title":"Valid and unused serial numbers","text":"<p>The most perfect serial number. I tried for a very long time and finally got one:</p> <p></p> <p>This means that the serial number exists and has not been activated yet. When you see this kind of serial number, don't hesitate and go for it!</p> <p>However, for some older models, basically you can't get this kind of serial number anymore. They have been discontinued for a long time. So to get this kind of serial number, you need both luck and opportunity.</p>"},{"location":"OpenCore%20Configuration/SMBIOS/#what-if-the-access-limit-is-reached","title":"What if the access limit is reached?","text":"<p>In fact, just clear the browser cache. What? You don't know how to clear the browser cache? Then use the search engine to search by yourself!</p>"},{"location":"OpenCore%20Configuration/UEFI/","title":"UEFI","text":"<p>This section allows different types of UEFI modifications to be applied to the operating system boot loader, mainly the Apple boot loader (boot.efi). These modifications currently provide various patches and environment changes for different firmware types. Some of these features were initially implemented as part of AptioeMoryFix.efi (no longer maintained).</p>"},{"location":"OpenCore%20Configuration/UEFI/#complete-quirks","title":"Complete Quirks","text":"<p>Since the versions of different platforms vary, before the detailed explanation, here is a complete description of the Quirks of OC 0.7.3, so that you generally have an idea when setting them.</p> <ul> <li>AllowRelocationBlock<ul> <li>Allows macOS to boot via the relocation block.</li> <li>This quirk requires ProvideCustomSlide to be enabled, and usually AvoidRuntimeDefrag also needs to be enabled to work properly.</li> <li>Although this quirk is required when running older macOS versions on platforms with low memory.</li> <li>It is incompatible with some hardware and Mac OS 11. In this case, EnableSafeModeSlide should be considered.</li> </ul> </li> <li>AvoidRuntimeDefrag<ul> <li>Prevents boot.efi runtime memory defragmentation.</li> <li>When enabled, it will fix UEFI's runtime services, such as date, time, NVRAM, and power control.</li> <li>Most types of firmware, except Apple and VMware, require this quirk.</li> </ul> </li> <li>DevirtualiseMmio<ul> <li>Removes runtime attributes from certain MMIO regions.</li> <li>Removes the runtime bits of known memory regions to reduce the stolen memory footprint in the memory map.</li> <li>Generally, continuous memory injection is performed with slide = 1, so it is usually not checked unless your machine uses the KASLR method.</li> </ul> </li> <li>DisableSingleUser<ul> <li>Disables single - user mode.</li> <li>When enabled, it will prohibit the use of <code>Cmd + S</code> and <code>-s</code>, making the device closer to a T2 genuine Mac.</li> </ul> </li> <li>DisableVariableWrite<ul> <li>Prevents write access to macOS NVRAM.</li> <li>When enabled, it will prohibit NVRAM writes. It needs to be enabled on motherboards such as Z390/HM370 that do not have native macOS - supported NVRAM.</li> </ul> </li> <li>DiscardHibernateMap<ul> <li>When enabled, it will reuse the original hibernation memory map. Only some old hardware requires this.</li> </ul> </li> <li>EnableSafeModeSlide<ul> <li>When enabled, it will allow the use of the Slide value in safe mode.</li> <li>Whether to use continuous memory injection in safe mode (-x).</li> </ul> </li> <li>EnableWriteUnprotector<ul> <li>Allows write access to UEFI runtime service code.</li> <li>When enabled, it will delete the write protection in the CR0 register during execution.</li> </ul> </li> <li>ForceExitBootServices<ul> <li>Retry ExitBootServices with a new memory map on failure.</li> <li>When enabled, it will ensure that ExitBootServices can be called successfully even when the MemoryMap changes.</li> <li>Generally, very old motherboards may require this, while new motherboards usually do not.</li> </ul> </li> <li>ProtectMemoryRegions<ul> <li>Protects memory regions from being accessed incorrectly.</li> <li>Ensures that the CSM memory region is marked as ACPI NVS to prevent boot.efi or XNU from relocating or using them.</li> <li>AvoidRuntimeDefrag solves a similar problem. It is not checked by default.</li> <li>Some old motherboards may require it to be checked.</li> </ul> </li> <li>ProtectSecureBoot<ul> <li>Protects UEFI secure boot variables from being written.</li> <li>Prevents the operating system from writing to UEFI secure boot variables (<code>db</code>, <code>dbx</code>, <code>PX</code>, <code>KEK</code>).</li> <li>This option is mainly used to avoid NVRAM problems on Insyde motherboards and MacPro5,1.</li> </ul> </li> <li>ProtectUefiServices<ul> <li>Protects UEFI services from being overwritten by the firmware.</li> <li>Used to fix problems on Z390 with DevirtualiseMmio, ProtectCsmRegion, or ShrinkMemoryMap.</li> <li>Non - Z390 motherboards are usually not checked by default.</li> </ul> </li> <li>ProvideCustomSlide<ul> <li>Provides a custom KASLR slide when there is insufficient memory.</li> <li>This option forces macOS to use a random, non - conflicting slide value among the available slide values.</li> <li>If there is a conflict in the slide value, this option will force macOS to perform the following operation and use a pseudo - random value.</li> <li>Only needed when encountering <code>Only N/256 slide values are usable!</code></li> </ul> </li> <li>RebuildAppleMemoryMap<ul> <li>Rebuilds a macOS - compatible memory map.</li> <li>Generally, this option may be required when booting macOS 10.6 and earlier versions.</li> </ul> </li> <li>SetupVirtualMap<ul> <li>Sets virtual memory on SetVirtualAddresses.</li> <li>When enabled, it will fix the SetVirtualAddresses call to a virtual address.</li> <li>Establishes continuous memory for OC through virtual memory and maps it to scattered physical memory.</li> </ul> </li> <li>SignalAppleOS<ul> <li>Reports the macOS being loaded through the operating system information of any operating system.</li> <li>Reports the information of other operating systems to the macOS being loaded.</li> <li>Used to enable the iGPU for MacBook in Windows.</li> </ul> </li> <li>SyncRuntimePermissions<ul> <li>Updates the memory permissions of the runtime environment.</li> <li>Mainly used for early macOS or Linux/Windows.</li> </ul> </li> </ul>"},{"location":"OpenCore%20Configuration/UEFI/#intel-desktop-platform","title":"Intel Desktop Platform","text":""},{"location":"OpenCore%20Configuration/UEFI/#yonah-conroe-penryn","title":"Yonah, Conroe, Penryn","text":"<ul> <li>Traditional Boot Settings</li> </ul> Quirk Enabled Comment AvoidRuntimeDefrag No This quirk may need to be enabled for Big Sur. EnableSafeModeSlide No EnableWriteUnprotector No ProvideCustomSlide No RebuildAppleMemoryMap Yes This is required to boot OS X 10.4 to 10.6. SetupVirtualMap No <ul> <li>UEFI Boot Settings</li> </ul> Quirk Enabled Comment RebuildAppleMemoryMap Yes This is required to boot OS X 10.4 to 10.6."},{"location":"OpenCore%20Configuration/UEFI/#lynnfield-clarkdale","title":"Lynnfield, Clarkdale","text":"<ul> <li>Traditional Boot Settings</li> </ul> Quirk Enabled Comment AvoidRuntimeDefrag No This quirk may need to be enabled for Big Sur. EnableSafeModeSlide No EnableWriteUnprotector No ProvideCustomSlide No RebuildAppleMemoryMap Yes This is required to boot OS X 10.4 to 10.6. SetupVirtualMap No <ul> <li>UEFI Boot Settings</li> </ul> Quirk Enabled Comment RebuildAppleMemoryMap Yes This is required to boot OS X 10.4 to 10.6."},{"location":"OpenCore%20Configuration/UEFI/#sandy-bridge-ivy-bridge-haswell-broadwell-skylake-kaby-lake","title":"Sandy Bridge, Ivy Bridge, Haswell, Broadwell, Skylake, Kaby Lake","text":""},{"location":"OpenCore%20Configuration/UEFI/#propertree","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/UEFI/#coffee-lake-comet-lake","title":"Coffee Lake, Comet Lake","text":""},{"location":"OpenCore%20Configuration/UEFI/#propertree_1","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator_1","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools_1","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/UEFI/#intel-high-end-desktop-platform","title":"Intel High - end Desktop Platform","text":""},{"location":"OpenCore%20Configuration/UEFI/#nehalem-westmere","title":"Nehalem, Westmere","text":"<ul> <li>Traditional Boot Settings</li> </ul> Quirk Enabled Comment AvoidRuntimeDefrag No This quirk may need to be enabled for Big Sur. EnableSafeModeSlide No EnableWriteUnprotector No ProvideCustomSlide No RebuildAppleMemoryMap Yes This is required to boot OS X 10.4 to 10.6. SetupVirtualMap No <ul> <li>UEFI Boot Settings</li> </ul> Quirk Enabled Comment RebuildAppleMemoryMap Yes This is required to boot OS X 10.4 to 10.6."},{"location":"OpenCore%20Configuration/UEFI/#sandy-ivy-bridge-e-haswell-e-broadwell-e","title":"Sandy, Ivy Bridge - E, Haswell - E, Broadwell - E","text":""},{"location":"OpenCore%20Configuration/UEFI/#propertree_2","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator_2","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools_2","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/UEFI/#skylake-xw-cascade-lake-xw","title":"Skylake - X/W, Cascade Lake - X/W","text":""},{"location":"OpenCore%20Configuration/UEFI/#propertree_3","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator_3","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools_3","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/UEFI/#intel-laptop-platform","title":"Intel Laptop Platform","text":""},{"location":"OpenCore%20Configuration/UEFI/#clarksfield-arrandale","title":"Clarksfield, Arrandale","text":"<p>The iGPU of Arrandale is only officially supported before macOS 10.13, and most Clarksfield and Arrandale motherboards do not support UEFI.</p> <ul> <li>Traditional Boot Settings</li> </ul> Quirk Enabled Comment AvoidRuntimeDefrag No This quirk may need to be enabled for Big Sur. EnableSafeModeSlide No EnableWriteUnprotector No ProvideCustomSlide No RebuildAppleMemoryMap Yes This is required to boot OS X 10.4 to 10.6. SetupVirtualMap No <p> </p> <ul> <li>UEFI Boot Settings</li> </ul> Quirk Enabled Comment RebuildAppleMemoryMap Yes This is required to boot OS X 10.4 to 10.6. <p> </p>"},{"location":"OpenCore%20Configuration/UEFI/#sandy-bridge-ivy-bridge-haswell-broadwell-skylake-kaby-lake_1","title":"Sandy Bridge, Ivy Bridge, Haswell, Broadwell, Skylake, Kaby Lake","text":"<p>The iGPU of Sandy Bridge is only officially supported before macOS 10.13, and most Sandy motherboards do not support UEFI.</p>"},{"location":"OpenCore%20Configuration/UEFI/#propertree_4","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator_4","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools_4","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/UEFI/#coffee-lake-whiskey-lake","title":"Coffee Lake, Whiskey Lake","text":""},{"location":"OpenCore%20Configuration/UEFI/#propertree_5","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator_5","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools_5","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/UEFI/#coffee-lake-plus-comet-lake","title":"Coffee Lake Plus, Comet Lake","text":""},{"location":"OpenCore%20Configuration/UEFI/#propertree_6","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator_6","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools_6","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/UEFI/#icelake","title":"Icelake","text":""},{"location":"OpenCore%20Configuration/UEFI/#propertree_7","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator_7","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools_7","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/UEFI/#amd-desktop-platform","title":"AMD Desktop Platform","text":""},{"location":"OpenCore%20Configuration/UEFI/#bulldozer15h-jaguar16h","title":"Bulldozer(15h), Jaguar(16h)","text":""},{"location":"OpenCore%20Configuration/UEFI/#propertree_8","title":"ProperTree","text":""},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator_8","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools_8","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/UEFI/#ryzen-threadripper17h-and-19h","title":"Ryzen, Threadripper(17h and 19h)","text":""},{"location":"OpenCore%20Configuration/UEFI/#propertree_9","title":"ProperTree","text":"<ul> <li>DevirtualiseMmio </li> <li>Note that TRx40 requires this flag.</li> <li>SetupVirtualMap</li> <li>Note that B550, A520, and TRx40 boards should have this function disabled.</li> <li>Newer X570 BIOS versions also require this function to be disabled.</li> <li>X470 and B450 with BIOS updates in late 2020 also require this function to be disabled.</li> </ul>"},{"location":"OpenCore%20Configuration/UEFI/#opencore-configurator_9","title":"OpenCore Configurator","text":""},{"location":"OpenCore%20Configuration/UEFI/#ocauxiliarytools_9","title":"OCAuxiliaryTools","text":""},{"location":"OpenCore%20Configuration/config.list/","title":"config.list","text":"<p>The last section of config.list has a bit of miscellaneous knowledge, but success is just around the corner. Hold on a little longer.</p>"},{"location":"OpenCore%20Configuration/config.list/#embedded-apfs","title":"Embedded APFS","text":"<p>For installing Big Sur and above systems, the default settings are fine:</p> <p> </p> <p>If you need to install High Sierra (10.13) - Catalina (10.15) systems, you need to set both MinDate and MinVersion to <code>-1</code>.</p>"},{"location":"OpenCore%20Configuration/config.list/#appleinput","title":"AppleInput","text":"<p>This part doesn't need to be changed. Keep all the settings as default:</p> <p> </p>"},{"location":"OpenCore%20Configuration/config.list/#boot-audio","title":"Boot Audio","text":"<p>Basically, the default settings are also okay:</p> <p> </p> <p>I'm used to changing PlayChime to Disabled, that is, turning off the boot audio. This boot audio is the \"Duang\" sound when a genuine Mac boots. You also need to select the path of your audio device and install the corresponding Drivers for it to take effect. So it's better to just turn it off for simplicity.</p>"},{"location":"OpenCore%20Configuration/config.list/#uffi-drivers","title":"UFFI Drivers","text":"<p>This step is used to load the drivers we placed in previous sections:</p> <p> </p> <p>Remember to check the \"Connect Drivers\" below (the English name is: ConnectDrivers).</p>"},{"location":"OpenCore%20Configuration/config.list/#apple-shortcut-related","title":"Apple Shortcut - related","text":"<p>This part is usually fine with the default settings:</p> <p> </p>"},{"location":"OpenCore%20Configuration/config.list/#display-output","title":"Display Output","text":"<p>This part is usually fine with the default settings:</p> <p> </p>"},{"location":"OpenCore%20Configuration/config.list/#protocol-override","title":"Protocol Override","text":"<p>This part is usually fine with the default settings: </p> <p> </p>"},{"location":"OpenCore%20Configuration/config.list/#quirks","title":"Quirks","text":"<p>First, let's look at the quirks part. Some platforms require modifying the quirks information, but in most cases, the default settings are fine.</p> <ul> <li>ActivateHpetSupport<ul> <li>Older motherboards, such as those with the ICH6 chipset, do not have relevant HPET settings, so older motherboards need to enable this.</li> </ul> </li> <li>EnableVectorAcceleration<ul> <li>When U supports avx512 or avx, enable avx acceleration in the UEFI interface.</li> </ul> </li> <li>DisableSecurityPolicy<ul> <li>Turn off Secure Boot on the motherboard's UEFI.</li> </ul> </li> <li>ExitBootServicesDelay<ul> <li>Older motherboards need to be given time to exit (in microseconds).</li> <li>For newer motherboards, just fill in <code>0</code>.</li> <li>For older motherboards like Z87pro, fill in <code>3000000 - 5000000</code>.</li> </ul> </li> <li>ForceOcWriteFlash<ul> <li>Enable writing to flash memory for all OpenCore system variables. Generally, this is not checked.</li> </ul> </li> <li>ForgeUefiSupport<ul> <li>When checked, it allows running on hardware with old - version EFI 1.x firmware (such as MacPro5,1) for UEFI 2.x firmware.</li> </ul> </li> <li>IgnoreInvalidFlexRatio<ul> <li>If you haven't unlocked <code>MSR0x194</code> in the BIOS, that is, haven't unlocked CFG, you must check this.</li> </ul> </li> <li>ReleaseUsbOwnership<ul> <li>Most motherboards have the function of automatically releasing USB ownership.</li> <li>If the keyboard and mouse freeze during boot or the USB fails, you can consider checking this.</li> </ul> </li> <li>ReloadOptionRoms<ul> <li>Allow reloading NVIDIA GOP Option ROM on older Macs after the firmware version is upgraded. Generally, this is not checked.</li> </ul> </li> <li>RequestBootVarRouting<ul> <li>Enable the option of the boot disk.</li> </ul> </li> <li>TscSyncTimeout<ul> <li>Help some X99, X299 motherboards enable all - core synchronization, but it's not as professional as some Kexts.</li> <li>This option is intended to replace similar patches like <code>TSCAdjustReset.kext</code>. The recommended value is <code>500000</code>.</li> <li>But this doesn't work after waking up from sleep, so please fill in the default value <code>0</code> and use <code>TSCAdjustReset.kext</code> for all - core synchronization.</li> </ul> </li> <li>UnblockFsConnect<ul> <li>HP laptops may cause OC to be unable to scan the boot items.</li> <li>If your laptop can't recognize the boot items, you can try to enable this.</li> </ul> </li> </ul>"},{"location":"OpenCore%20Configuration/config.list/#intel-desktop-yonah-conroe-penryn-lynnfield-clarkdale-sandy-bridge-ivy-bridge-haswell-broadwell","title":"Intel Desktop - Yonah, Conroe, Penryn, Lynnfield, Clarkdale, Sandy Bridge, Ivy Bridge, Haswell, Broadwell","text":""},{"location":"OpenCore%20Configuration/config.list/#intel-desktop-skylake-kaby-lake-coffee-lake-comet-lake","title":"Intel Desktop - Skylake, Kaby Lake, Coffee Lake, Comet Lake","text":""},{"location":"OpenCore%20Configuration/config.list/#intel-high-end-desktop-nehalem-westmere-sandy-and-ivy-bridge-e-haswell-e-broadwell-e","title":"Intel High - end Desktop - Nehalem, Westmere, Sandy and Ivy Bridge - E, Haswell - E, Broadwell - E","text":""},{"location":"OpenCore%20Configuration/config.list/#intel-high-end-desktop-skylake-xw-cascade-lake-xw","title":"Intel High - end Desktop - Skylake - X/W, Cascade Lake - X/W","text":""},{"location":"OpenCore%20Configuration/config.list/#intel-laptop-clarksfield-arrandale-sandy-bridge-ivy-bridge-haswell-broadwell","title":"Intel Laptop - Clarksfield, Arrandale, Sandy Bridge, Ivy Bridge, Haswell, Broadwell","text":""},{"location":"OpenCore%20Configuration/config.list/#intel-laptop-skylake-kaby-lake-coffee-lake-whiskey-lake-coffee-lake-plus-comet-lake-icelake","title":"Intel Laptop - Skylake, Kaby Lake, Coffee Lake, Whiskey Lake, Coffee Lake Plus, Comet Lake, Icelake","text":""},{"location":"OpenCore%20Configuration/config.list/#amd-desktop-series","title":"AMD Desktop Series","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Abnormal%20Log/","title":"Abnormal Log","text":"<p>Troubleshooting suggestions: After turning on the <code>-v</code> mode, search on Google more often. If you ask others, their brains are not machines. For these repetitive and very similar error messages, except for a few typical ones, it's really hard to directly identify the rest.</p> <p>Also, if you really have to consult others, at least you should first configure an EFI by following the tutorial. Otherwise, if you ask others why there are errors in an EFI you got from somewhere else, it will be very annoying. Because no one knows where you got the EFI from. If the EFI you got is a mess, going to others for troubleshooting will only make both sides more frustrated.</p> <p>Materials that may be useful for your troubleshooting:</p> <ul> <li>\u3010Continuously updated\u3011OpenCore boot - v various stuck situations and a quick - reference table of common problems and solutions for OC boot</li> <li>OpenCore configuration errors, faults and solutions (updated on May 2nd)</li> </ul> <p>If the troubleshooting doesn't help, and there are still errors when referring to my tutorial, you can consider referring to other people's tutorials or the official OC tutorial:</p> <ul> <li>Hackintosh Quick Installation Manual</li> </ul>"},{"location":"OpenCore%20Error%20Troubleshooting/Abnormal%20Log/#appleusbhostportcreatedevice-failed-to-create-device","title":"AppleUSBHostPort::createDevice: failed to create device","text":"<p> This is caused by the conflict between XhciPortLimit and high - version macOS 11.3 +. You can first refer to the USB customization section to customize your USB ports, and then disable <code>XhciPortLimit</code> under Kernel -&gt; Quirks.</p>"},{"location":"OpenCore%20Error%20Troubleshooting/Abnormal%20Log/#acpi-error_sb_pci0xhc_rhubhs11-namespace-lookup-failure","title":"ACPI Error:[\\_SB_.PCI0.XHC_.RHUB.HS11] Namespace lookup failure","text":"<p>Although there are a large number of errors below, the most critical part is actually the part I circled:</p> <p> </p> <p>Just add a SSDT - RHUB.aml to solve the problem. To fix the problem of some 400 - series motherboards, you need to turn off the RHUB device and force macOS to manually rebuild the ports.</p>"},{"location":"OpenCore%20Error%20Troubleshooting/Abnormal%20Log/#appleusbhostportenumeratdevicecomplete_block_invoke","title":"AppleUSBHostPort::enumeratDeviceComplete_block_invoke","text":"<p>This situation indicates a problem with the USB. If changing to other ports doesn't solve the problem, try referring to the USB customization tutorial to customize in advance.</p>"},{"location":"OpenCore%20Error%20Troubleshooting/Abnormal%20Log/#acpi-warning-unsupported-module-level","title":"ACPI Warning: Unsupported module - level","text":"<p>It seems to be a hard disk problem with apfs_module_start:2568. Actually, the key to this error message is the ACPI error above. I encountered this on a Colorful motherboard. This is because there is a problem with the SSDT. Just find a way to troubleshoot the SSDT.</p>"},{"location":"OpenCore%20Error%20Troubleshooting/Abnormal%20Log/#comapplexpclaunchd","title":"com.apple.xpc.launchd","text":"<p>This often appears on some AMD or Intel non - official version CPUs (this is really a pitfall). The solution is to install by faking the CPU. That's it!</p>"},{"location":"OpenCore%20Error%20Troubleshooting/Abnormal%20Log/#appleusbxhcicreatports-unsupported-speed-mantissa-1248-exponent-2","title":"AppleUSBXHCI::creatPorts: unsupported speed mantissa 1248 exponent 2","text":"<p>As the name implies, this gets the USB stuck. I encountered this on a Dell laptop. It seems that all the USB controllers are 3.0, but this will happen when using a USB 2.0 flash drive for installation:</p> <p> </p> <p>Buy a USB 3.0 flash drive, and then refer to the USB customization tutorial.</p>"},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/","title":"Normal Log","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#recovery","title":"Recovery","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#eb","title":"EB","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#initialization","title":"Initialization","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#loading-acpi","title":"Loading ACPI","text":"<p>Then load VirtualSMC and start running the CPU - related part of ACPI:</p> <p> </p>"},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#gpu-sensor-and-nvme","title":"GPU Sensor and NVME","text":"<p>AMD GPU sensor and NVME related:</p> <p> </p> <p>Then it can be seen that the NVME controller is successfully loaded:</p> <p> </p>"},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#nvram-and-security-policy","title":"NVRAM and Security Policy","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#network-and-hard-disk-related","title":"Network and Hard Disk - related","text":"<p>The Ethernet card driver is loaded, and the disk utility is initialized, involving the hard disk part:</p> <p> </p>"},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#xcmp-frequency-conversion-boot-option-loading","title":"XCMP Frequency Conversion, Boot Option Loading","text":"<p>XCMP is related to XNU power management. In addition, the boot - args boot option is also loaded:</p> <p> </p>"},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#wireless-network-card-related","title":"Wireless Network Card - related","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#loading-the-settings-of-the-base-system","title":"Loading the Settings of the Base System","text":"<p>Including: system language, files of the base system, etc.</p> <p></p>"},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#base-system-loading","title":"Base System Loading","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#usb-controller","title":"USB Controller","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#base-system-loading_1","title":"Base System Loading","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#completion-of-base-loading","title":"Completion of Base Loading","text":"<p>Generally, the integrated graphics are loaded here, and then USB and these also start to be completed:</p> <p> </p>"},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#normal-boot-into-the-system","title":"Normal Boot into the System","text":"<p>The normal loading process is similar to the above Recovery process, and there are not too many differences. I won't elaborate on it here. Only the differences will be listed.</p>"},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#base-system-loading_2","title":"Base System Loading","text":"<p>The difference is that after the base system is loaded, the normal system will detect the USB controller here:</p> <p> </p>"},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#completion-of-base-loading_1","title":"Completion of Base Loading","text":""},{"location":"OpenCore%20Error%20Troubleshooting/Normal%20Log/#sign-of-success","title":"Sign of Success","text":"<p>When the following marked situation appears, it is mostly going to be successful:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/","title":"Genuine Mac","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#preface","title":"Preface","text":"<p>To make a comparison with Hackintosh, screenshots of various software on a 2019 16 - inch Macbook Pro (genuine Mac) are attached below. This also provides a reference for those who don't have a genuine Mac.</p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#overview","title":"Overview","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#system-information","title":"System Information","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#hardware","title":"Hardware","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#nvme","title":"NVME","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#discrete-graphics-card","title":"Discrete Graphics Card","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#integrated-graphics","title":"Integrated Graphics","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#camera","title":"Camera","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#battery","title":"Battery","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#bluetooth","title":"Bluetooth","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#wifi","title":"WiFi","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#thunderbolt","title":"Thunderbolt","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#audio-output","title":"Audio Output","text":"<p>When headphones are inserted, the output device will be switched automatically:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#audio-input","title":"Audio Input","text":"<p>The input level has a response, and sound can be detected:</p> <p> </p> <p>So Siri can work normally at this time:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#battery_1","title":"Battery","text":"<p>There are many more options for this on a genuine Mac:</p> <p> </p> <p> </p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#touch-id","title":"Touch ID","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#keyboard","title":"Keyboard","text":"<p>There are also more options for the keyboard on a genuine Mac:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#messages","title":"Messages","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#airdrop","title":"AirDrop","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#intel-power-gadget","title":"Intel Power Gadget","text":"<p>Do a stress test:</p> <p> </p> <p>It can be seen that the heat dissipation of the genuine Mac is really a problem. A CPU temperature of 100\u2103 is normal.</p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#hackintool","title":"Hackintool","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#system","title":"System","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#miscellaneous","title":"Miscellaneous","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#usb","title":"USB","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#pcie","title":"PCIe","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#power","title":"Power","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#video-proc","title":"Video Proc","text":"<p>Believe it or not, when using this software on a genuine Mac, it prompts that HEVC decoding is not supported??</p> <p></p> <p>I opened a thread to discuss this on Yuanjing. But it seems that no one hit the nail on the head. The original post address is:</p> <p>Oh my god. Genuine Mac doesn't support dual - hardware decoding either?</p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#touchpad","title":"Touchpad","text":"<p>The touchpad of MBP supports up to 10 - point touch, and it can be seen from FingerMgmt that it supports pressure sensing:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#power-management","title":"Power Management","text":"<p>IOService shows that X86PlatformPlugin is loaded:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#camera_1","title":"Camera","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#facetime","title":"Facetime","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#find-my","title":"Find My","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#icloud","title":"iCloud","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#support","title":"Support","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#geekbench","title":"Geekbench","text":"<p>The single - core score of the CPU (i7 - 9750HQ) is 1044 points, and the multi - core score is 5467 points.</p> <p>The Metal score of UHD 630 is 4784 points, and the OpenCL score is 5254 points.</p> <p>The Metal score of AMD RX 5300M is 26933 points, and the OpenCL score is 25458 points.</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#wifi_1","title":"WiFi","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#control-center","title":"Control Center","text":""},{"location":"Perfect%20Hackintosh/Genuine%20Mac/#sensors","title":"Sensors","text":"<p>Compared with Hackintosh, the sensors of the genuine Mac are more complete. Hackintosh can't really compare:</p> <p> </p> <p>Below is a heat dissipation screenshot of Sensi:</p> <p> </p> <p>Finally, a screenshot of iStat Menus is added. It's really complete. Hackintosh is trembling:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Hackintosh/","title":"Hackintosh","text":""},{"location":"Perfect%20Hackintosh/Hackintosh/#preface","title":"Preface","text":"<p>Many friends, after they have tinkered with Hackintosh on their own or paid someone to help install Hackintosh, are not clear about the perfection level of their current Hackintosh. So I have opened this chapter separately to share what I consider to be the perfect Hackintosh.</p> <p>In addition, if you want to know the performance of various parameters under genuine Mac, you can refer to this chapter Genuine Mac</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#general-part","title":"General Part","text":"<p>Both laptops and desktops can refer to this part. Why are laptops and desktops separated? Because it's easy for desktops to be perfect, but laptops have a bunch of various problems. So the laptop part will be listed separately below.</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#intel-power-gadget","title":"Intel Power Gadget","text":"<p>It's software produced by Intel officially and is often used to view relevant parameters such as CPU frequency, power consumption, and stability.</p> <p>The official download address is: https://www.intel.com/content/www/us/en/developer/articles/tool/power - gadget.html</p> <p>First, look at a screenshot of the software running with the CPU normally driven:</p> <p></p> <p>The functions of each module from top to bottom are explained as follows:</p> <ul> <li>Power</li> <li>Displays the real - time power consumption of the CPU.</li> <li>Generally, this part is basically normal for everyone, except for a few cases of improper configuration, which may cause the CPU to be in an overclocked state all the time.</li> <li>Frequency</li> <li>Displays the real - time frequencies of the CPU and integrated graphics.</li> <li>Mainly pay attention to whether the high and low frequencies are normal, not in an overclocked state all the time, or never reaching the turbo boost frequency.</li> <li>CORE MAX: The maximum frequency. Pay attention to whether this reaches the turbo boost standard of your CPU.</li> <li>CORE AVG: The average frequency.</li> <li>CORE MIN: The minimum frequency. Generally, the minimum frequency should be lower than 1.0 to meet expectations. Laptops should pay particular attention to this point because a low frequency helps with battery life.</li> <li>CORE REQ: The CPU frequency that the system predicts needs to be scheduled. Ideally, the pink - red line of REQ should match the curve trend of the blue line of AVG.</li> <li>GFX AVG: The actual frequency reached by the integrated graphics. If your integrated graphics are not driven, you won't see this option.</li> <li>GFX REQ: The integrated graphics frequency that the system predicts needs to be called. If your integrated graphics are not driven, you won't see this option.</li> </ul> <p>It should be added that the frequencies of GFX AVG and GFX REQ are meaningless. Different versions of Intel Power Gadget show greatly varying frequencies, so there is no rule at all. The actual perfect effect depends on your own experience.</p> <p>Also, a reminder that using software like CPU - S to view variable frequency gears has no reference value. I have compared Hackintosh with genuine Mac before. The number of variable frequency gears of genuine Mac is actually less than that of Hackintosh. So I think that more variable frequency gears are not necessarily better. The highest level of Hackintosh should be infinitely close to genuine Mac.</p> <ul> <li>Temperature</li> <li>The real - time temperature of the CPU.</li> <li>If the desktop has good heat dissipation, the maximum daily use temperature will basically not exceed 50\u2103.</li> <li>For laptops, the heat generation of Intel CPUs has always been a problem. In my genuine Mac, the temperature often reaches 95\u2103 +, and I'm already used to it.</li> <li>Utilization</li> <li>The real - time usage rate of the CPU.</li> <li>This is similar to the result viewed in the task manager under Windows, so it will not be elaborated here.</li> </ul>"},{"location":"Perfect%20Hackintosh/Hackintosh/#stress-test","title":"Stress Test","text":"<p>Intel Power Gadget has a built - in stress test, which can easily test the turbo boost situations of the CPU and integrated graphics:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#negative-example","title":"Negative Example","text":"<p>After talking so much, let's look at a screenshot with obvious problems in this part:</p> <p></p> <p>There are several problems in the figure, and we will list them one by one below:</p> <ol> <li>When testing the integrated graphics, the average frequency CORE AVG of the CPU cannot go up and fails to reach the turbo boost standard. It can be clearly seen that the CPU frequency has dropped.</li> <li>CORE REQ actually predicts a frequency of 3.47Ghz, but only reaches a frequency of 0.40Ghz.</li> </ol>"},{"location":"Perfect%20Hackintosh/Hackintosh/#hackintool","title":"Hackintool","text":"<p>It can be said to be an essential software for Hackintosh. Download link: https://github.com/headkaze/Hackintool/releases</p> <p>Hackintool can show the perfection situation of many drivers. Let's look at them one by one. First, look at the system part, and focus on what I have marked:</p> <p></p> <ul> <li>VDA decoder, this is relatively critical. If it is not perfectly supported, your hardware decoding must be abnormal.</li> <li>If it is a desktop, pay attention to whether the information of the integrated graphics can be seen here.</li> <li>Also, pay attention to whether the graphics card supports Metal, which is a very important graphics engine under macOS.</li> <li>Finally, it's best that there are no??? unrecognizable information in the system interface of Hackintool.</li> </ul>"},{"location":"Perfect%20Hackintosh/Hackintosh/#miscellaneous","title":"Miscellaneous","text":"<ul> <li>First, pay attention to whether all network cards are built - in.</li> <li>Whether the Bluetooth firmware can be displayed normally. If not, please try to re - USB customization</li> <li>The graphics card model is recognized normally. The reason there is no integrated graphics here is that I used a headless ID, only for calculation. It is also recommended that everyone use it this way.</li> <li>Besides the built - in sound card, HDMI audio - related information should also be seen in the audio device.</li> <li>There is no problem with the hard disk. Basically, everyone's is normal.</li> </ul>"},{"location":"Perfect%20Hackintosh/Hackintosh/#usb","title":"USB","text":"<p>There are no extra USB ports, and the USB types are correctly recognized, and the speeds are all normal. At the same time, remember to build - in internal devices such as network cards as Internal:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#videoproc","title":"VideoProc","text":"<p>The statuses of H264 and HEVC should be available for normal operation:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#geekbench5","title":"Geekbench5","text":"<p>Geekbench5 single - core score: 1302, multi - core score: 8393 points</p> <p></p> <p>This score is slightly lower than that when I ran it on macOS 11.4 Big Sur. At that time, the Geekbench5 single - core score was 1314, and the multi - core score was 8687 points. But this is not a big problem. Refer to the scores of previous Macs. As long as the CPU performs at its due level, it's fine: Geekbench5 scores of previous Macs</p> <p>Sapphire 6600XT Platinum Edition, unlock the power consumption limit, and do a little overclocking. Metal score: 98462 points, OpenCL score: 72542 points:</p> <p></p> <p></p> <p>The GPU score of Geekbench5 has always been unstable with relatively large errors. Everyone doesn't need to pay too much attention to the GPU score. By the way, for AMD graphics card optimization, you can refer to this chapter: AMD free - drive discrete graphics card optimization</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#system-information","title":"System Information","text":""},{"location":"Perfect%20Hackintosh/Hackintosh/#nvmexpress","title":"NVMExpress","text":"<p>WD Western Digital series works perfectly under TRIM. TRIM is a technology unique to Apple and can increase the lifespan of SSDs. Some hard disk and TRIM compatibility programs are also listed in this issue:</p> <p></p> <p>If your SSD is not on the above list, but you're not sure whether it works well under TRIM, how can you judge? Here are some characteristics of poor TRIM operation:</p> <ol> <li>Programs open slowly, and there are always long lags.</li> <li>The mouse is prone to show the small rainbow circle.</li> <li>In some cases, it even freezes frequently.</li> </ol> <p>If your boot is fine, then to a large extent, it's the compatibility issue between your SSD and TRIM. At this time, just set \u300cSetApfsTrimTimout\u300d in \u300cKernel kernel settings\u300d to 999 to turn off TRIM:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#ethernet","title":"Ethernet","text":"<p>Mainly pay attention to whether the maximum connection speed reaches the specification marked on your network card hardware:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#graphics-card","title":"Graphics Card","text":"<p>To be supplemented, no picture is attached for the moment.</p> <p>For desktops, the most perfect graphical situation is to see one graphics card. This is the default policy configuration of iMac. Regarding some people can see both integrated graphics and discrete graphics, in fact, this is not a standard configuration. Friends interested in this configuration can refer to: Desktop dual - graphics card display</p> <p>The second controversial point is that there is no EFI driver version displayed for the graphics card. Genuine Mac basically shows this information.</p> <p>In the early days of 10.15, injecting EFI driver version and other information of genuine Mac cards for third - party graphics cards did help improve performance. But since Big Sur 11, this method is no longer effective. So we don't need to pay too much attention to whether the EFI driver version is displayed.</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#bluetooth","title":"Bluetooth","text":"<p>There's not much to say about this part. If the Bluetooth is driven, relevant Bluetooth information can be seen here. If your Bluetooth doesn't work properly, it's very likely related to USB customization. You can refer to: USB customization. If it's still a problem after customization, it may also be related to macOS 12 Bluetooth.</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#wifi","title":"WiFi","text":"<p>Mainly pay attention to whether AirDrop is supported. There's nothing else to pay special attention to:</p> <p></p> <p>There may also be disputes online about country and region codes. In fact, there is no accurate and authoritative conclusion. I think that as long as it's used normally, the region code doesn't matter. Of course, if you don't like it and have to change it, Broadcom network cards do support modification. The following is the official document: Add the following parameters to the boot option: - <code>brcmfx - country = XX</code> to change the country code to XX (US, CN, #a,...). It can also be injected through DSDT or Properties \u2192 DeviceProperties in the boot loader.</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#sound","title":"Sound","text":"<p>Support built - in speakers and HDMI or DP sound output:</p> <p></p> <p>When headphones are plugged in, it should also support automatic switching to the headphone device.</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#microphone","title":"Microphone","text":"<p>The system - built - in microphone can be recognized normally, and the Siri voice assistant can communicate normally:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#hidpi","title":"HiDPi","text":"<p>macOS without HiDPi is soulless. 4K monitors generally have HiDPi enabled by default, and for monitors with lower resolutions, HiDPi needs to be enabled manually. For details of enabling, you can refer to: Enabling HiDPi</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#sensor-related","title":"Sensor - related","text":"<p>Tencent Lemon Cleaner can be used to easily view the CPU temperature and rotation speed:</p> <p></p> <p>For laptops, it's easy for the rotation speed to be unrecognizable. This is really a hard problem for some laptops, and there's no solution. So I just leave it to chance.</p> <p>iStat Menus can show more detailed temperature information:</p> <p></p> <p>I don't know why iStat Menus didn't recognize the fan rotation speed here either. But it's not a big problem. One thing to pay attention to here is that the GPU temperature of AMD is also recognized. For those who can't recognize the temperature of the discrete graphics card, you can refer to: AMD free - drive discrete graphics card optimization</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#appstore","title":"AppStore","text":"<p>The AppStore should be able to download apps normally, and the download and update should be smooth:</p> <p></p> <p>The reason for mentioning this here is that in the early days, many people using Clover boot had non - standard configurations, which might lead to a poor AppStore experience. So switch to OC as soon as possible and configure it simply following this tutorial.</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#sensi","title":"Sensi","text":"<p>Sensi is very convenient for testing the read - write speed of the hard disk, and it also has a nice appearance:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#blackmagic-disk-speed-test","title":"Blackmagic Disk Speed Test","text":"<p>This software can be directly downloaded from the AppStore and can be used to test whether the read - write speed of your SSD is normal:</p> <p></p> <p>If the read - write speed of your SSD is significantly lower than the nominal specification, it's very likely that your SSD and TRIM have poor support. For specific solutions, you can refer to: General Part - System Information - NVMExpress</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#blackmagic-raw-speed-test","title":"Blackmagic RAW Speed Test","text":"<p>This software can be directly downloaded from the AppStore and is used to test the performance of the CPU and graphics card. The following figure shows the test results of i7 - 10700 and RX 6600XT:</p> <p></p> <p>It can be seen that the shortcoming is my i7 - 10700 CPU, of course, compared with the graphics card. But actually, this CPU is more than enough for my daily productivity.</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#messages","title":"Messages","text":"<p>If you also have an iOS device, text messages on your macOS should be able to be sent normally:</p> <p> </p> <p>Similarly, they should also be able to be received normally:</p> <p> </p> <p>If you have an iOS device and the network card is confirmed to be qualified, but you still can't send or receive messages, just configure as follows. First, configure the Messages on macOS as follows:</p> <p> </p> <p>Then configure on the iOS side as follows:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#icloud","title":"iCloud","text":"<p>The peripheral functions related to iCloud should also be able to be used normally:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#airdrop","title":"AirDrop","text":"<p>Files can be directly transferred among iOS, iPadOS, and macOS devices. Currently, Broadcom's series of wireless network cards that don't require drivers can achieve this:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#handoff","title":"Handoff","text":"<p>On macOS, system - level applications of iOS and iPadOS can be directly opened at the lower right corner of the Dock:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#cross-device-copy-and-paste","title":"Cross - device Copy - and - Paste","text":"<p>Actually, the Universal Control feature after macOS 12.3 is more powerful. Before that, only simple text and the like could be pasted across devices through the clipboard:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#sidecar","title":"Sidecar","text":"<p>This is related to the wireless network card. If the wireless network card doesn't require a driver, Sidecar can theoretically work in wireless mode. Otherwise, it can only work normally in wired mode. The function of Sidecar is to use the iPad as a display for macOS:</p> <p> </p> <p>This way, the idle iPad can be reused. It's nice to use it to run QQ and WeChat.</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#universal-control","title":"Universal Control","text":"<p>macOS has officially supported the Universal Control feature since 12.3. This feature is more practical than Sidecar. You can directly use the keyboard and mouse of macOS to operate your iPad. Just move the mouse over:</p> <p> </p> <p>The difference between this and Sidecar in the settings is that in Universal Control, the iPad and the display are not adjacent, while in Sidecar, they are attached together. This can also be directly connected in the Control Center:</p> <p> </p> <p>It should be mentioned here that the brightness slider of my display can't be used because it's a third - party display. In theory, it can be adjusted when using an Apple - made display. However, don't be discouraged if you have a third - party display. Using MonitorControl (an open - source software) can also achieve brightness and volume adjustment of the third - party display, which is very convenient:</p> <p> </p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#laptop-special-topic","title":"Laptop Special Topic","text":"<p>For laptops, many can refer to the general part above. Laptops mainly focus on sleep, battery, touchpad, shortcut keys, and brightness adjustment.</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#touchpad","title":"Touchpad","text":"<p>The touchpad should support multi - finger gestures, and the experience should be smooth:</p> <p></p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#advanced-touchpad","title":"Advanced Touchpad","text":"<p>The touchpad should work in the most efficient GPIO mode, rather than the common polling mode:</p> <p> </p> <p>The existence of gpioPin and gpioIRQ in the above figure is a sign of the GPIO interrupt mode. You can also judge by looking at the dmesg log. For advanced touchpad, you can refer to this article of mine: Touchpad Interrupt Example </p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#brightness-adjustment","title":"Brightness Adjustment","text":"<p>If your laptop doesn't have the SSDT - PNLF.aml SSDT, please install it and then check again.</p> <p>If it still doesn't work, try adding the following boot parameters:</p> <ul> <li><code>-igfxblr</code> boot parameter (or <code>enable - backlight - registers - fix</code> property) to fix the backlight registers on KBL, CFL, and ICL platforms.</li> </ul> <p>Other boot parameters that may be helpful to you:</p> <ul> <li><code>-igfxbls</code> boot parameter (or <code>enable - backlight - smoother</code> property) to make the brightness transition smoother on IVB + platforms.</li> </ul>"},{"location":"Perfect%20Hackintosh/Hackintosh/#shortcut-keys","title":"Shortcut Keys","text":"<p>All shortcut keys of the laptop should work normally:</p> <p> </p> <p> </p> <p>Generally, the BrightnessKeys.kext laptop brightness shortcut key driver is sufficient. Or, if you have the technical ability, writing your own SSDT customization is also theoretically okay.</p>"},{"location":"Perfect%20Hackintosh/Hackintosh/#battery","title":"Battery","text":"<p>First, the charging state and non - charging state should be able to switch smoothly, and there should be no indication that the battery is unhealthy:</p> <p> </p> <p>The power usage history should also be normal:</p> <p> </p> <p>There are also 7 options in the battery options:</p> <p> </p> <p>The health and temperature should also be normal when using sensi:</p> <p> </p> <p>However, the information such as the production date here is not complete. But it doesn't mean it can't be used, right?</p>"},{"location":"Preparation/APCI%26SSDT/","title":"APCI&SSDT","text":""},{"location":"Preparation/APCI%26SSDT/#basic-concepts","title":"Basic Concepts","text":""},{"location":"Preparation/APCI%26SSDT/#apci","title":"APCI","text":"<p>Advanced Configuration and Power Interface (ACPI) was jointly proposed and developed by Intel, Microsoft, and Toshiba in 1997. It is an operating system power management and hardware configuration interface. ACPI defines the hardware abstraction interface between the system firmware (BIOS or UEFI) and the operating system.</p> <p>It helps the operating system to reasonably control and allocate power to computer hardware devices. With ACPI, the operating system can turn off different hardware devices as needed according to the actual situation of the devices.</p> <p>The main functions it covers include:</p> <ol> <li>System power management</li> <li>Device power management</li> <li>Processor power management</li> <li>Device and processor performance management</li> <li>Configuration / Plug and Play</li> <li>System Events</li> <li>Battery management</li> <li>Thermal management</li> <li>Embedded Controller</li> <li>SMBus Controller</li> </ol> <p>In the computer application platform, ACPI is becoming more and more important. ACPI consists of many tables, including: RSDP, SDTH, RSDT, FADT, FACS, DSDT, SSDT, MADT, SBST, XSDT, ECDT, SLIT, SRAT. Among them, DSDT is an important description table.</p>"},{"location":"Preparation/APCI%26SSDT/#dsdt-ssdt","title":"DSDT, SSDT","text":"<p>As mentioned above, DSDT and SSDT are part of the ACPI specification and outline hardware devices such as USB controllers, CPU threads, embedded controllers, system clocks, etc.</p> <p>DSDT (Differentiated System Description Table) can be regarded as the main body containing most of the information.</p> <p>SSDT (Secondary System Description Table) conveys less information.</p> <p>DSDT can be regarded as a building blueprint, and SSDT is a sticky note that outlines the additional details of the project.</p> <p>Under Hackintosh, DSDT is usually extracted first, and then the corresponding SSDT is written according to the content of DSDT to correct DSDT. Of course, it is also possible to directly modify the extracted DSDT without using SSDT. However, DSDT troubleshooting and code adjustment are required, and the workload is relatively large. It is not as simple and convenient as using SSDT for correction.</p>"},{"location":"Preparation/APCI%26SSDT/#why-why-do-we-need-to-know-these","title":"Why? Why Do We Need to Know These?","text":"<p>macOS may be very picky about the devices existing in DSDT, so we need to correct it. The main devices that need to be corrected for macOS to work properly are:</p> <ul> <li>EC</li> <li>Embedded Controller.</li> <li>Non - Apple models all expose an EC in their DSDT, but it is usually incompatible with macOS and may cause a panic. Therefore, it needs to be hidden from macOS.</li> <li> <p>For laptops, the actual embedded controller still needs to be enabled for the battery and hotkeys to work. Renaming the EC will also cause problems in Windows. Therefore, it is best to create a fake EC without disabling the actual embedded controller.</p> </li> <li> <p>Plugin type</p> </li> <li>Plugin type.</li> <li> <p>Allows the use of XCPM to provide local CPU power management on Intel Haswell and newer architecture CPUs. This is not suitable for AMD.</p> </li> <li> <p>AWAC system clock</p> </li> <li>AWAC system clock.</li> <li> <p>Because macOS cannot communicate with the AWAC clock, this requires us to either force the use of the traditional RTC clock or create a fake clock for macOS to use when it is unavailable.</p> </li> <li> <p>NVRAM SSDT</p> </li> <li> <p>True 300 - series motherboards (except Z370) do not declare the FW chip as MMIO in ACPI, so the kernel will ignore the MMIO region declared by the UEFI memory map. This SSDT brings back NVRAM support.</p> </li> <li> <p>Backlight SSDT</p> </li> <li> <p>Used to fix backlight control support on laptops.</p> </li> <li> <p>GPIO SSDT</p> </li> <li> <p>Used to allow VoodooI2C connection, only applicable to laptops.</p> </li> <li> <p>XOSI SSDT</p> </li> <li> <p>Used to reroute OSI calls to this SSDT, mainly to trick our hardware into thinking that it is booting Windows so that we can get better trackpad support.</p> </li> <li> <p>IRQ SSDT and ACPI patches</p> </li> <li>Used to fix IRQ conflicts in DSDT, mainly for laptops. SSDT Time exclusive.</li> <li>Note that Skylake and newer CPUs rarely have IRQ conflicts. This is mainly used on Broadwell and older systems.</li> </ul>"},{"location":"Preparation/APCI%26SSDT/#common-acpi-combinations","title":"Common ACPI Combinations","text":"<p>ACPI can be manually compiled or downloaded from others. Although manual compilation is the most perfect, it requires a certain learning threshold. So novice users are recommended to download the compiled SSDT files.</p> <p>You can download your own ACPI files according to your computer model by referring to the following content.</p> <p>If you can't download, it's because Github is blocked in China. Here are some solutions.</p> <ol> <li>Use a telecom network to access and download.</li> <li>Use a proxy to download.</li> <li>Use a Github mirror site to download.</li> <li>Use the files in the EFI folder configured by others directly.</li> <li>There are always more solutions than difficulties. Don't give up when encountering a little setback.</li> </ol>"},{"location":"Preparation/APCI%26SSDT/#intel-desktop","title":"Intel Desktop","text":"<p>Penryn, Younah, Conroe</p> <ul> <li> SSDT - EC - DESKTOP.aml </li> </ul> <p>Lynnfield, Clarkdale</p> <ul> <li> SSDT - EC - DESKTOP.aml </li> </ul> <p>SandyBridge, Ivy Bridge</p> <ul> <li> CPU - PM.aml<ul> <li>For power management use.</li> <li>It needs to be generated by your own script. It's relatively old. You can refer to Sandy and Ivy Bridge Power Management.</li> <li>After generation, it needs to be combined with ACPI patches: Delete CpuPm, Delete Cpu0Ist.</li> </ul> </li> <li> SSDT - EC - DESKTOP.aml </li> <li> SSDT - IMEI.aml <ul> <li>Fix the problem of mixing Ivy Bridge CPU with 6 - series motherboards.</li> <li>Fix the problem of mixing Sandy Bridge CPU with 7 - series motherboards.</li> </ul> </li> </ul> <p>Hasewell, Broadwell</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - DESKTOP.aml </li> </ul> <p>Skylake</p> <ul> <li> SSDT - PLUG - DRTNIA.aml</li> <li> SSDT - EC - USBX - DESKTOP.aml </li> </ul> <p>Kaby Lake</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - USBX - DESKTOP.aml </li> </ul> <p>Coffee Lake</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - USBX - DESKTOP.aml </li> <li> SSDT - AWAC.aml <ul> <li>Fix the system clock on newer hardware.</li> <li>Support the following motherboards:<ul> <li>B360, B365, H310, H370</li> <li>Z370 (Gigabyte and AsRock motherboards with newer BIOS versions)</li> <li>Z390</li> <li>B460, Z490</li> <li>400 - series (Comet Lake) </li> <li>495 - series (Ice lake)</li> </ul> </li> </ul> </li> </ul> <p>Comet Lake</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - USBX - DESKTOP.aml </li> <li> SSDT - AWAC.aml <ul> <li>Fix the system clock on newer hardware.</li> <li>Support the following motherboards:<ul> <li>B360, B365, H310, H370</li> <li>Z370 (Gigabyte and AsRock motherboards with newer BIOS versions)</li> <li>Z390</li> <li>B460, Z490</li> <li>400 - series (Comet Lake) </li> <li>495 - series (Ice lake)</li> </ul> </li> </ul> </li> <li> SSDT - RHUB.aml <ul> <li>Fix the problem of some OEM motherboards. It is required to close the RHUB device and force macOS to manually rebuild the ports.</li> <li>ASUS Z490 needs this SSDT.</li> <li>MSI motherboards need to be tested.</li> <li>Gigabyte and ASRock motherboards work well and don't need this SSDT.</li> </ul> </li> </ul> <p>Rocket Lake</p> <p>It can imitate that of the 10 - generation CPU of Comet Lake.</p> <p>Alder Lake</p> <ul> <li> SSDT - PLUG - ALT.aml<ul> <li>12 - generation CPU big - small core scheduling, unique SSDT.</li> </ul> </li> <li>Others can imitate that of the 10 - generation CPU of Comet Lake.</li> </ul>"},{"location":"Preparation/APCI%26SSDT/#intel-laptop","title":"Intel Laptop","text":"<p>Clarksfield, Arrandale</p> <ul> <li> SSDT - EC - LAPTOP.aml </li> <li> SSDT - XOSI.aml <ul> <li>Trackpad connection repair, working in polling mode by default.</li> <li>It needs to be used with the ACPI patch: Change _OSI to XOSI.</li> <li>Devices without a trackpad such as NUC don't need this.</li> </ul> </li> <li> SSDT - PNLF.aml<ul> <li>Fix laptop brightness control. NUC doesn't need this.</li> </ul> </li> </ul> <p>Sany Bridge, Ivy Bridge</p> <ul> <li> CPU - PM.aml<ul> <li>For power management use.</li> <li>It needs to be generated by your own script. It's relatively old. You can refer to Sandy and Ivy Bridge Power Management.</li> <li>After generation, it needs to be combined with ACPI patches: Delete CpuPm, Delete Cpu0Ist.</li> </ul> </li> <li> SSDT - EC - LAPTOP.aml </li> <li> SSDT - XOSI.aml <ul> <li>Trackpad connection repair, working in polling mode by default.</li> <li>It needs to be used with the ACPI patch: Change _OSI to XOSI.</li> <li>Devices without a trackpad such as NUC don't need this.</li> </ul> </li> <li> SSDT - PNLF.aml<ul> <li>Fix laptop brightness control. NUC doesn't need this.</li> </ul> </li> <li> SSDT - IMEI.aml <ul> <li>Fix the problem of mixing Ivy Bridge CPU with 6 - series motherboards.</li> <li>Fix the problem of mixing Sandy Bridge CPU with 7 - series motherboards.</li> </ul> </li> </ul> <p>Haswell, Broadwell</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - LAPTOP.aml </li> <li> SSDT - XOSI.aml <ul> <li>Trackpad connection repair, working in polling mode by default.</li> <li>It needs to be used with the ACPI patch: Change _OSI to XOSI.</li> <li>Devices without a trackpad such as NUC don't need this.</li> <li>If this is unsuccessful, you can manually use MaciASL to compile SSDT - GPI0.dsl.zip to replace XOSI.<ul> <li>However, the interrupt difficulty is a bit high. You can refer to the content in this part: Trackpad Interrupt Example.</li> </ul> </li> </ul> </li> <li> SSDT - PNLF.aml<ul> <li>Fix laptop brightness control. NUC doesn't need this.</li> </ul> </li> </ul> <p>Skylake, Kaby Lake</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - USBX - LAPTOP.aml </li> <li> SSDT - XOSI.aml <ul> <li>Trackpad connection repair, working in polling mode by default.</li> <li>It needs to be used with the ACPI patch: Change _OSI to XOSI.</li> <li>Devices without a trackpad such as NUC don't need this.</li> <li>If this is unsuccessful, you can manually use MaciASL to compile SSDT - GPI0.dsl.zip to replace XOSI.<ul> <li>However, the interrupt difficulty is a bit high. You can refer to the content in this part: Trackpad Interrupt Example.</li> </ul> </li> </ul> </li> <li> SSDT - PNLF.aml<ul> <li>Fix laptop brightness control. NUC doesn't need this.</li> </ul> </li> </ul> <p>Coffee Lake, Whiskey Lake</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - USBX - LAPTOP.aml </li> <li> SSDT - XOSI.aml <ul> <li>Trackpad connection repair, working in polling mode by default.</li> <li>It needs to be used with the ACPI patch: Change _OSI to XOSI.</li> <li>Devices without a trackpad such as NUC don't need this.</li> <li>If this is unsuccessful, you can manually use MaciASL to compile SSDT - GPI0.dsl.zip to replace XOSI.<ul> <li>However, the interrupt difficulty is a bit high. You can refer to the content in this part: Trackpad Interrupt Example.</li> </ul> </li> </ul> </li> <li> SSDT - PNLF.aml<ul> <li>Fix laptop brightness control. NUC doesn't need this.</li> </ul> </li> <li> SSDT - AWAC.aml <ul> <li>Fix the system clock on newer hardware.</li> <li>Support the following motherboards:<ul> <li>B360, B365, H310, H370</li> <li>Z370 (Gigabyte and AsRock motherboards with newer BIOS versions)</li> <li>Z390</li> <li>B460, Z490</li> <li>400 - series (Comet Lake) </li> <li>495 - series (Ice lake)</li> </ul> </li> </ul> </li> </ul> <p>Coffee Lake Plus, Comet Lake</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - USBX - LAPTOP.aml </li> <li> SSDT - XOSI.aml <ul> <li>Trackpad connection repair, working in polling mode by default.</li> <li>It needs to be used with the ACPI patch: Change _OSI to XOSI.</li> <li>Devices without a trackpad such as NUC don't need this.</li> <li>If this is unsuccessful, you can manually use MaciASL to compile SSDT - GPI0.dsl.zip to replace XOSI.<ul> <li>However, the interrupt difficulty is a bit high. You can refer to the content in this part: Trackpad Interrupt Example.</li> </ul> </li> </ul> </li> <li> SSDT - PNLF.aml<ul> <li>Fix laptop brightness control. NUC doesn't need this.</li> </ul> </li> <li> SSDT - AWAC.aml <ul> <li>Fix the system clock on newer hardware.</li> <li>Support the following motherboards:<ul> <li>B360, B365, H310, H370</li> <li>Z370 (Gigabyte and AsRock motherboards with newer BIOS versions)</li> <li>Z390</li> <li>B460, Z490</li> <li>400 - series (Comet Lake) </li> <li>495 - series (Ice lake)</li> </ul> </li> </ul> </li> <li> SSDT - PMC.aml <ul> <li>Used to support and adapt NVRAM.</li> <li>All 300 - series motherboards need this SSDT (except Z370).</li> <li>Support the following motherboards:<ul> <li>B360, B365</li> <li>H310, H370 (HM370 probably doesn't need this)</li> <li>Z390</li> </ul> </li> </ul> </li> </ul> <p>Ice Lake</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - USBX - LAPTOP.aml </li> <li> SSDT - XOSI.aml <ul> <li>Trackpad connection repair, working in polling mode by default.</li> <li>It needs to be used with the ACPI patch: Change _OSI to XOSI.</li> <li>Devices without a trackpad such as NUC don't need this.</li> <li>If this is unsuccessful, you can manually use MaciASL to compile SSDT - GPI0.dsl.zip to replace XOSI.<ul> <li>However, the interrupt difficulty is a bit high. You can refer to the content in this part: Trackpad Interrupt Example.</li> </ul> </li> </ul> </li> <li> SSDT - PNLF.aml<ul> <li>Fix laptop brightness control. NUC doesn't need this.</li> </ul> </li> <li> SSDT - AWAC.aml <ul> <li>Fix the system clock on newer hardware.</li> <li>Support the following motherboards:<ul> <li>B360, B365, H310, H370</li> <li>Z370 (Gigabyte and AsRock motherboards with newer BIOS versions)</li> <li>Z390</li> <li>B460, Z490</li> <li>400 - series (Comet Lake) </li> <li>495 - series (Ice lake)</li> </ul> </li> </ul> </li> <li> SSDT - RHUB.aml<ul> <li>Fix the root device error on many Ice Lake laptops.</li> </ul> </li> </ul>"},{"location":"Preparation/APCI%26SSDT/#intel-high-end-desktop","title":"Intel High - end Desktop","text":"<p>Nehalem, Westmere</p> <ul> <li> SSDT - EC - DESKTOP.aml </li> </ul> <p>Sandy Bridge - E, Ivy Bridge - E</p> <ul> <li> SSDT - EC - DESKTOP.aml </li> <li> SSDT - UNC.aml<ul> <li>Disable unused devices in ACPI to ensure that the IOPCIFamily doesn't have a kernel panic.</li> <li>All X99 motherboards and most X79 motherboards need this SSDT.</li> <li>In addition, some C602 and C612 motherboards also need this SSDT.</li> </ul> </li> </ul> <p>Haswell - E, Broadwell - E</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - USBX - DESKTOP.aml </li> <li> SSDT - RTC0 - RANGE - HEDT.aml<ul> <li>Big Sur and later systems need to ensure the compatibility of the RTC device.</li> </ul> </li> <li> SSDT - UNC.aml<ul> <li>Disable unused devices in ACPI to ensure that the IOPCIFamily doesn't have a kernel panic.</li> <li>All X99 motherboards and most X79 motherboards need this SSDT.</li> <li>In addition, some C602 and C612 motherboards also need this SSDT.</li> </ul> </li> </ul> <p>Skylake - X/W, Cascade Lake - X/W</p> <ul> <li> SSDT - PLUG - DRTNIA.aml </li> <li> SSDT - EC - USBX - DESKTOP.aml </li> <li> SSDT - RTC0 - RANGE - HEDT.aml<ul> <li>Big Sur and later systems need to ensure the compatibility of the RTC device.</li> </ul> </li> </ul>"},{"location":"Preparation/APCI%26SSDT/#amd-desktop","title":"AMD Desktop","text":"<p>Bulldozer(15h), Jaguar(16h)</p> <ul> <li> SSDT - EC - USBX - DESKTOP.aml </li> </ul> <p>Ryzen, Threadripper(17h and 19h)</p> <ul> <li> SSDT - EC - USBX - DESKTOP.aml </li> <li> SSDT - CPUR.aml <ul> <li>Used to fix the CPU definition for B550 and A520 motherboards. Other motherboards may not need it.</li> <li>X570 and older motherboards don't need this SSDT.</li> </ul> </li> </ul>"},{"location":"Preparation/APCI%26SSDT/#a-complete-list-of-acpi-for-hackintosh","title":"A Complete List of ACPI for Hackintosh?","text":"<p>Since there are so many ACPI, it's impossible for me to list them all. Moreover, there is no authoritative explanation for the functions of some SSDT on the Internet. So the following explanations may have errors and are for reference only. If there are omissions or serious errors in the content, welcome to submit a PR on Github to supplement.</p> No. SSDT File Name Explanation 1 FixShutdown - USB - SSDT.aml Fix the USB controller to solve the problem of automatic restart during sleep or shutdown. 2 Spoof - SSDT.aml Disable the GPU. 3 SSDT - ALS0.aml Add a virtual ambient light sensor to save the previous brightness setting after restart. 4 SSDT - ARTC.aml Fix the system clock found on newer hardware. It comes with OCC. 5 SSDT - AWAC.aml Used for 300 - series motherboards. 6 SSDT - BAT.aml Battery patch for models like ThinkPad. 7 SSDT - BKey.aml Used for early brightness adjustment. 8 SSDT - BRG0.aml May be needed if the BIOS doesn't have a Serial(COM) Port or if Super IO can't be disabled. 9 SSDT - CPUR.aml Energy management. For AMD B550 and A520 motherboards. X570 and older motherboards don't need it. 10 SSDT - EC - DESKTOP.aml Used for old desktop platforms to repair the embedded controller."},{"location":"Preparation/BIOS%20settings/","title":"BIOS settings","text":"<p>The following BIOS settings should be referred to as much as possible. Due to the various motherboard models, it's normal if not all settings can be found. Just try to align with these settings as much as possible.</p>"},{"location":"Preparation/BIOS%20settings/#bios-settings-for-intel-motherboards","title":"BIOS Settings for Intel Motherboards","text":""},{"location":"Preparation/BIOS%20settings/#disable","title":"Disable","text":"Option Remarks Fast Boot Fast boot Secure Boot Secure boot Serial/COM Port Serial communication port Parallel Port Parallel port CSM <code>Compatibility Support Module</code> Thunderbolt Thunderbolt. It may cause some mysterious problems during installation. It is recommended to turn it off for simplicity. Intel SGX Also known as <code>Software Guard Extensions</code>, it is a security mechanism based on CPU hardware. Intel Platform Trust Intel Platform Trust Technology, mainly used for key management and security authentication services. CFG Lock MSR 0xE2 write - protection. It is recommended to turn it off. VT - d Also called <code>Intel\u00ae Virtualization Technology for Directed I/O (VT - d)</code> <p>CFG Lock</p> <ol> <li>MSR 0xE2 write - protection.</li> <li>It is recommended to turn it off to improve the perfection of Hackintosh. Many laptops don't have these options, and you may need to manually unlock the hidden BIOS options.</li> <li>If you don't turn it off, setting the <code>AppleXcpmCfgLock</code> option to <code>YES</code> in the config.plist configuration is also okay (but the perfection is not as good as turning off CFG Lock).</li> </ol> <p>VT - d</p> <ol> <li>I/O virtualization technology, which is easily confused with VT - x.</li> <li>It is recommended to turn it off. Generally, it only needs to be turned on for PVE hardware pass - through. Normal users usually don't need hardware pass - through technology.</li> <li>If you don't turn it off, setting the <code>DisableIoMapper</code> option to <code>YES</code> in the config.plist configuration is also okay.</li> </ol>"},{"location":"Preparation/BIOS%20settings/#enable","title":"Enable","text":"Option Remarks VT - x Also called <code>Intel\u00ae Virtualization Technology</code>, it is CPU hardware virtualization technology. Above 4G decoding Decoding above 4G Hyper - Threading Hyper - threading technology Execute Disable Bit A function of Intel's new - generation processors, mainly used for virus protection. DVMT Pre - Allocated: 64MB Memory allocated to DVMT. For laptops with 4K resolution, it is recommended to set it to 128MB or more. EHCI/XHCI Hand - off EHCI/XHCI hand - off OS type: Windows 8.1/10 UEFI Mode Operating system type SATA Mode: AHCI Hard disk boot mode"},{"location":"Preparation/BIOS%20settings/#bios-settings-for-amd-motherboards","title":"BIOS Settings for AMD Motherboards","text":""},{"location":"Preparation/BIOS%20settings/#disable_1","title":"Disable","text":"Option Remarks Fast Boot Fast boot Secure Boot Secure boot Serial/COM Port Serial communication port Parallel Port Parallel port CSM <code>Compatibility Support Module</code>"},{"location":"Preparation/BIOS%20settings/#enable_1","title":"Enable","text":"Option Remarks Above 4G decoding Decoding above 4G EHCI/XHCI Hand - off EHCI/XHCI hand - off OS type: Windows 8.1/10 UEFI Mode Operating system type SATA Mode: AHCI Hard disk boot mode <p>Above 4G decoding</p> <ol> <li>It is recommended to turn it on.</li> <li>If you can't find it in the BIOS, adding <code>npci = 0x2000</code> to the boot - args boot parameter is also okay.</li> </ol>"},{"location":"Preparation/BIOS%20settings/#reference-cases-for-some-motherboards","title":"Reference Cases for Some Motherboards","text":""},{"location":"Preparation/BIOS%20settings/#asrock-z490-steel-legend","title":"ASRock Z490 Steel Legend","text":"<ul> <li>\u300cAdvanced\u300d-\u300cCPU Configuration\u300d-\u300cIntel Hyper Threading Technology\u300d-\u300cEnable\u300d</li> <li>\u300cAdvanced\u300d-\u300cCPU Configuration\u300d-\u300cCFG Lock\u300d-\u300cDisable\u300d</li> <li>\u300cAdvanced\u300d-\u300cCPU Configuration\u300d-\u300cSoftware Guard Extensions\uff08SGX\uff09\u300d-\u300cDisable\u300d</li> <li>\u300cAdvanced\u300d-\u300cChipset Configuration\u300d-\u300cAbove 4G Decoding\u300d-\u300cEnable\u300d</li> <li>\u300cAdvanced\u300d-\u300cChipset Configuration\u300d-\u300cVT - d\u300d-\u300cDisable\u300d</li> <li>\u300cAdvanced\u300d-\u300cChipset Configuration\u300d-\u300cShared Memory\u300d-\u300c64MB\u300d</li> <li>\u300cAdvanced\u300d-\u300cChipset Configuration\u300d-\u300cIGPUA Multi - Monitor\u300d-\u300cEnable\u300d</li> <li>\u300cAdvanced\u300d-\u300cChipset Configuration\u300d-\u300cDeep Sleep\u300d-\u300cEnable in S4 - S5\u300d</li> <li>\u300cAdvanced\u300d-\u300cStorage Configuration\u300d-\u300cSATA Mode Selection\u300d-\u300cAHCI\u300d</li> <li>\u300cAdvanced\u300d-\u300cIntel(R) Thunderbolt\u300d-\u300cDiscrete Thunderbolt(TM) Support\u300d-\u300cDisable\u300d</li> <li>\u300cAdvanced\u300d-\u300cACPI Configuration\u300d-\u300cSuspend to Memory\u300d-\u300cAuto\u300d</li> <li>\u300cAdvanced\u300d-\u300cACPI Configuration\u300d-\u300cUSB Keyboard/Remote Wake - up\u300d-\u300cDisabled\u300d</li> <li>\u300cAdvanced\u300d-\u300cACPI Configuration\u300d-\u300cUSB Mouse Wake - up\u300d-\u300cDisabled\u300d</li> <li>\u300cAdvanced\u300d-\u300cUSB Configuration\u300d-\u300cXHCI Hand - off\u300d-\u300cEnabled\u300d</li> <li>\u300cSecurity\u300d-\u300cSecure Boot\u300d-\u300cSecure Boot\u300d-\u300cDisable\u300d</li> <li>\u300cSecurity\u300d-\u300cIntel(R) Platform Trust Technology\u300d-\u300cDisable\u300d</li> <li>\u300cBoot\u300d-\u300cFlash Boot\u300d-\u300cDisable\u300d</li> <li>\u300cBoot\u300d-\u300cCSM\u300d-\u300cDisable\u300d</li> </ul>"},{"location":"Preparation/BIOS%20settings/#corebook-x-14","title":"CoreBook X 14","text":"<ul> <li>\u300cAdvanced\u300d-\u300cSoftware Guard Extensions\uff08SGX\uff09\u300d-\u300cDisabled\u300d</li> <li>\u300cAdvanced\u300d-\u300cHyper - Threading\u300d-\u300cEnabled\u300d</li> <li>\u300cAdvanced\u300d-\u300cACPI Settings\u300d-\u300cEnable Hibernation\u300d-\u300cEnabled\u300d</li> <li>\u300cAdvanced\u300d-\u300cUSB Configuration\u300d-\u300cLegacy USB Support\u300d-\u300cEnabled\u300d</li> <li>\u300cAdvanced\u300d-\u300cXHCI Hand - off\u300d-\u300cEnabled\u300d</li> <li>\u300cAdvanced\u300d-\u300cCSM Configuration\u300d-\u300cCSM Support\u300d-\u300cDisabled\u300d</li> <li>\u300cChipset\u300d-\u300cType C Support\u300d-\u300cPlatform - POR\u300d</li> <li>\u300cChipset\u300d-\u300cSystem Agent (SA) Configuration\u300d-\u300cVT - d\u300d-\u300cDisabled\u300d</li> <li>\u300cChipset\u300d-\u300cAbove 4GB MMID BIOS assignment\u300d-\u300cEnabled\u300d</li> <li>\u300cChipset\u300d-\u300cGraphics Configuration\u300d-\u300cDVMT Pre - Allocated\u300d-\u300c64MB\u300d</li> <li>\u300cChipset\u300d-\u300cPCH - IO Configuration\u300d-\u300cSATA Mode Selection\u300d-\u300cAHCI\u300d</li> <li>\u300cSecurity\u300d-\u300cSecurity Boot\u300d-\u300cSecurity Boot\u300d-\u300cDisabled\u300d</li> <li>\u300cBoot\u300d-\u300cQuiet Boot\u300d-\u300cEnabled\u300d</li> <li>\u300cBoot\u300d-\u300cFast Boot\u300d-\u300cDisabled\u300d</li> </ul>"},{"location":"Preparation/BIOS%20settings/#gigabyte-b360m-aorus-pro","title":"GIGABYTE B360M AORUS PRO","text":"<p>BIOS version F3, date: 05/17/2019</p> <ul> <li>\u3010BIOS Features\u3011-\u3010Windows 8/10\u3011-\u3010Other Operating Systems\u3011</li> <li>\u3010BIOS Features\u3011-\u3010CSM Support\u3011-\u3010Disable\u3011</li> <li>\u3010BIOS Features\u3011-\u3010Secure Mode\u3011-\u3010Secure Boot Enable\u3011-\u3010Disable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Preset Boot Display Device\u3011-\u3010IGFX\u3011(Here, the integrated graphics is used.)</li> <li>\u3010Integrated Peripherals\u3011-\u3010Intel Platform Trust Technology (PTT)\u3011-\u3010Disable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Software Guard Extension (SGX)\u3011-\u3010Disable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Trusted Computing\u3011-\u3010Security Device Support\u3011-\u3010Disable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Super IO Configuration\u3011-\u3010Serial Port\u3011-\u3010Disable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010USB Programs\u3011-\u3010Legacy USB Support\u3011-\u3010Enable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Integrated Peripherals\u3011-\u3010XHCI Hand - off\u3011-\u3010Enable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Integrated Peripherals\u3011-\u3010USB Mass Storege Driver Support\u3011-\u3010Enable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Network Stack Configuration\u3011-\u3010Network Stack\u3011-\u3010Disable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010SATA And RST Configuration\u3011-\u3010SATA Mode Selection\u3011-\u3010AHCI\u3011</li> <li>\u3010Chipset\u3011-\u3010VT - d\u3011-\u3010Disable\u3011</li> <li>\u3010Chipset\u3011-\u3010Internal Graphics\u3011-\u3010Enable\u3011</li> <li>\u3010Chipset\u3011-\u3010DVMT Pre - Allocated\u3011-\u301064M\u3011</li> <li>\u3010Chipset\u3011-\u3010DVMT Total Gfx Mem\u3011-\u3010256M\u3011</li> <li>\u3010Chipset\u3011-\u3010Above 4G Decoding\u3011-\u3010Enable\u3011</li> <li>\u3010Chipset\u3011-\u3010Wake on LAN Enable\u3011-\u3010Disable\u3011</li> <li>\u3010Power Management\u3011-\u3010Platform Power Management\u3011-\u3010Disable\u3011</li> <li>\u3010Power Management\u3011-\u3010Mouse Wake - up\u3011-\u3010Double - click\u3011</li> </ul>"},{"location":"Preparation/BIOS%20settings/#gigabyte-b250m-ds3h","title":"GIGABYTE B250M - DS3H","text":"<p>BIOS version F9, date: 05/07/2018</p> <ul> <li>\u3010BIOS Features\u3011-\u3010Security Options\u3011-\u3010System\u3011</li> <li>\u3010BIOS Features\u3011-\u3010Fast Boot\u3011-\u3010Disable\u3011</li> <li>\u3010BIOS Features\u3011-\u3010Windows 8/10\u3011-\u3010Other Operating Systems\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Preset Boot Display Device\u3011-\u3010PCIe Slot 1\u3011<ul> <li>If you set IGFX integrated graphics and your monitor is plugged into the discrete graphics card, the screen will be black when you start the system.</li> <li>If you set the PCIe slot, your integrated graphics will be disabled. When you enter the system, you will find that dual - hardware decoding is abnormal.</li> <li>The perfect situation is to set IGFX integrated graphics, plug the monitor into the motherboard, and then plug the discrete graphics card back after entering the system.</li> <li>Although the above operation is a bit troublesome, if you don't care about dual - hardware decoding, you can directly set the PCIe slot and plug the monitor into the discrete graphics card.</li> </ul> </li> <li>\u3010Integrated Peripherals\u3011-\u3010SW Guard Extensions\uff08SGX\uff09\u3011-\u3010Disable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Trusted Computing\u3011-\u3010Security Device Support\u3011-\u3010Disable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010Super IO Configuration\u3011-\u3010Serial Port\u3011-\u3010Disable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010USB Programs\u3011-\u3010Legacy USB Support\u3011-\u3010Enable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010USB Programs\u3011-\u3010XHCI Hand - off\u3011-\u3010Enable\u3011</li> <li>\u3010Integrated Peripherals\u3011-\u3010SATA And RST Programs\u3011-\u3010SATA Mode Selection\u3011-\u3010AHCI\u3011</li> <li>\u3010Chipset\u3011-\u3010VT - d\u3011-\u3010Disable\u3011</li> </ul>"},{"location":"Preparation/BIOS%20settings/#asus-rog-strix-b460-i-gaming","title":"ASUS ROG STRIX B460 I GAMING","text":"<ul> <li>\u3010Advanced\u3011 - \u3010CPU Settings\u3011 - \u3010Software Protection Extensions\uff08SGX\uff09\u3011- \u3010Disable\u3011</li> <li>\u3010Advanced\u3011 - \u3010CPU Settings\u3011 - \u3010Intel VMX Virtualization Technology\u3011 - \u3010Enable\u3011</li> <li>\u3010Advanced\u3011- \u3010North Bridge\u3011 - \u3010VT - d\u3011 - \u3010Disable\u3011</li> <li>\u3010Advanced\u3011- \u3010North Bridge - \u3010Display Settings\u3011 - \u3010Initialize IGPU\u3011- \u3010Enable\u3011</li> <li>\u3010Advanced\u3011-\u3010Trusted Computing - Security Device Support\u3011-\u3010Disable\u3011</li> <li>\u3010Advanced\u3011-\u3010PCI Subsystem Settings - Above 4G Address Space Decoding\u3011-\u3010Enable\u3011</li> <li>\u3010Boot\u3011- \u3010CSM - Enable CSM\u3011 - \u3010Disable\u3011</li> <li>\u3010Boot\u3011-\u3010Boot Settings - Fast Boot\u3011- \u3010Disable\u3011</li> <li>\u3010Boot\u3011-\u3010Wait for F1 Key Press if Error Occurs\u3011-\u3010Disable\u3011</li> </ul>"},{"location":"Preparation/BIOS%20settings/#asus-z170i-pro-gamimg-hackintosh-overclocking","title":"ASUS Z170I PRO GAMIMG (Hackintosh &amp;&amp; Overclocking)","text":"<p>Here are some details of BIOS settings for overclocking and Hackintosh installation. Different CPUs have different characteristics. This article is for reference only.</p> <ul> <li>BIOS home page - Manual fan adjustment - All FANs Turbo Boost</li> <li>Advanced mode - AI Tweaker - Ai Intelligent Overclocking - Manual</li> <li>Advanced mode - AI Tweaker - BCLK Frequency - 100.0000</li> <li>Advanced mode - AI Tweaker - ASUS Multi - Core Enhancement - Disabled</li> <li>Advanced mode - AI Tweaker - CPU Core Multiplier - Per Core - 50 - 48 - 47 - 46 (Single - core 5.0Ghz, all - core 4.6Ghz)</li> <li>Advanced mode - AI Tweaker - Memory Speed Ratio Mode - Auto</li> <li>Advanced mode - AI Tweaker - DRAM Odd Multiplier Mode - Enabled</li> <li>Advanced mode - AI Tweaker - Memory Frequency - DDR4 - 2666Mhz</li> <li>Advanced mode - AI Tweaker - OC Adjustment - Keep Current Settings</li> <li>Advanced mode - AI Tweaker - EPU Energy - saving Mode - Off</li> <li>Advanced mode - AI Tweaker - CPU SVID Support - Disabled</li> <li>Advanced mode - AI Tweaker - DIGI + VRM - CPU Load - line Calibration - Level 5</li> <li>Advanced mode - AI Tweaker - DIGI + VRM - CPU Current Capacity - 140%</li> <li>Advanced mode - AI Tweaker - DIGI + VRM - CPU Power Phase Number Control - Extreme</li> <li>Advanced mode - AI Tweaker - DIGI + VRM - CPU Power Phase Control - Extreme</li> <li>Advanced mode - AI Tweaker - DIGI + VRM - CPU Graphics Power Phase Control - Extreme</li> <li>Advanced mode - AI Tweaker - DIGI + VRM - DRAM Power Phase Control - Extreme</li> <li>Advanced mode - AI Tweaker - Built - in CPU Power Management - Intel(R) SpeedStep(tm) - Auto</li> <li>Advanced mode - AI Tweaker - Built - in CPU Power Management - Turbo Boost Mode - On</li> <li>Advanced mode - AI Tweaker - Built - in CPU Power Management - Long - term Power Consumption Limit - 200</li> <li>Advanced mode - AI Tweaker - Built - in CPU Power Management - Power Time Window - 127</li> <li>Advanced mode - AI Tweaker - Built - in CPU Power Management - Short - term Power Consumption Limit - 200</li> <li>Advanced mode - AI Tweaker - CPU Core/Cache Voltage - Manual Mode</li> <li>Advanced mode - AI Tweaker - CPU Core Voltage Override - 1.280</li> <li>Advanced mode - Advanced - CPU Settings - Hyper - Threading Technology - On</li> <li>Advanced mode - Advanced - CPU Settings - Enable Processor Cores - All</li> <li>Advanced mode - Advanced - CPU Settings - Intel Virtualization Technology - On</li> <li>Advanced mode - Advanced - CPU Settings - Hardware Prefetch - On</li> <li>Advanced mode - Advanced - CPU Settings - SW Guard Extensions(SGX) - Off</li> <li>Advanced mode - Advanced - CPU Settings - CPU - Power Management Control - CPU C - states - Off</li> <li>Advanced mode - Advanced - CPU Settings - CPU - Power Management Control - CFG Lock - Off</li> <li>Advanced mode - Advanced - North Bridge - VT - d - Off</li> <li>Advanced mode - Advanced - North Bridge - Above 4G Address Space Decoding - On</li> <li>Advanced mode - Advanced - North Bridge - Display Settings - Preferred Graphics Card - Auto</li> <li>Advanced mode - Advanced - North Bridge - Display Settings - Initialize iGPU - On</li> <li>Advanced mode - Advanced - North Bridge - Display Settings - DVMT Pre - Allocated - 64M</li> <li>Advanced mode - Advanced - PCH Storage Configuration - SATA Mode Selection - AHCI</li> <li>Advanced mode - Advanced - PCH - FW Configuration - TPM Device Selection - Discreate TPM ()</li> <li>Advanced mode - Advanced - Built - in Devices - Asmedia USB 3.1 Controller - On</li> <li>Advanced mode - Advanced - Built - in Devices - Asmedia USB 3.1 Fast Charging Support - On</li> <li>Advanced mode - Advanced - Advanced Power Management (APM)- Erp Support - Off</li> <li>Advanced mode - Advanced - Advanced Power Management (APM)- Power State after Power - off Recovery - Power - off</li> <li>Advanced mode - Advanced - Advanced Power Management (APM)-  Wake - up by PCI - E Device - Off</li> <li>Advanced mode - Advanced - Advanced Power Management (APM)-  Wake - up by RTC - Off</li> <li>Advanced mode - Advanced - USB Configuration - Legacy USB Support - Enabled</li> <li>Advanced mode - Boot - Fast Boot - Disabled</li> <li>Advanced mode - Boot - Boot Settings - POST Delay Time - 0 seconds</li> <li>Advanced mode - Boot - Boot Settings - Wait for F1 Key Press if Error Occurs - Off</li> <li>Advanced mode - Boot - Boot Settings - CSM (Compatibility Support Module)- Enable CSM - Off</li> <li>Advanced mode - Boot - Boot Settings - Security Boot Menu - Operating System Type - Other Operating System</li> </ul>"},{"location":"Preparation/Drivers/","title":"Drivers","text":""},{"location":"Preparation/Drivers/#complete-drivers-explanation","title":"Complete Drivers Explanation","text":"<p>There are some driver files in <code>OC/Drivers</code>, and these drivers all end with the.efi suffix. The official default driver files and explanations of OC are as follows:</p> <ul> <li>AudioDxe.efi: It is used to play the \"Duang\" sound during startup, just like a genuine Mac.</li> <li>CrScreenshotDxe.efi: The driver for taking screenshots in the OC boot interface. Pressing F10 will save a screenshot of the current interface to the root directory of the EFI partition.</li> <li>HiiDatabase.efi: It is used to support UEFI font rendering. Generally, it is not needed after the 4th - generation Core.</li> <li>NvmExpressDxe.efi: It is used to make old motherboards support NVME Express devices. Generally, it is not needed after the 4th - generation Core.</li> <li>OpenCanopy.efi: The essential driver for using a graphical OC theme.</li> <li>OpenHfsPlus.efi: The file system driver, which is used to support the recognition of the HFS + disk format.</li> <li>OpenLinuxBoot.efi: A newly added driver in OC 0.7.3, which is used to boot the Linux system.</li> <li>OpenPartitionDxe.efi: The partition management driver. It is used to load the DMG image of the old - version macOS.</li> <li>OpenRuntime.efi: The essential core driver of OC, with relatively powerful functions. Just remember that this is an essential driver.</li> <li>OpenUsbKbDxe.efi: The USB keyboard driver, which is used to simulate Apple hotkeys and is an equivalent solution to KeySupport.</li> <li>Ps2KeyboardDxe.efi: The PS/2 keyboard driver. The PS/2 keyboard is so old. I haven't seen it for many years.</li> <li>Ps2MouseDxe.efi: The PS/2 mouse driver. It is also very old, and I haven't seen it for many years.</li> <li>UsbMouseDxe.efi: The USB mouse driver. Some virtual machines need to rely on this driver to use the mouse in the boot interface.</li> <li>XhciDxe.efi: The XHCI USB controller driver. Basically, since the 2nd - generation Core, most firmwares have this driver built - in.</li> </ul>"},{"location":"Preparation/Drivers/#commonly-used-drivers","title":"Commonly - used Drivers","text":"<p>Under normal circumstances, the following two are essential drivers:</p> <ul> <li> <p>OpenRuntime.efi: The essential core driver of OC, with relatively powerful functions. Just remember that this is an essential driver.</p> </li> <li> <p>OpenHfsPlus.efi: The file system driver, which is used to support the recognition of the HFS + disk format.</p> </li> </ul> <p>Because I have the habit of using a graphical interface for booting and taking screenshots in the boot interface, I also use the following two drivers:</p> <ul> <li> <p>OpenCanopy.efi: The essential driver for using a graphical OC theme.</p> </li> <li> <p>CrScreenshotDxe.efi: The driver for taking screenshots in the OC boot interface. Pressing F10 will save a screenshot of the current interface to the root directory of the EFI partition.</p> </li> </ul>"},{"location":"Preparation/Drivers/#comparison-before-and-after-using-themes","title":"Comparison Before and After Using Themes","text":""},{"location":"Preparation/Drivers/#before-using-themes","title":"Before Using Themes","text":""},{"location":"Preparation/Drivers/#after-using-themes","title":"After Using Themes","text":"<p>Some channels for downloading OC themes:</p> <ul> <li>https://dortania.github.io/OpenCanopy - Gallery/blackosx.html</li> <li>OC Themes - Hackintosh Power </li> <li>https://github.com/LuckyCrack/OpenCore - Themes</li> <li>https://github.com/chris1111/My - Simple - OC - Themes</li> </ul> <p>Theme customization is also very simple. Just prepare your icns icon files. Changing the background and icons by yourself can create a new theme, right? Below, I will show you the effect of my custom - made theme:</p> <p> </p>"},{"location":"Preparation/Kext/","title":"Kext","text":""},{"location":"Preparation/Kext/#basic-concepts","title":"Basic Concepts","text":"<p>The full English name of Kext is Kernel Extension, that is, kernel extension. We can simply understand it as the driver of macOS. The usage method is just to put these kext files into the <code>EFI/OC/kexts</code> folder, and then edit the OC configuration file to load these kexts and adjust the order properly.</p>"},{"location":"Preparation/Kext/#download-kexts","title":"Download Kexts","text":"<p>Here, I will briefly list some methods for downloading Kexts:</p> <ol> <li>Use third - party OC editor software such as OpenCore Configurator to download.</li> <li>Use a search engine to search for the address under the Github of Kexts, and manually look for the compiled kext files in Releases.</li> <li>Use the official OC download page to download common kexts: https://dortania.github.io/builds/</li> </ol> <p>If you can't download, it's because Github is blocked in China. Here are several solutions.</p> <ol> <li>Use a telecom network to access and download.</li> <li>Use a proxy to download.</li> <li>Use a Github mirror site to download.</li> <li>Use the files in the EFI folder that others have already configured and use them directly.</li> <li>There are always more solutions than difficulties. Don't give up just because of a little setback.</li> </ol>"},{"location":"Preparation/Kext/#classification-of-kexts","title":"Classification of Kexts","text":""},{"location":"Preparation/Kext/#essential-drivers","title":"Essential Drivers","text":"<p>If the essential kexts are missing, your Hackintosh system will not be able to start.</p> <ul> <li> VirtualSMC.kext<ul> <li>Simulate the SMC chip of a genuine Mac.</li> <li>Replace the old FakeSMC.</li> <li>Only support OS X 10.6 + versions of the system.</li> </ul> </li> <li> Lilu.kext<ul> <li>It is a dependency of many famous kexts. Without Lilu, AppleALC, WhateverGreen, VirtualSMC, etc. cannot be used normally.</li> <li>Only support OS X 10.8 + versions of the system.</li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#virualsmc-plugins","title":"VirualSMC Plugins","text":"<p>When you download the compiled kexts of VirtualSMC, you will find that there are other kexts in it. These other kexts are plugins of VirtualSMC. Here are the functions of these plugins:</p> <ul> <li> SMCBatteryManager.kext<ul> <li>For laptops only, used to correctly read and display battery capacity.</li> </ul> </li> <li> SMCDellSensors.kext<ul> <li>For some Dell machines only. Generally, machines that are not Dell don't need to use it.</li> <li>For Dell machines that support SMM (System Management Mode), it can monitor and control the fan more accurately.</li> </ul> </li> <li> SMCLightSensor.kext<ul> <li>For laptops only, used for the ambient light sensor on laptops.</li> <li>Most laptops don't have this sensor, so even if it's used, it's only pseudo - light - sensing.</li> </ul> </li> <li> SMCProcessor.kext<ul> <li>Used to monitor the CPU temperature, applicable to both desktops and laptops.</li> <li>Doesn't support AMD CPUs.</li> </ul> </li> <li> SMCSuperIO.kext<ul> <li>Used to monitor the fan speed, applicable to both desktops and laptops.</li> <li>Doesn't support AMD CPUs.</li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#graphics-card-drivers","title":"Graphics Card Drivers","text":"<ul> <li> WhateverGreen.kext<ul> <li>Basically, all integrated graphics and discrete graphics need to use this kext.</li> <li>Used for graphics patching, DRM repair, buffer repair, etc.</li> <li>Only support OS X 10.8 + versions of the system.</li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#amd-graphics-card-sensors","title":"AMD Graphics Card Sensors","text":"<ul> <li> RadeonSensor.kext and SMCRadeonGPU.kext<ul> <li>Since Radeon VII, Apple has stopped directly reporting the temperature, and kexts are required to intervene and implement this function.</li> <li>For Vega 10 and earlier versions, other tools can already display the GPU temperature without additional kexts.</li> <li>Support all GPUs from Radeon HD 7000 series to RX 6000 series.</li> <li> RadeonSensor.kext<ul> <li>Required to read the GPU temperature, and Lilu is needed.</li> </ul> </li> <li> SMCRadeonGPU.kext<ul> <li>Can be optionally used to export the GPU temperature to VirtualSMC for monitoring tools to read.</li> </ul> </li> <li> RadeonGadget.app<ul> <li>Displays the GPU temperature in the status bar, and only needs to load <code>RadeonSensor.kext</code>.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#sound-card-drivers","title":"Sound Card Drivers","text":"<ul> <li> AppleALC.kext<ul> <li>Used for AppleHDA patching, supports most on - board sound card drivers.</li> <li>The <code>AppleALCU.kext</code> in the folder is a streamlined version of AppleALC, only supporting digital audio.</li> <li>AMD motherboards and CPUs may encounter some problems, and it's rare to be able to drive the microphone.</li> <li>Only support OS X 10.8 + versions of the system.</li> <li>For a detailed list of sound cards that support native drivers, refer to: Hackintosh Sound Card Driver Status Table and Layouts id Status.</li> <li>After injecting this driver, just add alcid = xxxx in the boot - args.</li> </ul> </li> <li> VoodooHDA.kext<ul> <li>A relatively old and classic sound card driver, also known as the universal sound card driver.</li> <li>If AppeALC.kext can't drive, you can consider this one.</li> <li>But the usage experience is definitely not as perfect as the native AppleALC.kext.</li> <li>Only support OS X 10.6 + versions of the system.</li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#usb-drivers","title":"USB Drivers","text":"<p>In later versions of macOS 11, the traditional USB driver customization method is no longer effective. Currently, the most perfect method is to use USBToolBox in Windows to customize USB, and finally use Hackintool for simple fine - tuning and correction.</p> <ul> <li> USBToolBox.kext and UTBMap.kext<ul> <li> USBToolBox.kext <ul> <li>The official download address is: https://github.com/USBToolBox/kext/releases.</li> </ul> </li> <li> UTBMap.kext<ul> <li>It needs to be generated by referring to the USB Customization Tutorial.</li> </ul> </li> <li>It is recommended to customize USB before installing the system to avoid unnecessary troubles later.</li> </ul> </li> <li> XHCI - unsupported.kext<ul> <li>Used when the USB 3.X interface still doesn't work properly after USB customization is completed.</li> <li>Commonly used for motherboards of 400 - series and above.</li> <li>If the motherboard is not natively supported by macOS USB drivers, this is needed.</li> </ul> </li> </ul> <p>The following are old tutorials. They are not deleted and are kept for commemoration and reference.</p> <ul> <li> <p> USBInjectAll.kext</p> <ul> <li>RehabMan's previous USB driver.</li> <li>Version 0.7.1 released in November 2018 is the last version, and there has been no update since then.</li> <li>Used to inject Intel USB controllers on systems where USB ports are not defined in ACPI.</li> <li>Desktop CPUs of Skylake + don't need this.</li> <li>For AsRock motherboards, this may still be needed.</li> <li>Coffee Lake seems to still need this.</li> <li>CPUs before Skylake theoretically also need this.</li> <li>Support OS X 10.11 + versions of the system.</li> </ul> <p>When writing this, I have mixed feelings. RehabMan can be regarded as a veteran in the Hackintosh community. He is also a moderator of Tonymacx86. Many famous Hackintosh kexts are from him. However, for various reasons, he has not been active since 2018, disappearing as if he had never been here. But there are still legends about him in the community: Can we all thank RehabMan.</p> <p>I really admire such a person. He has been answering questions in the forum for ten years, regularly updating these open - source kexts. Even some Apple developers come to learn from him. The irony of Hackintosh is that there are too many people who are free - riders and have no sense of gratitude. Maybe when they encounter difficulties in installing the system, they will go to your Github to submit an issue and urge you to update, as if you are responsible for them just because you open - source this driver. After a successful installation, the questioners disappear, not even saying thank you, and not leaving any valuable document information. This will cause many experts to answer the same repetitive and low - tech questions every day. If it were me, I definitely couldn't last for a few days. But RehabMan has persisted for more than 10 years. It's really shocking. RehabMan's last post on TonymacX86 said: \"I'm still here, but busy with other (real - life) things. I won't be able to answer questions here. People need to learn to read.\" Hopefully, it's really the case, rather than being deeply hurt by these ungrateful people.</p> </li> <li> <p> USBInjectAll.kext</p> <ul> <li>The version maintained by the domestic Hackintosh Xiaobing.</li> <li>An updated and improved version based on RehabMan's.</li> <li>Supports new 400 - and 500 - series motherboards.</li> </ul> <p>Speaking of Hackintosh Xiaobing, I also admire such a person. When I first got to know him, I thought he was a middle - aged man in his 30s. But later, I learned that his son has already gone to college, and he is almost at retirement age.</p> <p>Like RehabMan, Hackintosh Xiaobing has also written many Hackintosh tutorial articles, open - sourced drivers for many models, and has always provided Hackintosh lazy - person mirror download packages for many years. The most important thing is that at almost retirement age, he still insists on doing the relatively \"fashionable\" Hackintosh technology. It's really amazing. I don't know if I can still do this when I'm old. Ha ha~ If Hackintosh technology still exists.</p> </li> </ul>"},{"location":"Preparation/Kext/#wired-network-card-drivers","title":"Wired Network Card Drivers","text":"<ul> <li> AtherosE2200Ethernet.kext<ul> <li>Required for Atheros Qualcomm and Killer network cards.</li> <li>Note: The Atheros Killer E2500 model is actually based on Realtek, so please use the RealtekRTL8111 driver.</li> <li>Support OS X 10.8 + versions of the system.</li> </ul> </li> <li> IntelMausi.kext<ul> <li>Drivers for most Intel network cards.</li> <li>Network cards based on the I211 chipset need to use the SmallTreeIntel82576 kext.</li> <li>Officially supports Intel's 82578, 82579, I217, I218, and I219 network cards.</li> <li>For a detailed list of wired network card models supported by the driver, refer to: https://github.com/acidanthera/IntelMausi.</li> <li>Requires OS X 10.9 or a later version. Old users of 10.6 - 10.8 can use IntelSnowMausi instead.</li> </ul> </li> <li> LucyRTL8125Ethernet.kext <ul> <li>Driver for Realtek's 2.5Gb network card.</li> <li>The official page requires registration to download. You can also download the version I uploaded Lanzou Cloud.</li> <li>Requires macOS 10.15 + versions of the system.</li> </ul> </li> <li> RealtekRTL8111.kext<ul> <li>Drivers for most Realtek gigabit network cards.</li> <li>Note: Sometimes the latest version of the kext may not work properly. In this case, you can try using an older version.</li> </ul> </li> <li> SmallTreeIntel82576.kext<ul> <li>I211 wired network card driver.</li> <li>Most AMD motherboards with Intel wired network cards need this.</li> <li>Version support: OS X 10.9 - 12 (v1.0.6), macOS 10.13 - 14 (v1.2.5), macOS 10.15 + (v1.3.0).</li> </ul> </li> </ul> <p>Other wired network cards that don't require kexts</p> <ul> <li> Intel I225 - V<ul> <li>Some high - end Comet Lake motherboards will be equipped with this I225 - V 2.5GBe wired network card.</li> <li>This network card is a bit troublesome. The driving method changes in different versions.</li> <li>If the network card is not driven properly, the system will crash, black screen, and restart a few minutes after entering the system.</li> <li>For the driving method, refer to Common QA.</li> </ul> </li> <li> Intel I350<ul> <li>Add <code>PciRoot(0x0)/Pci(0x1,0x1)/Pci(0x0,0x0)</code> in the device properties of the OC configuration file. For example,<ul> <li>device - id <code>33150000</code> of type DATA.</li> <li>The path is different for different models. The actual path should be based on the one viewed by Hackintool.</li> </ul> </li> <li>Requires OS X 10.10 or a later version.</li> </ul> </li> </ul> <p>Some relatively old 100 - megabit wired network card drivers</p> <ul> <li> AppleIntelE1000e.kext<ul> <li>Mainly related to Intel wired network cards based on 10/100MBe.</li> <li>Requires 10.6 or a higher version.</li> </ul> </li> <li> RealtekRTL8100.kext <ul> <li>Supported network card models include RTL8101E, RTL8102E, RTL8103E, RTL8401E, RTL8105E, RTL8402, RTL8106E, RTL8106EUS, RTL8107E.</li> <li>The official page requires registration to download. You can also download the version I uploaded Lanzou Cloud.</li> </ul> </li> <li> BCM5722D.kext <ul> <li>Broadcom's wired network card driver.</li> <li>Supported network card models include BCM5722, BCM5754, BCM5754M, BCM5755, BCM5755M, BCM57788, BCM5787, BCM5787M, BCM5906, BCM5906M.</li> <li>Requires OS X 10.6 or a later version.</li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#wireless-network-card-drivers","title":"Wireless Network Card Drivers","text":""},{"location":"Preparation/Kext/#intel-wireless-network-card-series","title":"Intel Wireless Network Card Series","text":"<p>The drivers transplanted by the great zxystd in China from Linux OpenBSD are very hardcore and highly completed. They can be used normally for relay. AirDrop can only be recognized currently, and file transfer is not available for the moment, but it's already great.</p> <ul> <li> AirportItlwm.kext<ul> <li>WiFi driver for Intel network cards.</li> <li>List of supported Intel wireless network card models: https://docs.oiw.workers.dev/itlwm/Compat.html.</li> <li>Only support macOS 10.13 and higher versions.</li> </ul> </li> <li> IntelBluetoothFirmware.kext and IntelBluetoothFirmware.kext<ul> <li>Bluetooth drivers for Intel network cards, used with <code>AirportItlwm.kext</code>.</li> <li>Only support macOS 10.13 and higher versions.</li> <li>If you are sure that your network card model is supported but the bluetooth doesn't work, then most likely your USB has not been customized properly.</li> <li>After macOS 12, there are small changes in the bluetooth driving method. For details, refer to: macOS 12 Bluetooth.</li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#broadcom-driver-free-series","title":"Broadcom Driver - free Series","text":"<p>There are many driver - free network card models. You can refer to OC official wireless network card purchase guide.</p> <ul> <li> AirportBrcmFixup.kext<ul> <li>Wireless network card driver for non - original Apple wireless network cards or non - Fenvi Broadcom network cards.</li> <li>Support OS X 10.10 and higher versions.</li> </ul> </li> <li> BrcmPatchRAM series<ul> <li>Bluetooth drivers for all non - Apple/non - Fenvi wireless network cards.</li> <li> BrcmPatchRAM.kext   : For systems of 10.8 - 10.10.</li> <li> BrcmPatchRAM2.kext  : For systems of 10.11 - 10.14.</li> <li> BrcmPatchRAM3.kext  : For systems of 10.15 +.</li> </ul> </li> </ul> <p>Several details of Broadcom network cards. For Big Sur and later systems, due to some abnormalities in the driver, AirPortBrcm4360_Injector.kext needs to be manually deleted.</p> <p>Bluetooth loading requires a certain order. The following is the bluetooth loading order for systems of 10.15 + in <code>Kernel -&gt; Add</code>: 1. BrcmBluetoothInjector.kext 2. BrcmFirmwareData.kext 3. BrcmPatchRAM3.kext</p> <p>After macOS 12, there are small changes in the bluetooth driving method. For details, refer to: macOS 12 Bluetooth.</p>"},{"location":"Preparation/Kext/#other-drivers","title":"Other Drivers","text":"<ul> <li> <p> VoodooPS2Controller.kext</p> <ul> <li>If the keyboard or mouse on the installation interface of your desktop computer doesn't work, remember to use this kext.</li> <li>It is suitable for systems equipped with PS2 keyboards, mice and touchpads.</li> <li>The MT2 (Magic Trackpad 2) function requires macOS 10.11 or a later version.</li> </ul> </li> <li> <p> CpuTscSync.kext</p> <ul> <li>TSC synchronization is required on some Intel HEDT and server motherboards. Without this, macOS may be very slow or even unable to start.</li> <li>This kext may also be required on some relatively new laptops.</li> <li>It is not applicable to AMD CPUs.</li> <li>Requires OS X 10.8 or a later version.</li> <li>macOS 12 compatibility has been added for CPUs with <code>MSR_IA32_TSC_ADJUST</code>(03Bh).</li> </ul> </li> <li> NVMeFix.kext<ul> <li>Used to repair power management and initialization on non - Apple NVMe.</li> <li>It is recommended to use this kext for laptops, which helps to reduce power consumption during sleep.</li> <li>It's okay for desktops not to use this, after all, few people care about the power consumption of desktops during sleep.</li> <li>Requires macOS 10.14 or a later version.</li> </ul> </li> <li> HibernationFixup.kext<ul> <li>A Lilu plugin designed to fix hibernation compatibility issues.</li> <li>Solve the problems that the Hackintosh system can't wake up, freezes, or has a black screen after sleep.</li> </ul> </li> <li> SATA - unsupported.kext<ul> <li>For laptops, if the SATA hard disk drive can't be seen in macOS, you can consider using this.</li> </ul> </li> <li> CtlnaAHCIPort.kext<ul> <li>For laptops, when the SATA hard disk drive can't be seen in macOS under macOS 11.X +, use this.</li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#commonly-used-amd-drivers","title":"Commonly - used AMD Drivers","text":"<ul> <li> AMDRyzenCPUPowerManagement.kext<ul> <li>Power management driver for AMD processors.</li> </ul> </li> <li> SMCAMDProcessor.kext<ul> <li>Sensor monitoring and VirtualSMC plugin for AMD processors.</li> </ul> </li> <li> <p> AppleMCEReporterDisabler.kext</p> <ul> <li>Used to turn off AppleMCERReport.</li> <li>AppleMCERReport will cause kernel crashes for AMD CPUs.</li> <li>It may also be helpful for some motherboards with dual CPUs.</li> <li>The affected SMBIOS are: MacPro6,1, MacPro7,1, iMacPro1,1.</li> <li>Requires macOS 10.15 or a later version.</li> </ul> </li> <li> <p> XLNCUSBFix.kext </p> <ul> <li>USB repair for AMD FX systems, not recommended for Ryzen.</li> <li>Requires macOS 10.13 or a later version.</li> </ul> </li> <li> VoodooHDA.kext<ul> <li>Supports audio for FX systems and front - panel microphone and speaker for Ryzen systems.</li> <li>Do not mix with AppleALC.</li> <li>It is a relatively old and classic sound card driver, also known as the universal sound card driver.</li> <li>If AppeALC.kext can't drive, you can consider this one.</li> <li>But the usage experience is definitely not as perfect as the native AppleALC.kext.</li> <li>Only support OS X 10.6 + versions of the system.</li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#commonly-used-drivers-for-laptops","title":"Commonly - used Drivers for Laptops","text":""},{"location":"Preparation/Kext/#input-device-drivers","title":"Input Device Drivers","text":"<ul> <li> VoodooPS2Controller.kext<ul> <li>It is suitable for systems equipped with PS2 keyboards, mice and touchpads.</li> <li>The MT2 (Magic Trackpad 2) function requires macOS 10.11 or a later version.</li> </ul> </li> <li> RehabMan's VoodooPS2Controller.kext<ul> <li>It has better support for older systems. For new systems, it is recommended to use the above kext.</li> <li>For old systems with PS2 keyboards, mice and touchpads, or when you don't want to use VoodooInput.</li> <li>Support macOS 10.6 +.</li> </ul> </li> <li> VoodooRMI.kext and VoodooSMBus.kext<ul> <li>Touchpad drivers for systems with Synaptics SMBus devices.</li> <li>Mainly used for touchpads and trackpoints. The ThinkPad red dot can also be driven.</li> <li>The MT2 (Magic Trackpad 2) function requires macOS 10.11 or a later version.</li> </ul> </li> <li> VoodooSMBus.kext<ul> <li>Touchpad drivers for systems with ELAN SMBus - based devices.</li> <li>Mainly used for touchpads and trackpoints.</li> <li>Currently support macOS 10.14 or a later version.</li> </ul> </li> <li> VoodooI2C.kext<ul> <li>Touchpad drivers for repairing I2C devices.</li> <li>Generally, they are some more advanced touchpads or touchscreens.</li> <li>The MT2 (Magic Trackpad 2) function requires macOS 10.11 or a later version.</li> <li>This is often used with PS2 kexts and requires fine - tuning, otherwise errors may occur. For details, see: Kexts Fine - tuning.</li> <li>Some plugins of VoodooI2C:<ul> <li> VoodooI2CHID.kext<ul> <li>Microsoft HID driver, also supports some models of touchscreens.</li> </ul> </li> <li> VoodooI2CELAN.kext<ul> <li>For ELAN only. For ELAN1200 + versions, VoodooI2CHID.kext is required instead.</li> </ul> </li> <li> VoodooI2CSynaptics.kext<ul> <li>For Synaptics only. For Synaptics F12 protocol, VoodooI2CHID is required instead.</li> </ul> </li> <li> VoodooI2CFTE.kext<ul> <li>FTE1001 touchpad.</li> </ul> </li> <li> VoodooI2CAtmelMXT.kext<ul> <li>Atmel multi - touch protocol.</li> </ul> </li> <li>Before using, first determine the model of your touchpad. Generally, only one corresponding kext is required for a laptop.</li> </ul> </li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#other-drivers_1","title":"Other Drivers","text":"<ul> <li> ECEnabler.kext<ul> <li>Fixes the problem of reading battery status on most laptops (allows reading of EC fields longer than 8 bits).</li> </ul> </li> <li> BrightnessKeys.kext<ul> <li>Driver for laptop brightness shortcut keys.</li> </ul> </li> <li> AsusSMC.kext<ul> <li>VirtualSMC plugin dedicated to Asus laptops.</li> <li>Provides ALS, keyboard backlight and Fn key drivers, and supports battery monitoring and charging.</li> <li>Supports Asus laptops equipped with ATK devices.</li> </ul> </li> <li> CPUFriend.kext and CPUFriendDataProvider.kext<ul> <li>Can adjust the turbo - boost performance of the macOS CPU frequency.</li> <li>Need to cooperate with scripts to generate kexts for your own models. Refer to the official tutorial.</li> </ul> </li> <li> RealtekCardReaderFriend.kext and RealtekCardReader.kext<ul> <li>Realtek card reader drivers for macOS.</li> <li>RealtekCardReaderFriend.kext</li> <li>RealtekCardReader.kext</li> <li>Just use these two kexts together, and they require Lilu 1.4.7 + version as a dependency.</li> </ul> </li> </ul>"},{"location":"Preparation/Kext/#a-complete-list-of-hackintosh-kexts","title":"A Complete List of Hackintosh Kexts?","text":"<p>Since there are too many and too complicated Kexts, the workload is too large. I will directly post some addresses of resources, and you can check them by yourselves:</p> <ul> <li>Commonly - used Kexts of OpenCore</li> <li>Some relatively old Kexts</li> <li>Some Kexts based on Lilu </li> </ul> <p>If you are a patient person, if you sort out a complete list of Kexts, welcome to submit a PR.</p>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/","title":"Kexts fine - tuning","text":"<p>Kexts also have order requirements, and some Kexts may conflict and cause the system to be unable to boot. This part is also rather complicated. Since the developers of Kexts are different, I can only try my best to describe it. If the documentation description is not clear, you can watch the corresponding tutorial videos on Bilibili.</p>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#automatically-adjust-the-order-of-kexts","title":"Automatically Adjust the Order of Kexts","text":"<p>When ProperTree performs the operation of Cmd/Ctrl + Shift + R or uses the graphical menu to select \u300cClean Snapshot\u300d, it will automatically adjust the loading order of Kexts and disable the conflicting Kexts.</p> <p>Actually, OpenCore Configurator also has this function. Click \u300cCheck Kexts\u300d at the bottom:</p> <p> </p>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#manually-adjust-the-order-of-kexts","title":"Manually Adjust the Order of Kexts","text":"<p>The order automatically adjusted by the software is not necessarily the most accurate because it doesn't know which messy Kexts you have used. So sometimes we need to manually adjust the loading order of Kexts.</p>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#opencore-configurator","title":"OpenCore Configurator","text":"<p>The operation of OpenCore Configurator is relatively simple. Select the Kext you want to operate, and then directly drag it up and down to adjust the order:</p> <p> </p>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#ocauxiliarytools","title":"OCAuxiliaryTools","text":"<p>Although OCAuxiliaryTools can't be directly dragged, you can use the \u300cup\u300d and \u300cdown\u300d arrow icons at the bottom to adjust the loading order of Kexts:</p> <p> </p>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#adjustment-details-of-common-kexts","title":"Adjustment Details of Common Kexts","text":""},{"location":"Preparation/Kexts%20fine%20-%20tuning/#loading-order-of-essential-kexts","title":"Loading Order of Essential Kexts","text":"<ol> <li>Lilu.kext</li> <li>VirtualSMC.kext</li> <li>WhateverGreen.kext</li> <li>SMCBatteryManager.kext (not needed for desktops)</li> <li>SMCLightSensor.kext        (not needed for desktops)</li> <li>SMCProcessor.kext </li> <li>SMCSuperIO.kext</li> <li>AppleALC.kext</li> </ol>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#loading-order-of-bcm-broadcom-wireless-and-bluetooth","title":"Loading Order of BCM Broadcom Wireless and Bluetooth","text":"<ol> <li>AirportBrcmFixup.kext</li> <li>BrcmBluetoothInjector.kext</li> <li>BrcmFirmwareData.kext</li> <li>BrcmPatchRAM3.kext</li> </ol>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#detailed-adjustment-of-bcm-broadcom-wireless","title":"Detailed Adjustment of BCM Broadcom Wireless","text":"<p>Directly loading AirportBrcmFixup.kext will actually load 3 Kexts:</p> <ol> <li>AirportBrcmFixup.kext</li> <li>AirportBrcmFixup.kext/Contents/PlugIns/AirPortBrcmNIC_Injector.kext</li> <li>AirportBrcmFixup.kext/Contents/PlugIns/AirPortBrcm4360_Injector.kext</li> </ol> <p>Among them, when installing Big Sur and later versions, AirPortBrcm4360_Injector.kext will have problems by default, so we need to set the maximum kernel to 19.9.9, which may reduce some abnormal errors:</p> <p> </p> <p>In addition, for network cards with the BCM94352Z chip, it is often necessary to add <code>brcmfx - driver = 2</code> in the boot item to solve some sleep or other mysterious problems:</p> <p> </p>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#loading-order-of-intel-wireless-and-bluetooth","title":"Loading Order of Intel Wireless and Bluetooth","text":"<ol> <li>AirportItlwm.kext</li> <li>IntelBluetoothInjector.kext</li> <li>IntelBluetoothFirmware.kext</li> </ol>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#loading-order-of-laptop-ps2-keyboard-mouse-and-touchpad","title":"Loading Order of Laptop PS2 Keyboard, Mouse, and Touchpad","text":"<ol> <li>VoodooPS2Controller.kext</li> <li>VoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Keyboard.kext</li> <li>VoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Mouse.kext</li> <li>VoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Trackpad.kext</li> <li>VoodooPS2Controller.kext/Contents/PlugIns/VoodooInput.kext</li> <li>BrightnessKeys.kext (function brightness adjustment key driver, not always necessary)</li> </ol>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#loading-order-of-laptop-i2c-and-ps2-cooperative-drive-touchpad","title":"Loading Order of Laptop I2C and PS2 Cooperative Drive Touchpad","text":"<ol> <li>VoodooI2C.kext/Contents/PlugIns/VoodooI2CServices.kext</li> <li>VoodooI2C.kext/Contents/PlugIns/VoodooGPIO.kext</li> <li>VoodooI2C.kext</li> <li>VoodooI2CHID.kext</li> <li>VoodooPS2Controller.kext</li> <li>VoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Keyboard.kext</li> <li>VoodooI2C.kext/Contents/PlugIns/VoodooInput.kext</li> <li>BrightnessKeys.kext  (function brightness adjustment key driver, not always necessary)</li> </ol> <p>A small tip: Since both IC2 and PS2 have VoodooInput.kext, if the VoodooInput.kext of PS2 is not deleted or disabled, it will cause a kernel conflict during startup, resulting in system freeze and inability to boot.</p>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#loading-order-of-laptop-ps2smart-keyboard-driver","title":"Loading Order of Laptop PS2Smart Keyboard Driver","text":"<ol> <li>ApplePS2SmartTouchPad.kext/Contents/PlugIns/ApplePS2Controller.kext</li> <li>ApplePS2SmartTouchPad.kext/Contents/PlugIns/ApplePS2Keyboard.kext</li> <li>ApplePS2SmartTouchPad.kext</li> </ol>"},{"location":"Preparation/Kexts%20fine%20-%20tuning/#detailed-adjustment-of-laptop-voodoormikext-and-voodoosmbuskext","title":"Detailed Adjustment of Laptop VoodooRMI.kext and VoodooSMBus.kext","text":"<p>First, make sure that the VoodooPS2 configuration is as follows:</p> <ul> <li>Enable</li> <li>VoodooPS2Controller.kext</li> <li>VoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Mouse.kext</li> <li>VoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Keyboard.kext</li> <li>VoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Trackpad.kext</li> <li>Disable</li> <li>VoodooPS2Controller.kext/Contents/PlugIns/VoodooInput.kext</li> </ul> <p>Then enable and load the basic RMI configuration:</p> <ul> <li>VoodooRMI.kext</li> <li>VoodooRMI.kext/Contents/PlugIns/VoodooInput.kext</li> </ul> <p>If you have an SMBus touchpad, you also need to load:</p> <ul> <li>VoodooSMBus.kext</li> <li>VoodooRMI.kext/Contents/PlugIns/RMISMBus.kext</li> </ul> <p>If you have an I2C touchpad, you also need to load:</p> <ul> <li>VoodooI2C.kext</li> <li>VoodooRMI.kext/Contents/PlugIns/RMII2C.kext</li> </ul>"},{"location":"Preparation/OC%20editor/","title":"OC Editor","text":"<p>Since the integrated graphics configuration file of OpenCore ends with .plist, a specialized editor is required for editing. The advantages and disadvantages of common OC editors are as follows:</p> Editor Name Advantages Disadvantages ProperTree Powerful, professional, cross - platform High difficulty in getting started OpenCore Configurator Powerful and simple Only available for Mac version OCAuxiliaryTools Cross - platform and simple ~~The user experience needs improvement~~ It has become more and more powerful currently <p>My suggestions are as follows:</p> <ol> <li>If you have a Mac system available, OpenCore Configurator is the first choice.</li> <li>For novice Windows users, OCAuxiliaryTools is recommended.</li> </ol> <p>The following is a brief introduction to the installation and usage methods of these editors respectively.</p> <p>Reminder: Different versions of OC configurations require the use of corresponding versions of OC editors, otherwise mysterious problems may occur.</p>"},{"location":"Preparation/OC%20editor/#propertree","title":"ProperTree","text":"<p>The official project address is: https://github.com/corpnewt/ProperTree</p>"},{"location":"Preparation/OC%20editor/#usage-on-the-macos-platform","title":"Usage on the macOS Platform","text":"<p>Due to the fact that the macOS comes with a Python environment, double - click on ProperTree.command to open the program:</p> <p> </p> <p>Some main operations can be completed through the macOS menu.</p>"},{"location":"Preparation/OC%20editor/#usage-on-the-windows-platform","title":"Usage on the Windows Platform","text":"<p>Windows 10 does not come with a Python environment by default, so you first need to install the Python environment. First, download Python3. Here, a more stable version of Python 3.8 is recommended. The official download address is: https://www.python.org/ftp/python/3.8.10/python - 3.8.10 - amd64.exe</p> <p>When installing, remember to check: Add Python 3.8 to PATH:</p> <p> </p> <p>This will automatically configure the environment variables, and we won't need to configure them manually later. Using the default path or a custom path is fine. I'm a bit lazy and used the default \u300cInstall Now\u300d. If you want to use a custom path, it's best that this path doesn't contain Chinese characters, otherwise some mysterious problems may occur.</p> <p>To verify whether the installation is successful, open the command line and enter:</p> <pre><code>python - V\n</code></pre> <p>You can see the Python version information indicating success:</p> <p> </p> <p>After it is indeed installed successfully, double - click on the ProperTree.bat file to open the program:</p> <p> </p> <p>Similarly, some basic operations can be completed through File in the menu.</p>"},{"location":"Preparation/OC%20editor/#opencore-configurator","title":"OpenCore Configurator","text":"<p>The download address of the latest version of OpenCore Configurator is:</p> <p>https://mackie100projects.altervista.org/download - opencore - configurator/</p> <p>Find the configuration file you want to edit, right - click, select \u300cOpen with\u300d, and then choose \u300cOpenCore Configurator\u300d:</p> <p> </p> <p>The main interface after opening is as follows:</p> <p> </p>"},{"location":"Preparation/OC%20editor/#ocauxiliarytools","title":"OCAuxiliaryTools","text":"<p>OCAuxiliaryTools is recommended to be used in Windows to replace ProperTree, because there is a better OpenCore Configurator with a better user experience available under macOS.</p> <p>The official project address is: https://github.com/ic005k/OCAuxiliaryTools</p> <p>The Chinese instructions are: https://github.com/ic005k/OCAuxiliaryTools/blob/master/READMe - cn.md</p> <p>Download the corresponding Windows version. The main interface is as follows:</p> <p> </p> <p>So far, the introduction of OC editors is completed. For detailed usage methods, you can refer to the corresponding B - station tutorial video of this tutorial. Next, it's time to prepare to configure the EFI file.</p>"},{"location":"Preparation/OC%20file%20structure/","title":"Original file structure","text":""},{"location":"Preparation/OC%20file%20structure/#original-file-structure","title":"Original File Structure","text":"<p>The official project address of OpenCore boot is: https://github.com/acidanthera/OpenCorePkg</p> <p>The download address for viewing the latest version is: https://github.com/acidanthera/OpenCorePkg/releases</p> <p>As of September 17th, 2021, when this article was written, the latest OC boot version was 0.7.3. So we downloaded OpenCore - 0.7.3 - RELEASE.zip and unzipped it, and then we got the original files of OC.</p> <p> </p> <p>The functions of these directories are briefly described as follows:</p> <ul> <li>Docs: Stores the latest OC configuration documents, version update changes, ACPI sample files, and the Sample.list configuration file template.</li> <li>IA32: Contains the EFI boot files used for 32 - bit old - fashioned machines.</li> <li>Utilities: The small tools integrated by OC official are placed here.</li> <li>X64: Contains the EFI boot files used for current mainstream 64 - bit machines.</li> </ul> <p>Now that we know the general directory structure, let's introduce the details of the files in these directories.</p>"},{"location":"Preparation/OC%20file%20structure/#docs","title":"Docs","text":"<pre><code>~/Downloads/OpenCore - 0.7.3 - RELEASE/Docs\n.\n\u251c\u2500\u2500 AcpiSamples          # ACPI sample files\n\u2502   \u251c\u2500\u2500 Binaries         # Compiled ACPI files\n\u2502   \u2502   \u251c\u2500\u2500 SSDT - ALS0.aml\n\u2502   \u2502   \u251c\u2500\u2500 SSDT - AWAC - DISABLE.aml\n\u2502   \u2502  ...\n\u2502   \u2514\u2500\u2500 Source           # Original ACPI files\n\u2502       \u251c\u2500\u2500 SSDT - ALS0.dsl\n\u2502       \u251c\u2500\u2500 SSDT - AWAC - DISABLE.dsl\n\u2502      ...\n\u251c\u2500\u2500 Changelog.md         # Version update log\n\u251c\u2500\u2500 Configuration.pdf    # The official configuration document of the current version\n\u251c\u2500\u2500 Differences.pdf      # The changed parts compared with the previous version\n\u251c\u2500\u2500 Sample.plist         # The configuration file template of the current version\n\u2514\u2500\u2500 SampleCustom.plist   # The configuration file template of the current version\n</code></pre> <p>The files here are quite easy to understand. Besides, there seem to be two configuration file templates, namely Sample.plist and SampleCustom.plist. But I compared them and found that there was basically no difference between them. Theoretically, both of them can be used, and we generally use the <code>Sample.plist</code> configuration file more often.</p>"},{"location":"Preparation/OC%20file%20structure/#utilities","title":"Utilities","text":"<p>This directory contains some small tools of OC official. The functions of these small tools are introduced as follows:</p> <ul> <li>acdtinfo: Detects the installation status of kexts on the current machine.</li> <li>ACPIe: Generates useful ACPI lookup and tracking for troubleshooting.</li> <li>CreateVault: Contains an RSA key - generation tool and a script for creating a Valut.</li> <li>disklabel: A small label - generation tool, which is generally not needed.</li> <li>icnspack: A small icns synthesis and production tool, which can be used when you want to customize the theme by yourself.</li> <li>kpdescribe: Used for debugging and troubleshooting, and for restoring stack traces.</li> <li>LegacyBoot: Tools and scripts for simulating the UEFI environment on old computers.</li> <li>LogoutHook: An enhanced script used to simulate NVRAM saving.</li> <li>macrecovery: A script for creating a boot disk.</li> <li>macserial: A serial - number - generation tool.</li> <li>ocpasswordgen: An OpenCore password - data - generation tool.</li> <li>ocvalidate: Checks whether the syntax of config.list is correct or not.</li> </ul>"},{"location":"Preparation/OC%20file%20structure/#efi","title":"EFI","text":"<p>Finally, we come to the important part, the EFI part. The functions of the main EFI folders are explained as follows:</p> <pre><code>~/Downloads/OpenCore - 0.7.3 - RELEASE/X64/EFI\n.\n\u251c\u2500\u2500 BOOT                          # Boot folder\n\u2502   \u2514\u2500\u2500 BOOTx64.efi               # Boot file\n\u2514\u2500\u2500 OC                            # OC folder\n    \u251c\u2500\u2500 ACPI                      # ACPI storage folder\n    \u2502   \u251c\u2500\u2500 SSDT - EC.aml\n    \u2502   \u251c\u2500\u2500 SSDT - PLUG.aml\n    \u2502   \u251c\u2500\u2500 SSDT - PNLF.aml\n    \u2502      ...\n    \u251c\u2500\u2500 Drivers                   # OC drivers folder\n    \u2502   \u251c\u2500\u2500 AudioDxe.efi\n    \u2502   \u251c\u2500\u2500 CrScreenshotDxe.efi\n    \u2502   \u251c\u2500\u2500 HiiDatabase.efi\n    \u2502      ...\n    \u251c\u2500\u2500 Kexts                     # Folder for storing kernel extension kexts\n    \u2502   \u251c\u2500\u2500 AppleALC.kext\n    \u2502   \u251c\u2500\u2500 Lilu.kext\n    \u2502   \u251c\u2500\u2500 WhateverGreen.kext\n    \u2502      ...\n    \u251c\u2500\u2500 OpenCore.efi              # The core file of OC\n    \u251c\u2500\u2500 Resources                 # The theme style of OC\n    \u2502   \u251c\u2500\u2500 Audio\n    \u2502   \u251c\u2500\u2500 Font\n    \u2502   \u251c\u2500\u2500 Image\n    \u2502   \u2514\u2500\u2500 Label\n    \u2514\u2500\u2500 Tools                     # OC small - tools folder\n        \u251c\u2500\u2500 BootKicker.efi\n        \u251c\u2500\u2500 ChipTune.efi\n        \u251c\u2500\u2500 CleanNvram.efi\n           ...\n</code></pre>"},{"location":"Preparation/OC%20file%20structure/#boot","title":"BOOT","text":"<p>The BOOT boot folder contains the BOOTx64.ef boot file.</p>"},{"location":"Preparation/OC%20file%20structure/#ocacpi","title":"OC/ACPI","text":"<p>The compiled SSDT files are stored here, and the format is all.aml. For detailed information about SSDT, you can refer to the following section</p>"},{"location":"Preparation/OC%20file%20structure/#ocdrivers","title":"OC/Drivers","text":"<p>Some driver files are placed here, and these drivers all end with the.efi suffix. The OC official default driver files and their descriptions are as follows:</p> <ul> <li>AudioDxe.efi: Used to play the \"Duang\" sound during startup, just like a genuine Mac.</li> <li>CrScreenshotDxe.efi: The screenshot - driving of the OC boot interface. Pressing F10 will save a screenshot of the current interface to the root directory of the EFI partition.</li> <li>HiiDatabase.efi: Used to support UEFI font rendering, and it is generally not needed after the fourth - generation Core.</li> <li>NvmExpressDxe.efi: Used to enable old motherboards to support NVME Express devices, and it is generally not needed after the fourth - generation Core.</li> <li>OpenCanopy.efi: A necessary driver for using a graphical OC theme.</li> <li>OpenHfsPlus.efi: A file - system driver, used to support and recognize the HFS + disk format.</li> <li>OpenLinuxBoot.efi: A newly - added driver in OC 0.7.3, used to boot the Linux system.</li> <li>OpenPartitionDxe.efi: A partition - management - driver program. Used to load the DMG image of the old - version macOS.</li> <li>OpenRuntime.efi: A necessary and powerful core driver of OC. Just remember that this is a necessary driver.</li> <li>OpenUsbKbDxe.efi: A USB keyboard driver, used to simulate Apple hotkeys, and it is an equivalent solution to KeySupport.</li> <li>Ps2KeyboardDxe.efi: A PS/2 keyboard driver. The PS/2 keyboard is too old. I haven't seen it for many years.</li> <li>Ps2MouseDxe.efi: A PS/2 mouse driver. It's also too old, and I haven't seen it for many years.</li> <li>UsbMouseDxe.efi: A USB mouse driver. Some virtual machines need to rely on this driver to use the mouse on the boot interface.</li> <li>XhciDxe.efi: The XHCI USB controller driver. Basically, most firmwares have had this driver since the second - generation Core.</li> </ul>"},{"location":"Preparation/OC%20file%20structure/#ockexts","title":"OC/Kexts","text":"<p>Some Kexts kernel - extension files are placed here, and the format is all.kext. For detailed information about Kexts, you can refer to the following section</p>"},{"location":"Preparation/OC%20file%20structure/#resources","title":"Resources","text":"<p>The third - party theme files of OC are placed here. Actually, I have always been using the official theme, which is quite simple.</p> <p> </p>"},{"location":"Preparation/OC%20file%20structure/#tools","title":"Tools","text":"<p>The OC small - tools folder. Tools like CleanNvram.efi and ResetSystem.efi are some of them:</p> <p> </p> <p>The official OC - built - in tool files and their descriptions are as follows:</p> <ul> <li>BootKicker.efi: Calls the original Apple - native boot - switching GUI and is for genuine Macs. Hackintosh does not support it.</li> <li>ChipTune.efi: Tests the BeepGen protocol and generates audio signals of different styles and lengths.</li> <li>CleanNvram.efi: An NVRAM - cleaning tool. Actually, the NVRAM - cleaning function that OC comes with is already sufficient.</li> <li>ControlMsrE2.efi: Checks the consistency of CFG locking (MSR 0xE2 write - protection) of all kernels and changes such hidden options.</li> <li>CsrUtil.efi: Simply implements the SIP - related functions of Apple's csrutil.</li> <li>GopStop.efi: Stops the graphics card GOP and uses a simple scenario to test the GraphicsOutput protocol for troubleshooting.</li> <li>KeyTester.efi: Tests keyboard input in SimpleText mode.</li> <li>MmapDump.efi: The necessity of the ProvideCustomSlide option.</li> <li>OpenControl.efi: Provides NVRAM protection for other tools so that full NVRAM access can be obtained when booting from OC.</li> <li>OpenShell.efi: The UEFI Shell of OpenCore configuration.</li> <li>ResetSystem.efi: A utility used to perform a system reset.</li> <li>RtcRw.efi: A utility used to read and write RTC (CMOS) memory.</li> <li>TpmInfo.efi: Checks the Intel PTT (Platform Trust Technology) function on the platform and, if enabled, allows the use of fTPM 2.0.</li> </ul> <p>Well, that's almost all for the introduction of the OpenCore file structure. Now, let's start to learn the relevant knowledge of ACPI.</p>"},{"location":"Preparation/Preliminary%20configuration/","title":"Preliminary configuration","text":""},{"location":"Preparation/Preliminary%20configuration/#adjust-the-folder-structure","title":"Adjust the Folder Structure","text":"<p>All the screenshots in this part are from my open - source project of Asrock Z490. Friends who are interested can download and study by themselves.</p>"},{"location":"Preparation/Preliminary%20configuration/#copy-and-rename-sampleplist","title":"Copy and Rename Sample.plist","text":"<p>First, copy the Sample.plist in the Doc directory to the EFI/OC/ directory and rename it to config.plist.</p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#streamline-drivers","title":"Streamline Drivers","text":"<p>Only a few necessary ones are left in Drivers. For details, you can refer to the previous Drivers Explanation section.</p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#streamline-tools","title":"Streamline Tools","text":"<p>I'm not used to using Tools, so all the tools in it are deleted. For the detailed functions of the files in Tools, you can refer to the previous OC File Structure section: </p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#place-your-ssdt","title":"Place Your SSDT","text":"<p>According to the previous Prepare ACPI part, put your prepared SSDT in here: </p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#place-your-kexts","title":"Place Your Kexts","text":"<p>According to the previous Prepare Kexts part, put your prepared Kexts in here: </p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#replace-theme-files","title":"Replace Theme Files","text":"<p>OC has no theme by default. You can download the official simple and classic theme and replace the default Resources folder:</p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#loading-files-of-configplist","title":"Loading Files of config.plist","text":"<p>The difference between OC and Clover is that for Clover, you only need to put the files in the right place, but for OC, you not only need to put them but also load them manually.</p> <p>The three editors recommended in the previous chapter can all load automatically. The following is an introduction to their loading methods one by one.</p>"},{"location":"Preparation/Preliminary%20configuration/#propertree","title":"ProperTree","text":"<p>After running ProperTree, open config.plist by pressing Cmd/Ctrl + O and selecting the file on <code>config.plist</code>. After opening the configuration, press Cmd/Ctrl + Shift + R or use the graphical menu to select \u300cClean Snapshot\u300d:</p> <p> </p> <p>Then select the OC folder to be added and cleaned automatically:</p> <p> </p> <p>After completion, you can see the information of the previously configured SSDT, Kexts, and Drivers in config.plist:  </p> <p> </p> <p>Finally, select save. </p>"},{"location":"Preparation/Preliminary%20configuration/#opencore-configurator","title":"OpenCore Configurator","text":"<p>Temporarily, no one - click automatic operations such as adding ACPI, Drivers, Kexts, Tools, etc. have been found in OpenCore Configurator and OCAuxiliaryTools. So we can only add these files manually.</p>"},{"location":"Preparation/Preliminary%20configuration/#add-ssdts","title":"Add SSDTs","text":"<p>Before adding, you need to delete the SSDTs in the original template file. The operation is very simple. Select all and click the \u300cminus\u300d in the lower right corner to delete:</p> <p> </p> <p>Then select \u300cSnapshot Add\u300d in the lower left corner, select all the SSDT files in your ACPI folder, and open it to complete the addition operation:</p> <p> </p> <p>The effect after adding is as follows:</p> <p> </p> <p>You can see that the path information is automatically added and all are automatically enabled. </p>"},{"location":"Preparation/Preliminary%20configuration/#add-kexts","title":"Add Kexts","text":"<p>Adding Kexts is a similar operation. I won't repeat it here. First, delete the ones that come with the sample, and then add by snapshot. Select the Kexts folder:</p> <p> </p> <p>Of course, there are some techniques such as order for Kexts loading. These techniques will be introduced in detail in the next chapter. </p>"},{"location":"Preparation/Preliminary%20configuration/#add-drivers","title":"Add Drivers","text":"<p>Adding Drivers is also a similar operation:</p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#add-tools","title":"Add Tools","text":"<p>Adding Tools is also a similar operation, but it is a little bit hidden. For the specific addition entry, refer to the following figure:</p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#ocauxiliarytools","title":"OCAuxiliaryTools","text":"<p>The operation of OCAuxiliaryTools is similar to that of OpenCore Configurator. Basically, you can get started quickly. If you can't get started quickly, it must be that the graphical interface is not user - friendly enough and the user experience is not good enough.</p>"},{"location":"Preparation/Preliminary%20configuration/#add-ssdts_1","title":"Add SSDTS","text":"<p>Delete the SSDT that comes with the template file, and then select all the SSDT files in your ACPI folder and open it to complete the addition operation:</p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#add-kexts_1","title":"Add Kexts","text":"<p>Adding Kexts is also a similar operation. However, OCAuxiliaryTools doesn't support adding the whole Kexts folder. The plus sign in the lower left corner can only add them one by one manually. For efficiency, you can select all the Kexts files and then drag them into the Kernel in OCAuxiliaryTools:</p> <p> </p> <p>Of course, there are some techniques such as order for Kexts loading. These techniques will be introduced in detail in the next chapter. </p>"},{"location":"Preparation/Preliminary%20configuration/#add-drivers_1","title":"Add Drivers","text":"<p>Adding Drivers is also a similar operation:</p> <p> </p>"},{"location":"Preparation/Preliminary%20configuration/#add-tools_1","title":"Add Tools","text":"<p>Adding Tools is also a similar operation, but it is a little bit hidden. For the specific addition entry, refer to the following figure:</p> <p> </p> <p>So far, the ACPI, Kexts and other files we collected before have been manually loaded. The following chapter will start to introduce the basic loading order of common Kexts.</p>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/","title":"AMD discrete graphics card optimization without driver installation","text":""},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#temperature-sensor","title":"Temperature Sensor","text":"<p>Starting from the Radeon VII, Apple stopped directly reporting temperature, and kexts are required to intervene and implement this function. For Vega 10 and earlier versions, other tools can already display the GPU temperature without an additional kext.</p> <p>Address of the required item: https://github.com/aluveitie/RadeonSensor</p> <p>It supports all GPUs from the Radeon HD 7000 series to the RX 6000 series.</p> <p>First, let's take a look at several files downloaded in this project:</p> <ul> <li>RadeonSensor.kext: Required for reading the GPU temperature, and Lilu is needed.</li> <li>SMCRadeonGPU.kext: Can be optionally used to export the GPU temperature to VirtualSMC for monitoring tools to read.</li> <li>RadeonGadget.app: Displays the GPU temperature in the status bar, and only RadeonSensor.kext needs to be loaded.</li> </ul> <p>The usage method is also relatively simple. Copy RadeonSensor.kext and SMCRadeonGPU.kext to the EFI/OC/Kexts directory, and then enable them in config.plist:</p> <p> </p> <p>Reboot the computer for it to take effect.</p> <ul> <li>The GPU temperature can be normally viewed using Sensei:</li> </ul> <p> </p> <ul> <li>The GPU temperature can also be normally viewed using iStat Menus:</li> </ul> <p> </p> <p>If you don't want to install SMCRadeonGPU.kext, you can also view the temperature using the included app, although it's a bit ugly:</p> <p> </p>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#performance-optimization","title":"Performance Optimization","text":""},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#preface","title":"Preface","text":"<p>In the era of macOS 10.15 Catalina, third - party discrete graphics cards could be disguised as professional W - series cards of genuine Macs by injecting data of genuine Macs (such as EFI Version and other information), resulting in a huge improvement in performance benchmarks. However, after macOS 11.X Big Sur, Apple officially banned this improvement method. So currently, there aren't many good ways to improve the performance of AMD discrete graphics cards that don't require drivers.</p> <p>However, there's always a way out. After a large number of tests, I finally found a parameter that can significantly improve performance. Although the improvement is not as obvious as before, it still has some effect. I'll explain in detail below.</p>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#performance-testing","title":"Performance Testing","text":"<p>Because Geekbench5 benchmarks are too preliminary, under the same configuration, the benchmarking errors are large and have no reference value at all. So we need a stable testing environment to record the performance of graphics cards with different configurations.</p>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#environmental-information","title":"Environmental Information","text":"<p>Some environmental information for this test: macOS 12.2.1 + i7 - 10700 + 64GB 2667MHz memory + Sapphire RX 6600XT Platinum Edition</p> Software Name Version Information Final Cut Pro 10.6.1 Compressor 4.6"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#new-project-creation","title":"New Project Creation","text":"<p>First, click \"File\" - \"New\" - \"Project\" to create a new 4K 60 project. Then, in the \"Subtitles and Generators\" bar, select \"Generator\", search for the \"Cloud\" generator, and then drag it to the timeline:</p> <p></p>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#export-testing","title":"Export Testing","text":"<p>Because Final Cut Pro may render in the background by itself, here we select \"File\" - \"Send to Compressor\" - \"New Batch\":</p> <p> </p> <p>Then select \"YouTube and Facebook\" - \"Highest 4K\" on the left and drag it to the project sent from Final Cut Pro:</p> <p> </p> <p>Finally, click \"Start Batch\" in the lower - right corner, and finally we can see the entire export time:</p> <p> </p> <p>The exported video is by default in the \"Movies\" folder under the user folder:</p> <p> </p>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#final-results","title":"Final Results","text":"Description 1st Time 2nd Time Average Time Graphics Card Load Imitating W6900X + Unlocking Power Limit + Overclocking Video Memory 04 min 22 sec 04 min 19 sec 04 min 21 sec 27% (Integrated graphics not working) Imitating W6900X 04 min 23 sec 04 min 21 sec 04 min 22 sec 27% (Integrated graphics not working) RX 6600XT + EFI Version + Scattered Information 04 min 20 sec 04 min 19 sec 04 min 20 sec 27% (Integrated graphics not working) RX 6600XT Native Data 04 min 39 sec 04 min 41 sec 04 min 40 sec 19% (Integrated graphics working slightly) Incorrect ROM Number, EFI + Unlocking Power Limit + Overclocking Video Memory 04 min 43 sec 04 min 46 sec 04 min 45 sec 19% (Integrated graphics working slightly) RX 6600XT + Only EFI Version 04 min 44 sec 04 min 45 sec 04 min 45 sec 20% (Integrated graphics working slightly) RX 6600XT + EFI Version + AAPL,slot - name 04 min 16 sec 04 min 14 sec 04 min 15 sec 22% (Integrated graphics not working) RX 6600XT + AAPL,slot - name 04 min 14 sec 04 min 14 sec 04 min 15 sec 22% (Integrated graphics not working) <p>The obvious difference in load occupancy:</p> <p> </p>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#test-conclusions","title":"Test Conclusions","text":"<p>Here are several conclusions of this test:</p> <ol> <li>Don't randomly inject the ROM of other graphics cards into your graphics card. Even with data information of genuine Macs, the improvement is not significant.</li> <li>When the integrated graphics participates in the export, the occupancy of the discrete graphics card will be relatively low, and the export time will be relatively long at this time.</li> <li>Unlocking the power limit + overclocking the video memory doesn't seem to be of much use, and the export time will not be shortened as a result.</li> <li><code>AAPL,slot - name</code> is a key parameter. Injecting this parameter can shorten the export time. The reason is unknown. Big shots who know are welcome to leave a message.</li> </ol>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#final-score","title":"Final Score","text":"<p>In the case of the Sapphire RX 6600XT Platinum Edition + injecting AAPL,slot - name:</p> <p> </p> <p>You can directly find the path of your own graphics card in the \"PCIe\" tab of the Hackintool software and directly copy the device path:</p> <p> </p> <p>After this operation, the Geekbench5 benchmark score has significantly increased. The highest benchmark score is as follows:</p> <p> </p> <p> </p> <p>Just take the Geekbench5 benchmark as entertainment. Don't take it too seriously.</p> <p>Mainly, the 4K export time of Final Cut Pro + Compressor can be optimized from the slowest 04 min 41 sec to 04 min 14 sec, with a performance improvement of about 10%. All in all, it's still very cost - effective.</p> <p>The comments below this chapter may also be of reference value to everyone. Please pay attention and try them out by yourself.</p>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#macos-1231","title":"macOS 12.3.1","text":"<p>After macOS 12.3.1, many netizens reported that their graphics cards have been negatively optimized and the benchmark scores have dropped significantly. I'll also add the imitation methods for the new system here.</p> <p>Just directly imitate the OCC device properties. Take the RX 5300M as an example:</p> <p> </p> <p>Detailed injection parameters can refer to the details below.</p>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#radeon-5300","title":"Radeon 5300","text":"<pre><code> &lt;key&gt;DeviceProperties&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Add&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;Write the actual device path of your graphics card here (it can be seen in Hackintool PCIE)&lt;/key&gt;\n            &lt;dict&gt;\n                &lt;key&gt;@0,name&lt;/key&gt;\n                &lt;string&gt;ATY,Keelback&lt;/string&gt;\n                &lt;key&gt;@1,name&lt;/key&gt;\n                &lt;string&gt;ATY,Keelback&lt;/string&gt;\n                &lt;key&gt;@2,name&lt;/key&gt;\n                &lt;string&gt;ATY,Keelback&lt;/string&gt;\n                &lt;key&gt;@3,name&lt;/key&gt;\n                &lt;string&gt;ATY,Keelback&lt;/string&gt;\n                &lt;key&gt;ATY,EFIVersion&lt;/key&gt;\n                &lt;string&gt;01.01.190&lt;/string&gt;\n                &lt;key&gt;device_type&lt;/key&gt;\n                &lt;string&gt;ATY,KeelbackParent&lt;/string&gt;\n            &lt;/dict&gt;\n        &lt;/dict&gt;\n    &lt;/dict&gt;\n</code></pre>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#radeon-5500","title":"Radeon 5500","text":"<pre><code> &lt;key&gt;DeviceProperties&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Add&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;Write the actual device path of your graphics card here (it can be seen in Hackintool PCIE)&lt;/key&gt;\n            &lt;dict&gt;\n                &lt;key&gt;@0,name&lt;/key&gt;\n                &lt;string&gt;ATY,Python&lt;/string&gt;\n                &lt;key&gt;@1,name&lt;/key&gt;\n                &lt;string&gt;ATY,Python&lt;/string&gt;\n                &lt;key&gt;@2,name&lt;/key&gt;\n                &lt;string&gt;ATY,Python&lt;/string&gt;\n                &lt;key&gt;@3,name&lt;/key&gt;\n                &lt;string&gt;ATY,Python&lt;/string&gt;\n                &lt;key&gt;ATY,EFIVersion&lt;/key&gt;\n                &lt;string&gt;01.01.231&lt;/string&gt;\n                &lt;key&gt;device_type&lt;/key&gt;\n                &lt;string&gt;ATY,PythonParent&lt;/string&gt;\n            &lt;/dict&gt;\n        &lt;/dict&gt;\n    &lt;/dict&gt;\n</code></pre>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#radeon-5700","title":"Radeon 5700","text":"<pre><code>&lt;key&gt;DeviceProperties&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Add&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;Write the actual device path of your graphics card here (it can be seen in Hackintool PCIE)&lt;/key&gt;\n            &lt;dict&gt;\n                &lt;key&gt;@0,name&lt;/key&gt;\n                &lt;string&gt;ATY,Adder&lt;/string&gt;\n                &lt;key&gt;@1,name&lt;/key&gt;\n                &lt;string&gt;ATY,Adder&lt;/string&gt;\n                &lt;key&gt;@2,name&lt;/key&gt;\n                &lt;string&gt;ATY,Adder&lt;/string&gt;\n                &lt;key&gt;@3,name&lt;/key&gt;\n                &lt;string&gt;ATY,Adder&lt;/string&gt;\n                &lt;key&gt;AAPL00,DualLink&lt;/key&gt;\n                &lt;data&gt;\n                AQAAAA==\n                &lt;/data&gt;\n                &lt;key&gt;ATY,Card#&lt;/key&gt;\n                &lt;string&gt;102 - D32200 - 00&lt;/string&gt;\n                &lt;key&gt;ATY,Copyright&lt;/key&gt;\n                &lt;string&gt;Copyright AMD Inc. All Rights Reserved. 2005 - 2019&lt;/string&gt;\n                &lt;key&gt;ATY,DeviceName&lt;/key&gt;\n                &lt;string&gt;W5700X&lt;/string&gt;\n                &lt;key&gt;ATY,EFIVersion&lt;/key&gt;\n                &lt;string&gt;01.01.190&lt;/string&gt;\n                &lt;key&gt;ATY,FamilyName&lt;/key&gt;\n                &lt;string&gt;Radeon Pro&lt;/string&gt;\n                &lt;key&gt;ATY,Rom#&lt;/key&gt;\n                &lt;string&gt;113 - D3220E - 190&lt;/string&gt;\n                &lt;key&gt;CAIL_EnableLBPWSupport&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CAIL_EnableMaxPlayloadSizeSync&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_CAA&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_FB_LIMIT&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_FORCE_MAX_DPS&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_GEN_FLAGS&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_NO_MST&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_NVV&lt;/key&gt;\n                &lt;integer&gt;2&lt;/integer&gt;\n                &lt;key&gt;CFG_PAA&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_PULSE_INT&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_TPS1S&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_TRANS_WSRV&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_UFL_CHK&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_UFL_STP&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_AGDC&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_CP2&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_CPSTATUS&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_DPT&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_FBC&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_FBWRKLP&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_FEDS&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_LPT&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_PSR&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_SCANOUT&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_SRRB&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_STUTTER&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;CFG_USE_TCON&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;PP_DisableDIDT&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;PP_DisablePowerContainment&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;PP_DisableVoltageIsland&lt;/key&gt;\n                &lt;integer&gt;0&lt;/integer&gt;\n                &lt;key&gt;PP_FuzzyFanControl&lt;/key&gt;\n                &lt;integer&gt;1&lt;/integer&gt;\n                &lt;key&gt;device_type&lt;/key&gt;\n                &lt;string&gt;ATY,AdderParent&lt;/string&gt;\n                &lt;key&gt;hda - gfx&lt;/key&gt;\n                &lt;string&gt;onboard - 1&lt;/string&gt;\n                &lt;key&gt;model&lt;/key&gt;\n                &lt;string&gt;Radeon Pro W5700X&lt;/string&gt;\n                &lt;key&gt;name&lt;/key&gt;\n                &lt;string&gt;ATY_GPU&lt;/string&gt;\n            &lt;/dict&gt;\n        &lt;/dict&gt;\n    &lt;/dict&gt;\n</code></pre>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#radeon-6600","title":"Radeon 6600","text":"<pre><code>&lt;key&gt;Write the actual device path of your graphics card here (it can be seen in Hackintool PCIE)&lt;/key&gt;\n            &lt;dict&gt;\n                &lt;key&gt;@0,name&lt;/key&gt;\n                &lt;string&gt;ATY,Henbury&lt;/string&gt;\n                &lt;key&gt;@1,name&lt;/key&gt;\n                &lt;string&gt;ATY,Henbury&lt;/string&gt;\n                &lt;key&gt;@2,name&lt;/key&gt;\n                &lt;string&gt;ATY,Henbury&lt;/string&gt;\n                &lt;key&gt;@3,name&lt;/key&gt;\n                &lt;string&gt;ATY,Henbury&lt;/string&gt;\n                &lt;key&gt;ATY,DeviceName&lt;/key&gt;\n                &lt;string&gt;W6600X&lt;/string&gt;\n                &lt;key&gt;ATY,EFIVersion&lt;/key&gt;\n                &lt;string&gt;01.01.270&lt;/string&gt;\n                &lt;key&gt;ATY,FamilyName&lt;/key&gt;\n                &lt;string&gt;Radeon Pro&lt;/string&gt;\n                &lt;key&gt;device_type&lt;/key&gt;\n                &lt;string&gt;ATY,HenburyParent&lt;/string&gt;\n                &lt;key&gt;model&lt;/key&gt;\n                &lt;string&gt;AMD Radeon RRO W6600X&lt;/string&gt;\n                &lt;key&gt;name&lt;/key&gt;\n                &lt;string&gt;ATY,Henbury&lt;/string&gt;\n            &lt;/dict&gt;\n</code></pre>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#radeon-6800","title":"Radeon 6800","text":"<pre><code>    &lt;key&gt;DeviceProperties&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Add&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;Write the actual device path of your graphics card here (it can be seen in Hackintool PCIE)&lt;/key&gt;\n            &lt;dict&gt;\n                &lt;key&gt;@0,name&lt;/key&gt;\n                &lt;string&gt;ATY,Belknap&lt;/string&gt;\n                &lt;key&gt;@1,name&lt;/key&gt;\n                &lt;string&gt;ATY,Belknap&lt;/string&gt;\n                &lt;key&gt;@2,name&lt;/key&gt;\n                &lt;string&gt;ATY,Belknap&lt;/string&gt;\n                &lt;key&gt;@3,name&lt;/key&gt;\n                &lt;string&gt;ATY,Belknap&lt;/string&gt;\n                &lt;key&gt;device_type&lt;/key&gt;\n                &lt;string&gt;ATY,BelknapParent&lt;/string&gt;\n            &lt;/dict&gt;\n        &lt;/dict&gt;\n        &lt;key&gt;Delete&lt;/key&gt;\n        &lt;dict/&gt;\n    &lt;/dict&gt;\n</code></pre>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#radeon-6900","title":"Radeon 6900","text":"<pre><code>    &lt;key&gt;DeviceProperties&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Add&lt;/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;Write the actual device path of your graphics card here (it can be seen in Hackintool PCIE)&lt;/key&gt;\n            &lt;dict&gt;\n                &lt;key&gt;@0,name&lt;/key&gt;\n                &lt;string&gt;ATY,Carswell&lt;/string&gt;\n                &lt;key&gt;@1,name&lt;/key&gt;\n                &lt;string&gt;ATY,Carswell&lt;/string&gt;\n                &lt;key&gt;@2,name&lt;/key&gt;\n                &lt;string&gt;ATY,Carswell&lt;/string&gt;\n                &lt;key&gt;@3,name&lt;/key&gt;\n                &lt;string&gt;ATY,Carswell&lt;/string&gt;\n                &lt;key&gt;device_type&lt;/key&gt;\n                &lt;string&gt;ATY,CarswellParent&lt;/string&gt;\n            &lt;/dict&gt;\n        &lt;/dict&gt;\n        &lt;key&gt;Delete&lt;/key&gt;\n        &lt;dict/&gt;\n    &lt;/dict&gt;\n</code></pre>"},{"location":"Professional%20customization/AMD%20discrete%20graphics%20card%20optimization%20without%20driver%20installation/#reference-links","title":"Reference Links","text":"<p>The following are some reference links for writing this article. Friends who are interested can go and have a look by themselves:</p> <ul> <li>Injection and Optimization of Asrock Radeon RX 5500 XT Challenger D 8G OC</li> <li>Hackintosh - AsRock Z490 Phantom Gaming ITX/TB3 - intel Core 10850k - OpenCorePkg</li> <li>Far - sighted Forum: xjn819 - Related to 6900XT and Apple's Own Monitor</li> <li>Far - sighted Forum: xjn819 - Optimization Post Exclusive to 5700xt (I've Finished Writing)</li> <li>AMD Radeon PRO W6800X Duo and W6900X - macOS System Information</li> </ul>"},{"location":"Professional%20customization/Bluetooth%20in%20macOS%2012/","title":"Bluetooth in macOS 12","text":""},{"location":"Professional%20customization/Bluetooth%20in%20macOS%2012/#broadcom-network-card-with-no-driver-required-feature","title":"Broadcom Network Card with No - driver - required Feature","text":"<p>Just replace <code>BrcmBluetoothInjector.kext</code> with <code>BlueToolFixup.kext</code>.</p> <p>The final drivers used are as follows:</p> <ul> <li>BlueToolFixup.kext</li> <li>BrcmFirmwareData.kext</li> <li>BrcmPatchRAM3.kext</li> </ul>"},{"location":"Professional%20customization/Bluetooth%20in%20macOS%2012/#intel-wireless-network-card","title":"Intel Wireless Network Card","text":"<p>Just replace <code>IntelBluetoothInjector.kext</code> with <code>BlueToolFixup.kext</code>.</p> <p>BlueToolFixup.kext can be downloaded from here: https://github.com/acidanthera/BrcmPatchRAM/releases</p> <p>The final drivers used are as follows:</p> <ul> <li>BlueToolFixup.kext</li> <li>IntelBluetoothFirmware.kext</li> </ul>"},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/","title":"Compile the touchpad driver","text":""},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/#preface","title":"Preface","text":"<p>When you see this part of the content, it means that you have already delved quite deeply into Hackintosh and need to customize and modify the drivers yourself. So, here, it's assumed that you are already an advanced user, and I won't go over some basic steps in detail.</p> <p>Actually, this content is taken from this article on my blog: Research on Touchpad Drivers for Dual - screen Laptops under macOS </p> <p>Since the article is rather long, I've extracted the key parts and put them in this tutorial. Interested friends can also go to the original article to read it. Now, let's directly start with the compilation tutorial of the VoodooI2C project.</p> <p>Update: The VoodooI2C project has been constantly changing, so I don't have the energy to keep maintaining and updating this article. Although the project keeps changing, the basic ideas in this article are still worth referring to.</p>"},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/#clone-the-source-code","title":"Clone the Source Code","text":"<p>The modules on which the VoodooI2C project depends belong to different repositories. So, when using <code>git clone</code>, you need to use the <code>recursive</code> parameter to clone and download them all at once:</p> <pre><code># The folder path for this storage is for reference only\n$ pwd\n/Users/bytedance/Desktop/XCode\n\n$ cd ~/Desktop/XCode\n\n$ git clone --recursive https://github.com/VoodooI2C/VoodooI2C.git\n</code></pre>"},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/#open-the-project","title":"Open the Project","text":"<p>Open the <code>VoodooI2C.xcworkspace</code> file using Xcode:</p> <p> </p> <p>Opening the project won't be plain sailing. We'll see a lot of issues:</p> <p> </p> <p>Actually, we don't need to worry about them here. Just keep the defaults. Don't manually click \"Perform Changes\".</p>"},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/#iokit-missing","title":"IOKit Missing","text":"<p>Click \"Product\" - \"Build\" to compile first, and you'll find an error reported: <code>'IOKit/IOLib.h' file not found</code>: </p> <p> </p> <p>This problem stuck me for a long time at first. Later, I found that in the \"Build Settings\" of the project, in the \"Library Search Paths\", I didn't have the <code>MacKernelSDK</code> folder:</p> <p> </p> <p>That's why the IOKit library file can't be found. The solution is to manually supplement and complete the MacKernelSDK folder.</p> <p>The open - source project address of MacKernelSDK maintained by the acidanthera guru is: https://github.com/acidanthera/MacKernelSDK</p> <pre><code># Note the path of my current operation\n$ pwd                                                          \ue0b2 \u2714\n/Users/bytedance/Desktop/XCode/VoodooI2C\n\n# Directly download this project\n$ git clone https://github.com/acidanthera/MacKernelSDK.git\n</code></pre> <p>At this point, when you compile again, you'll find that the previous <code>'IOKit/IOLib.h' file not found</code> error has disappeared, and this problem has been solved.</p>"},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/#voodooinputmultitouch-missing","title":"VoodooInputMultitouch Missing","text":"<p>After solving the above small problem, you'll find that there are new errors:</p> <pre><code>'VoodooInputMultitouch/VoodooInputTransducer.h' file not found\n</code></pre> <p> </p> <p>Don't panic. This is a big problem because the corresponding files are missing in the project, and we also need to manually supplement them. Coincidentally, this project is also maintained by the acidanthera guru, and the address is: https://github.com/acidanthera/VoodooInput</p> <p>Copy the <code>VoodooInputMultitouch</code> file to the VoodooI2C/Multitouch\\ Support/Native directory:</p> <p> </p> <p>At this point, there should be no more compilation errors.</p>"},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/#cldoc-or-cpplint-missing","title":"cldoc or cpplint Missing","text":"<p>However, some people may always encounter various problems and may also encounter errors like <code>xargs: cldoc: No such file or directory</code> or <code>cpplint: command not found</code>. I've forgotten how to solve this. It seems that we can solve it by directly installing Python libraries:</p> <pre><code>sudo easy_install cldoc\nsudo easy_install cpplint\n</code></pre> <p>It seems that since macOS 12.3, Python2 has been removed, and there is no easy_install command. We can use the brew command instead:</p> <pre><code>brew install cpplint\n</code></pre> <p>Then, there may still be the problem of the cldoc command missing. Besides installing the corresponding cldoc command, you can also directly remove the \"Generate Documentation\" part in the project:</p> <p></p> <p>I've forgotten more specific details, but this part isn't complicated. Since you've already reached the step of Xcode compilation, this problem shouldn't be too difficult for you.</p>"},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/#compile-the-project","title":"Compile the Project","text":"<p>So far, all the errors have been solved. Now, let's directly compile and generate kexts. First, click \"build\" to compile. It's very smooth:</p> <p> </p> <p>Then click \"Product\" and then \"Archive\" to package the project:</p> <p> </p> <p>Then a window will pop up. Select the latest version we packaged and select \"Distribute Content\".</p> <p> </p> <p>Later, just keep the default \"Build Products\":</p> <p> </p> <p>Finally, the compiled kexts files will be on the desktop:</p> <p> </p>"},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/#pitfall-record","title":"Pitfall Record","text":"<p>The Pluglns of the <code>VoodooI2C.kext</code> we compiled are incomplete, and there are two aliases inside:</p> <p> </p> <p>The solution can be to manually copy the kext outside the directory in, or directly use the officially compiled <code>VoodooI2C.kext</code>.</p>"},{"location":"Professional%20customization/Compile%20the%20touchpad%20driver/#support","title":"Support?","text":"<p>In this noisy and impetuous era, how many people still insist on writing blogs and outputting original articles? Writing a blog always feels like generating electricity with love...</p> <p>If you happen to be wealthy and feel that this article has helped you, you can consider making a donation to this article to maintain the high - cost server operation (domain name cost, server cost, CDN cost, etc.)</p>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/","title":"Customization of Integrated Graphics Interface Output","text":"<p>If the integrated graphics are used for output under macOS, generally the DP interface is driver - free. If HDMI is used, the monitor may be black or the color output may be incorrect. So we often need to customize the display interface.</p>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#device-introduction","title":"Device Introduction","text":"<p>The device information used in this tutorial is as follows:</p> Category Value Motherboard AsRock Z490 Steel Legend CPU i7 - 10700 GPU Intel UHD Graphics 630 Interface DP 1.4 + HDMI 1.4"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#oc-configuration-information","title":"OC Configuration Information","text":"<p>To be concise, since my motherboard basically has all options, only the ID attribute is injected for the integrated graphics part here:</p> <p> </p> <p>After restarting and entering the system, Hackintool automatically determined the current platform ID as <code>0x3E9B0007</code> through this integrated graphics ID.</p> <p> </p>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#view-interface-information","title":"View Interface Information","text":"<p>In Hackintool, find \"Applied Patches\" - \"Interfaces\", select the platform ID you saw above, and you can see the current interface situation:</p> <p> </p> <p>It can be seen that this platform has three interfaces by default, and all of them are DP. However, the interfaces of our motherboard are as follows:</p> <p> </p> <p>It is a classic combination of 1 HDMI + 1 DP. So at this time, our HDMI has no signal display. So what can we do to make this HDMI display? Don't worry. Keep reading.</p>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#display-interface-types","title":"Display Interface Types","text":"<ul> <li>02000000</li> <li>LVDS and eDP interfaces</li> <li>Generally used to drive the built - in monitor of a laptop</li> <li>00040000</li> <li>DP interface</li> <li>Generally, the monitor built in the USB - C is a DP interface.</li> <li>The DP interface is usually driver - free under macOS.</li> <li>00080000</li> <li>HDMI interface</li> <li>HDMI under macOS usually cannot display normally and the interface data needs to be customized.</li> <li>10000000</li> <li>VGA interface</li> <li>VGA monitors are not supported by default after version 10.8.</li> <li>If your CPU is from the 6th generation onwards, it actually uses the DP interface, so just drive it as a DP interface.</li> <li>04000000</li> <li>Dual - link DVI interface</li> <li>This thing is basically obsolete.</li> <li>00020000</li> <li>Single - link DVI interface</li> <li>This thing is basically obsolete.</li> <li>80000000</li> <li>S - Video interface</li> <li>This thing is basically obsolete.</li> <li>01000000</li> <li>Used when there is no physical display interface.</li> </ul>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#look-for-the-official-manual","title":"Look for the Official Manual","text":"<p>Look for the buffer frame information of our current platform ID in WhatGreen's official manual:</p> <pre><code>Model name: Intel UHD Graphics 630         ID: 3E9B0007\nMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3\n[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - ConnectorDP\n[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - ConnectorDP\n[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - ConnectorDP\n01050900 00040000 C7030000\n02040A00 00040000 C7030000\n03060800 00040000 C7030000\n</code></pre> <p>It can be seen that three bus IDs are listed for the 3E9B0007 platform. We will decompose them for easier understanding. Here, take the first one as an example. For a detailed explanation, see the figure below:</p> <p> </p> <ul> <li>The \"bus ID\" is unique, and multiple interfaces cannot share it.</li> <li>The maximum value of the \"bus ID\" on most platforms is <code>06</code>.</li> <li>The \"bus ID\" is crucial. Generally, when we customize the interface, we are actually exploring and traversing this value.</li> <li>The \"channel\" actually has no reference value. You can write it according to the values recommended for different platforms in the manual.</li> <li><code>C7030000</code> is an identifier. Fill it in according to the manual.</li> <li>Customizing the number of interface displays also requires the use of <code>framebuffer - patch - enable | Data | 01000000</code>.</li> </ul>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#traverse-interface-1","title":"Traverse Interface 1","text":"<p>Now start customizing display interface 1. Generally, only the busid needs to be traversed. The index number, channel, and identifier remain the same as those queried in the manual. Specify interface 1 as the HDMI type:</p> <pre><code>framebuffer - con0 - alldata = 01010900 00080000 C7030000\nframebuffer - con0 - enable  = 01000000\n</code></pre> <p>The final effect is as follows:</p> <p> </p> <p>After replacement, restart and take a look. Although HDMI doesn't work, it can be seen that the specified HDMI interface type we set has taken effect:</p> <p> </p> <p>Since using \"bus ID\" <code>01</code> for interface 1 is not successful, start trying to traverse it to the maximum value <code>06</code> one by one:</p> <pre><code>framebuffer - con0 - alldata = 01020900 00080000 C7030000\nframebuffer - con0 - alldata = 01030900 00080000 C7030000\nframebuffer - con0 - alldata = 01040900 00080000 C7030000 (Since interface 2 is also bus ID 4, remember to unplug the DP)\nframebuffer - con0 - alldata = 01050900 00080000 C7030000\nframebuffer - con0 - alldata = 01060900 00080000 C7030000\n</code></pre> <p>Restart after each traversal. At most, only 5 more restarts are needed. If none of them work, it means that this \"interface 1\" doesn't correspond to the physical HDMI interface at all. Then only interface 3 can be traversed.</p>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#traverse-interface-3","title":"Traverse Interface 3","text":"<p>Enable interface 3, specify the display type as HDMI, and start traversing from \"bus ID\" <code>01</code>. At most, try restarting the computer 6 times:</p> <pre><code>framebuffer - con2 - alldata = 03010800 00080000 C7030000\nframebuffer - con2 - alldata = 03020800 00080000 C7030000\nframebuffer - con2 - alldata = 03030800 00080000 C7030000\nframebuffer - con2 - alldata = 03040800 00080000 C7030000 (Since interface 2 is also bus ID 4, remember to unplug the DP)\nframebuffer - con2 - alldata = 03050800 00080000 C7030000\nframebuffer - con2 - alldata = 03060800 00080000 C7030000\n</code></pre> <p>Fortunately, we finally succeeded when we tried \"bus ID\" <code>04</code>:</p> <pre><code>framebuffer - con2 - alldata = 03040800 00080000 C7030000\n</code></pre> <p> </p> <p>Since our interface 2 also uses \"bus ID\" <code>04</code>, if both DP and HDMI are plugged in at this time, neither monitor can display normally. So the DP cable, that is, interface 2, must be unplugged for testing. Finally, it is found that the HDMI interface successfully lights up the monitor:</p> <p> </p> <p>However, at this time, due to the conflict of \"bus ID\" between interface 2 and 3, we have to manually change interface 2 to another \"bus ID\". All of them also need to be traversed:</p> <pre><code>framebuffer - con1 - alldata = 02010A00 00040000 C7030000\nframebuffer - con1 - alldata = 02020A00 00040000 C7030000\nframebuffer - con1 - alldata = 02030A00 00040000 C7030000\nframebuffer - con1 - alldata = 02050A00 00040000 C7030000\nframebuffer - con1 - alldata = 02060A00 00040000 C7030000\n</code></pre> <p>Fortunately, we finally succeeded when we tried \"bus ID\" <code>02</code>:</p> <pre><code>framebuffer - con1 - alldata = 02020A00 00040000 C7030000\n</code></pre> <p> </p> <p>Also, remember that for multiple monitors, use the boot option <code>igfxonln = 1</code>.</p>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#final-effect","title":"Final Effect","text":"<p>Finally, after restarting the computer nearly 10 times, the DP and HDMI interfaces can finally light up the monitors simultaneously:</p> <p> </p>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#teach-one-to-fish","title":"Teach One to Fish","text":"<p>It is guessed that there are actually rules for these motherboards of various motherboard manufacturers. So some common combination cases can be placed below this article. Since my energy is limited, everyone is also welcome to share your successful cases in the comment section (just attach the motherboard model and interface data). The specific format can refer to the following:</p>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#asrock","title":"AsRock","text":"<ul> <li>DP + HDMI: Z490 Steel Legend</li> </ul> <pre><code>framebuffer - con1 - alldata = 02020A00 00040000 C7030000\nframebuffer - con2 - alldata = 03040800 00080000 C7030000 \n</code></pre> <ul> <li>DP + HDMI: Z490 Extreme4</li> </ul> <pre><code>framebuffer - con2 - alldata = 03040800 00080000 C7030000\n</code></pre>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#asus","title":"ASUS","text":"<ul> <li>DP + HDMI: ROG STRIX B460 - I GAMING</li> </ul> <pre><code>framebuffer - con0 - alldata = 01060900 00040000 C7030000\nframebuffer - con1 - alldata = 02040A00 00080000 C7030000\n</code></pre> <ul> <li>DP + HDMI: Z170I PRO GAMING</li> </ul> <pre><code>framebuffer - con0 - alldata = 01050900 00080000 C7030000 \n</code></pre> <ul> <li>DP + HDMI: TUF GAMING B460M - PRO</li> </ul> <pre><code>framebuffer - con1 - alldata = 02060A00 00080000 C7030000 \n</code></pre> <ul> <li>HDMI + DVI: TUF B360M - PLUS GAMING</li> </ul> <pre><code>framebuffer - con1 - alldata = 02020A00 00080000 C7030000 \n</code></pre> <ul> <li>ASUS TUF Gaming FX504GE HM370 chipset</li> </ul> <pre><code>framebuffer - con2 - alldata =01050900 00080000 C7010000\n</code></pre>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#dell","title":"Dell","text":"<ul> <li>HDMI + VGA: Vostro 3260 100 - series</li> </ul> <pre><code>AAPL,ig - platform - id = 00001259\nframebuffer - con0 - alldata = 01050900 00080000 C7030000\nframebuffer - con1 - alldata = 02000A00 00040000 C7030000 \uff08VGA may not work\uff09\n</code></pre>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#msi","title":"MSI","text":"<ul> <li>HDMI: MAG B365M MORTAR </li> </ul> <pre><code>framebuffer - con0 - alldata = 01050900 00080000 C7030000\n</code></pre> <ul> <li>DP + HDMI: MPG Z390 GAMING PRO CARBON AC</li> </ul> <pre><code>framebuffer - con0 - alldata = 01010900 00080000 C7030000 \n</code></pre> <ul> <li>DP + HDMI: MAG B460M MORTAR</li> </ul> <pre><code>framebuffer - con0 - alldata = 01010800 00080000 C7030000\n</code></pre> <ul> <li>DP + HDMI + Thunderbolt: MEG Z490I UNIFY</li> </ul> <pre><code>framebuffer - con0 - alldata = 01010900 00080000 C7030000\n</code></pre>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#lenovo","title":"Lenovo","text":"<ul> <li>HDMI: Yangtian S540 - 14 - IWL - HDMI</li> </ul> <pre><code>framebuffer - con1 - alldata = 01010900 00080000 C7010000\n</code></pre> <ul> <li>HDMI + VGA: V330 - 15IKB LNVNB161216 chipset</li> </ul> <pre><code>framebuffer - con1 - alldata = 01050900 00040000 87010000\nframebuffer - con2 - alldata = 02040A00 00080000 87010000\n</code></pre>"},{"location":"Professional%20customization/Customization%20of%20Integrated%20Graphics%20Interface%20Output/#gigabyte","title":"Gigabyte","text":"<ul> <li>DP + HDMI: B360M AORUS PRO</li> </ul> <pre><code>framebuffer - con0 - alldata = 01050900 00040000 C7030000\nframebuffer - con2 - alldata = 03040800 00080000 C7030000\n</code></pre>"},{"location":"Professional%20customization/Customize%20the%20monitor%20icon/","title":"Customize the monitor icon","text":""},{"location":"Professional%20customization/Customize%20the%20monitor%20icon/#finished-product-effect","title":"Finished Product Effect","text":"<p>The script of HiDPi can also be used to customize the monitor icon. However, giving someone a fish is not as good as teaching them how to fish. Without further ado, here comes the tutorial.</p>"},{"location":"Professional%20customization/Customize%20the%20monitor%20icon/#view-monitor-information","title":"View Monitor Information","text":"<p>Use Hackintool to view monitor information:</p> <p> </p> <p>Take the above DP monitor as an example and extract the key information (which will be used later):</p> <ul> <li>Vendor ID = 216D</li> <li>Product ID = 2800</li> </ul>"},{"location":"Professional%20customization/Customize%20the%20monitor%20icon/#create-folders-and-icon-files","title":"Create Folders and Icon Files","text":"<p>Go to the <code>/Library/Displays/Contents/Resources/Overrides</code> folder. There are only two steps:</p> <ol> <li>Create the <code>DisplayVendorID - {Vendor ID}</code> folder.</li> <li>Name your icon as <code>DisplayProductID - {Product ID}.icns</code>.</li> </ol> <p> </p> <p>Just restart after the replacement.</p>"},{"location":"Professional%20customization/Dual%20-%20graphics%20-%20card%20display%20on%20a%20desktop%20computer/","title":"Dual - graphics - card display on a desktop computer","text":""},{"location":"Professional%20customization/Dual%20-%20graphics%20-%20card%20display%20on%20a%20desktop%20computer/#preface","title":"Preface","text":"<p>First of all, it should be noted that this dual - graphics card does not refer to two discrete graphics cards, but rather the integrated graphics and the discrete graphics. Just like in the following picture, you can see that both the integrated graphics and the discrete graphics can display normally:</p> <p> </p> <p>Actually, this dual - graphics card configuration of the desktop computer is not the most standard configuration. However, some netizens are rather curious about how it is achieved. This question has been asked for a long time:</p> <p> </p> <p>Since this is the case, it's better to open a chapter to record and share it. Actually, it's very simple.</p>"},{"location":"Professional%20customization/Dual%20-%20graphics%20-%20card%20display%20on%20a%20desktop%20computer/#integrated-graphics-for-computing-only","title":"Integrated Graphics for Computing Only","text":"<p>The following is the default strategy usually used in my Hackintosh desktop computer (since HDMI is rarely used, the interface data is not customized):</p> <p> </p> <p>Here, AAPL,ig - platform - id uses <code>0300C89B</code>, and there is no signal output (because there is already a discrete graphics card). Moreover, the iMac of the genuine Mac also has this default scheduling strategy by default, that is, the integrated graphics is only for computing and does not drive the display. For the complete AAPL,ig - platform - id of UHD 630, you can refer to the following table:</p> AAPL,ig - platform - id Explanation <code>07009B3E</code> Used when the desktop iGPU is used to drive the display <code>00009B3E</code> If <code>07009B3E</code> doesn't work, you can consider using this ID to have a look <code>0300C89B</code> Used when the desktop iGPU is only used for computing tasks and does not drive the display <ul> <li>device - id: 9B3E0000 </li> <li>Solve some abnormal driver problems and improve compatibility</li> </ul> <p>It can be seen that in my DeviceProperties, there are not many parameters injected in the graphics card part. This is because my BIOS is set to <code>DVMT Pre - Allocated: 64MB</code>, so the framebuffer - patch - enable, framebuffer - stolenmem and framebuffer - fbmem parameters are not needed.</p> <p>In this case, let's open various software to identify:</p> <p> </p> <p>It can be seen that in the Miscellaneous section and system information of Hackintool, only 1 discrete graphics card is identified, the frequency of the integrated graphics is detected in Intel Power Gadget, and the dual - hardware decoding of Video Proc is normal.</p>"},{"location":"Professional%20customization/Dual%20-%20graphics%20-%20card%20display%20on%20a%20desktop%20computer/#let-the-integrated-graphics-drive-the-display","title":"Let the Integrated Graphics Drive the Display","text":"<p>Since we know that the reason is that the integrated graphics does not drive the display, let's directly change AAPL,ig - platform - id to <code>07009B3E</code> and have a try:</p> <p> </p> <p>Now let's take a look at the identification situation of each software:</p> <p> </p> <p>It can be seen that except that Hackintool identifies two graphics cards here, there is no change in other software, and only the discrete graphics card can still be seen in the system information.</p> <p>In addition, it should be added that the two graphics cards can also be identified by using the GeekBench 5 benchmarking software:</p> <p> </p> <p>Although there has been progress, the graphics cards are still not identified in the system information, so the revolution has not yet succeeded, and we still need to work hard.</p>"},{"location":"Professional%20customization/Dual%20-%20graphics%20-%20card%20display%20on%20a%20desktop%20computer/#display-discrete-graphics-and-integrated-graphics-in-system-information","title":"Display Discrete Graphics and Integrated Graphics in System Information","text":"<p>Actually, this method is very niche and has little to do with your OC configuration. I finally got the answer to this question in the Yuanjing Forum. The original post address is:</p> <p>What is the correct way to perfectly display the discrete graphics and integrated graphics on a desktop computer?</p> <p>Finally, 12F gave the correct answer:</p> <p> </p> <p>Indeed, this actually has something to do with the motherboard. Just set the integrated graphics to have priority display in the motherboard, and now think about why it worked for my roommate? It's because during the mining boom, he used the integrated graphics at first, and the discrete graphics was added later, so the situation of dual - graphics cards occurred purely by coincidence later.</p> <p>My motherboard is the AsRock Z490 Steel Legend. In my BIOS, only the following two settings need to be enabled:</p> <ul> <li>\u300cAdvanced\u300d-\u300cChipset Configuration\u300d-\u300cPrimary Graphics Adapter\u300d-\u300cOn - board\u300d</li> <li>\u300cAdvanced\u300d-\u300cChipset Configuration\u300d-\u300cIGPU Multi - Monitor\u300d-\u300cEnable\u300d</li> <li>If it is not enabled, the integrated graphics will be disabled when there is a discrete graphics card.</li> <li>Many Gigabyte B - series motherboards are disabled by default, which is very annoying.</li> </ul> <p>Then let's take a look at the final effect picture:</p> <p> </p> <p>Let's take a look at the situation of the integrated graphics:</p> <p> </p> <p>Finally, add a general picture and it's almost done:</p> <p> </p>"},{"location":"Professional%20customization/Dual%20-%20graphics%20-%20card%20display%20on%20a%20desktop%20computer/#a-reminder","title":"A Reminder","text":"<p>I wrote this chapter just out of pure curiosity. Actually, this method is not practical.</p> <p>When there is a discrete graphics card that doesn't need a driver in a desktop computer, it is not recommended to enable the integrated graphics as the display output. Therefore, it is recommended to set the PCIE discrete graphics as the main display device in the BIOS during installation, and then change to an AAPL,ig - platform - id that does not do display output in OC, because this is the default strategy of the iMac of the genuine Mac. The highest level of Hackintosh is to be close to the genuine Mac. In addition, it will also increase the boot speed and shorten the boot time. Why not do it?</p>"},{"location":"Professional%20customization/Enable%20HiDPi/","title":"Enable HiDPi","text":"<p>I wrote an article about HiDPi a few years ago. Netizens who are interested can go and have a look: What is HiDPI? And how to enable HiDPI on Hackintosh</p> <p>Only the key operations will be written in this tutorial without further ado.</p>"},{"location":"Professional%20customization/Enable%20HiDPi/#what-is-hidpi","title":"What is HiDPi?","text":"<p>Briefly speaking, it is a display technology that Apple has been using all the time. It improves the clarity by combining multiple pixels into one pixel. When the display meets the retina standard defined by Apple, HiDPi will be automatically enabled. The entire MBP series has HiDPi enabled. If you buy a 4K monitor yourself, HiDPi is also enabled by default. Or when using a 4K laptop Hackintosh (XPS series), HiDPi is also automatically enabled.</p> <p>Because HiDPi sacrifices pixels, although it looks clearer than before, the actual apparent resolution will be lower. It is equivalent to sacrificing resolution for clarity. So if a 1080P monitor has HiDPi enabled, the final display effect is close to 720P. From this point of view, a 2K - resolution device is more suitable for HiDPi (neither too high nor too low).</p>"},{"location":"Professional%20customization/Enable%20HiDPi/#before-enabling-hidpi-effect","title":"Before Enabling HiDPi Effect","text":"<p>The effect of ZenBoook 13 under the default condition:</p> <p> </p> <p>It can be seen that the font in the picture is rather blurry and doesn't look very comfortable.</p>"},{"location":"Professional%20customization/Enable%20HiDPi/#after-enabling-hidpi-effect","title":"After Enabling HiDPi Effect","text":"<p>After enabling HiDPi on Zenbook 13:</p> <p> </p> <p>It can be seen that it is much clearer and looks very refreshing. Although a little resolution is sacrificed, it's worth it!</p>"},{"location":"Professional%20customization/Enable%20HiDPi/#how-to-enable-hidpi","title":"How to Enable HiDPi","text":"<p>Actually, enabling HiDPi is not complicated. There are mature ready - to - use tools: The Github project address of the script: GitHub - xzhih/one - key - hidpi: Enable macOS HiDPI</p> <p>Only one command is needed to enable HiDPi:</p> <pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/xzhih/one - key - hidpi/master/hidpi.sh)\"\n</code></pre> <p>However, the official project on Github is easily blocked. If there is a network timeout when accessing Github, you can use the following script command that I placed in China:</p> <pre><code>sh -c \"$(curl -fsSL https://html.sqlsec.com/hidpi.sh)\"\n</code></pre> <p>The domestic script synchronizes with the official Github script regularly. The main code has been transferred to Gitee in China. Basically, it can be used smoothly in China.</p>"},{"location":"Professional%20customization/Enable%20HiDPi/#detail-1-of-script-usage","title":"Detail 1 of Script Usage","text":"<p>The above are the options I usually use. Because this is a dual - screen laptop, two monitors are listed. If you connect an external monitor, two monitors will also be shown here. Also, for the monitor ICON selection, everyone can choose according to their own preferences.</p>"},{"location":"Professional%20customization/Enable%20HiDPi/#detail-2-of-script-usage","title":"Detail 2 of Script Usage","text":"<p>Generally, for a 1080P monitor, either option 1 or 2 for the resolution configuration is fine. Everyone can try it out for themselves.</p> <p>However, the resolutions of some laptops are rather niche. For example, the Chuwi Corebook X 14 previously had a resolution of 2160x1440.</p> <p>At this time, you have to calculate the resolution with a calculator yourself. The HiDPi resolutions of this Chuwi laptop are finally:</p> <p>1920x1280 1620x1080 1380x920 1080x720</p> <p>Among them, the area at 1620x1080 will be relatively large, but the clarity is not as good as 1380x920. Netizens can choose according to their own preferences.</p>"},{"location":"Professional%20customization/Enable%20HiDPi/#settings-for-enabling-hidpi","title":"Settings for Enabling HiDPi","text":"<p>In the Settings - Displays, select Scaling, and you can see the effect of the monitor with HiDPi enabled. There are small window icons:</p> <p></p> <p>However, some monitors do not have this small window. In this case, there will also be a text reminder of HiDPi:</p> <p> </p>"},{"location":"Professional%20customization/Enable%20HiDPi/#settings-for-not-enabling-hidpi","title":"Settings for Not Enabling HiDPi","text":"<p>If the monitor without HiDPi enabled selects Scaling, only various resolutions will be listed in text form (without the HiDPi identifier):</p> <p> </p>"},{"location":"Professional%20customization/Enable%20HiDPi/#disadvantages-of-enabling-hidpi","title":"Disadvantages of Enabling HiDPi","text":"<p>Everything has its pros and cons. Besides sacrificing resolution (display area) when enabling HiDPi, it will also increase the burden on the graphics card. If your integrated graphics or CPU itself has weak performance, it will cause obvious lagging.</p> <p>Some friends will surely ask at this point? Why does it increase the burden on the graphics card? You will understand by looking at the following picture of enabling HiDPi:</p> <p> </p> <p>Because HiDPi sacrifices resolution for clarity, when the UI resolution you set is a bit higher, a larger resolution is necessarily required. The original physical resolution cannot meet this, and at this time the graphics card will simulate and output a higher resolution. This is the reason why HiDPi may cause the system to lag. (Common in integrated graphics. For discrete graphics, enabling it without thinking won't be a problem.)</p>"},{"location":"Professional%20customization/Mask%20the%20unsupported%20hard%20drives/","title":"Mask the unsupported hard drives","text":"<p>Hackintosh often has problems with NVME hard drives. For example, common ones include Samsung PM961/PM981/PM981a/PM991 series, Micron 2200V MTFDHBA512TCK, Micron 2200S, etc. For details of hard drives with no solution, you can refer to the tutorial: Hardware Limitation - Hard Drive Support</p>"},{"location":"Professional%20customization/Mask%20the%20unsupported%20hard%20drives/#pxpx-method","title":"PXPX Method","text":"<p>You need to first find the specific hard drive path under Windows. It's different for different computers. The actual path depends on your actual situation:</p> <p>Then replace the content <code>_SB_.PCI0.RP21</code> below with the actual path you see, and then save the file as SSDT - RP.PXSX - disbale.aml. OC can load this SSDT:</p> <pre><code>DefinitionBlock (\"\", \"SSDT\", 2, \"OCLT\", \"noRPxx\", 0x00000000)\n{\n    External (_SB_.PCI0.RP21, DeviceObj)\n\n    Scope (_SB.PCI0.RP21)\n    {\n        OperationRegion (DE01, PCI_Config, 0x50, One)\n        Field (DE01, AnyAcc, NoLock, Preserve)\n        {\n               ,   4, \n            DDDD,   1\n        }\n\n        Method (_STA, 0, Serialized)  // _STA: Status\n        {\n            If (_OSI (\"Darwin\"))\n            {\n                Return (Zero)\n            }\n        }\n    }\n\n    Scope (\\)\n    {\n        If (_OSI (\"Darwin\"))\n        {\n            \\_SB.PCI0.RP21.DDDD = One\n        }\n    }\n}\n</code></pre>"},{"location":"Professional%20customization/Mask%20the%20unsupported%20hard%20drives/#method-of-disabling-the-discrete-graphics-card","title":"Method of Disabling the Discrete Graphics Card","text":"<p>I named this myself actually, because disabling the discrete graphics card is also in this way. Some NVME hard drive controllers can also use this method to be disabled.</p> <p>You need to first find the specific hard drive path under Windows. It's different for different computers. The actual path depends on your actual situation:</p> <p> </p> <p>According to the above picture, the path of our NVME hard drive is:</p> <pre><code>_SB_.PCI0.GPP0\n</code></pre> <p>Then replace the content <code>_SB_.PCI0.GPP0</code> below with the actual path you see:</p> <pre><code>DefinitionBlock (\"\", \"SSDT\", 2, \"DRTNIA\", \"spoof\", 0x00000000)\n{\n    External (_SB_.PCI0.GPP0, DeviceObj)\n\n    Method (_SB_.PCI0.GPP0._DSM, 4, NotSerialized)  // _DSM: Device - Specific Method\n    {\n        If ((!Arg2 || (_OSI (\"Darwin\") == Zero)))\n        {\n            Return (Buffer (One)\n            {\n                 0x03                                             //.\n            })\n        }\n\n        Return (Package (0x0A)\n        {\n            \"name\", \n            Buffer (0x09)\n            {\n                \"#display\"\n            }, \n\n            \"IOName\", \n            \"#display\", \n            \"class - code\", \n            Buffer (0x04)\n            {\n                 0xFF, 0xFF, 0xFF, 0xFF                           //....\n            }, \n\n            \"vendor - id\", \n            Buffer (0x04)\n            {\n                 0xFF, 0xFF, 0x00, 0x00                           //....\n            }, \n\n            \"device - id\", \n            Buffer (0x04)\n            {\n                 0xFF, 0xFF, 0x00, 0x00                           //....\n            }\n        })\n    }\n}\n</code></pre>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/","title":"OC theme and boot entries","text":""},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#official-theme","title":"Official Theme","text":"<p>This is the theme provided by OpenCore officially: https://github.com/acidanthera/OcBinaryData/ You can also make your own icons with the same name for replacement, or download theme packages made by others for replacement. I have also posted some theme download websites before. See the \"Drivers Explanation\" section for details.</p>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#settings","title":"Settings","text":"<ul> <li>PickerMode -&gt; External</li> <li>PickerAttributes -&gt; 129(0x81)</li> </ul>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#drivers","title":"Drivers","text":"<ul> <li>OpenCanopy.efi</li> </ul>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#required-icons","title":"Required Icons","text":"<p>If these icons are missing, the theme will not take effect.</p> <ul> <li>BtnFocus - Focus of other (shutdown and restart) buttons (<code>BtnFocus.icns</code>)</li> <li>Cursor - Mouse cursor (<code>Cursor.icns</code>, the same below.)</li> <li>Dot - The hidden character dot for password input</li> <li>Enter - The input symbol for password input</li> <li>Left - The additional selector entry on the left</li> <li>Lock - The password lock</li> <li>Password - The password input text area</li> <li>Restart - Additional button: restart</li> <li>Right - The additional selector entry on the right</li> <li>Selected - The background of the selected boot entry</li> <li>Selector - Displays the selected entry</li> <li>SetDefault - Displays the selected entry in the \"Set Default\" mode</li> <li>ShutDown - Additional button: shutdown</li> <li>ExtHardDrive - Bootable operating system (system on an external drive, such as a USB flash drive)</li> <li>HardDrive - Bootable operating system (local hard disk)</li> </ul>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#automatically-detected-boot-entries","title":"Automatically Detected Boot Entries","text":"<p>OpenCore will automatically detect whether the system is Windows or macOS to match the boot entry icons. macOS will automatically detect the system version, while Windows will not. As for whether it is Windows 11 or Windows 10... OpenCore can only detect that the system is Windows.</p>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#icons","title":"Icons","text":""},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#windows","title":"Windows","text":"<p>HardDrive.icns is the basic boot entry icon. If you don't customize an icon for the boot entry, all systems will display this icon. - If you want to customize an icon for Windows, first design a Windows icon by yourself and name it Windows.icns. When OpenCore starts, it will automatically match this icon for it. - The same applies to macOS. You need an Apple.icns icon, otherwise it will fall back to HardDrive.icns.</p> <p>So the question is, when there are multiple Windows systems and multiple macOS systems on the same machine (a large hard disk allows you to be willful), how can different Windows or macOS systems display different icons? - At this time, a file <code>.contentFlavour</code> is needed. You can create a txt text file with Notepad under the Windows system. When you want to make a separate boot entry icon for Windows 11, fill the content of this text file like this Windows11:Windows, which means you also need to design an icon file named <code>Windows11.icns</code>. After filling in the content of the text file, save and exit, and then rename the text file to <code>.contentFlavour</code>. The.txt suffix of the text file should also be deleted. The complete name of the text file is renamed to <code>.contentFlavour</code>, and then copy this file to the directory where the Windows boot file is located, usually <code>\\EFI1\\Microsoft\\Boot\\</code>. - Similarly, if you have a Windows 10 system, change the content of the above - mentioned text file to Windows10:Windows, and you also need to prepare a <code>Windows10.icns</code> icon file. - If the above - mentioned icon files are missing, they will fallback step by step. If <code>Windows10.icns</code> is missing, it will fallback to <code>Windows.icns</code>. If <code>Windows.icns</code> is also missing, it will finally fallback to <code>HardDrive.icns</code>.</p>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#macos","title":"macOS","text":"<p>The macOS boot entry is not so troublesome and doesn't need the <code>.contentFlavour</code> file because OpenCore will automatically detect the macOS system version. You only need to do something with the icon files. - <code>Apple12.icns</code> is automatically matched as the icon of Monterey. - <code>Apple11.icns</code> is automatically matched as the icon of Big Sur. - <code>Apple10_15.icns</code> is automatically matched as the icon of Catalina. - <code>Apple10_14:Apple</code> is automatically matched as the icon of Mojave. - <code>Apple10_13:Apple</code> is automatically matched as the icon of High Sierra.</p> <p>And so on for others.</p>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#boot-entry-titles","title":"Boot Entry Titles","text":""},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#windows_1","title":"Windows","text":"<p>The way to customize the boot entry title is similar to that of customizing the icon, except that the txt file should be renamed to <code>.contentDetails</code>, and the content of this text file is the title content you want to customize. For example, if you want to name it Windows 11, the content of the text file is Windows11. This file is also placed in the directory where the boot file is located, <code>\\EFI1\\Microsoft\\Boot\\</code>.</p>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#macos_1","title":"macOS","text":"<ul> <li>If you want to name the boot entry title of macOS as Monterey, the content of the text file is <code>Monterey</code>, and copy the file to <code>/System/Volumes/Preboot/UUID - number/System/Library/CoreServices</code>. Everyone's UUID is different. You only need to go to <code>/System/Volumes/Preboot/</code> in the Finder, and then click the next directory with the mouse.</li> <li>This step should be carried out in the macOS environment. <code>.contentDetails</code> is a hidden file under Windows. Enter the following command in the terminal to display hidden files.</li> </ul> <p><pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean true;killall Finder\n</code></pre> Enter the following command in the terminal to hide hidden files.</p> <p><pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean false;killall Finder\n</code></pre> - This work requires disabling SIP. See the last part of the Misc section of the OC configuration for how to disable it.</p>"},{"location":"Professional%20customization/OC%20theme%20and%20boot%20entries/#manually-added-boot-entries","title":"Manually Added Boot Entries","text":"<p>This is relatively simple. You don't need the two above - mentioned files. Just modify the configuration in the <code>config.plist</code> file. There is an item <code>Flavour</code> in the <code>Misc -&gt; Boot -&gt; Entries</code> boot entry. The way to fill in the content of this item is the same as the way to fill in the custom boot entry icon for Windows detected automatically above. For example, if you want to customize an icon for Windows 11, fill it in like this <code>Windows11:Windows</code>.</p>"},{"location":"Professional%20customization/Touch%20-%20screen%20Driver%20under%20macOS/","title":"Touch - screen Driver under macOS","text":""},{"location":"Professional%20customization/Touch%20-%20screen%20Driver%20under%20macOS/#preface","title":"Preface","text":"<p>Recently, I have been thinking about getting the XPS 13 7390 2 - in - 1 or the XPS 13 9300 laptop. These two models are equipped with the highest - version CPUs that can currently be used for Hackintosh, and they are both very beautiful. However, the price is not cheap. After calm analysis, I found that I seemed to only be attracted to their 4K touchscreens. So I thought, why don't I just buy a 4K touch - enabled portable monitor directly? And it's much cheaper. So I actually did this, and this article was born.</p> <p> </p>"},{"location":"Professional%20customization/Touch%20-%20screen%20Driver%20under%20macOS/#default-situation","title":"Default Situation","text":"<p>macOS does not support touch at the bottom layer by default. So this touchscreen can only be clicked with a single finger by default, just like a mouse. The experience can be said to be very poor. However, the person who sold me this screen is a young lady. She previously used it with a Mac mini. I don't quite understand why she bought such a screen that supports 10 - point touch but used it under the condition that macOS can only operate with a single finger by default.</p> <p>I seem to understand from the pictures posted by the young lady:</p> <p> </p> <p>The interfaces on the left side of this monitor from top to bottom are:</p> <ul> <li>Micro - USB</li> <li>Power supply</li> <li>Type - C</li> <li>Power supply</li> <li>Type - C</li> <li>One - cable transmission for screen projection</li> <li>Reverse USB power supply</li> <li>Touch USB protocol</li> <li>Standard HDMI </li> <li>Not Micro HDMI</li> <li>Supports 4K 60Hz</li> </ul> <p>It seems from the picture that the young lady has never connected the third interface all the time. So she may have never really used the touchscreen function. No wonder she wanted to sell this monitor.</p> <p>I've digressed a bit. Let's first take a look at the working situation of this touchscreen under macOS. It can be seen that the touch chip recognized at the bottom layer is ILITEK - TP:</p> <p></p> <p>The ILITEK chip capacitive touch controller was developed to meet the needs of more relaxed business fields. It is the 2511/2302/2312 chip provided by ILITEK in Taiwan. It is compatible with capacitive touch screens ranging from 10.4 to 32 inches and provides an economical touch solution.</p>"},{"location":"Professional%20customization/Touch%20-%20screen%20Driver%20under%20macOS/#loading-the-touchscreen-driver","title":"Loading the Touchscreen Driver","text":"<p>When it comes to the macOS touchscreen driver, in fact, our classic I2C touchpad driver also supports touchscreens. The original project address is:</p> <p>https://github.com/VoodooI2C/VoodooI2C/</p> <p>Many classic Hackintosh models, such as the XPS series, also use the drivers of this project.</p> <p>Without further ado, if our desktop Hackintosh wants to drive the touchscreen, it's also very simple:</p> <ol> <li>Place <code>VoodooI2C.kext</code> and <code>VoodooI2CHID.kext</code> in the <code>EFI/OC/Kexts</code> directory.</li> <li>Use OCC to load them in the order shown in the following figure:</li> </ol> <p> </p> <p>Then restart. Finally, 10 - point touch can work perfectly under macOS (although macOS doesn't use 10 - point gestures):</p> <p> </p> <p>However, in this case, single - finger operation of the touchscreen actually simulates a stylus, with the mouse following the finger. Multi - finger operation simulates the Magic Trackpad, and basically all the gestures of the Magic Trackpad are supported:</p> <p> </p> <p>Basically, most of the functions of the Magic Trackpad can be completed.</p> <p>For multi - screen operation, because the mouse follows the finger, you can enable \"Three - Finger Drag\" in the assistive function.</p>"},{"location":"Professional%20customization/Touch%20-%20screen%20Driver%20under%20macOS/#driving-method-for-genuine-mac","title":"Driving Method for Genuine Mac","text":"<p>The above operation is very simple through OC. But what if there is no OC in a genuine Mac? In fact, it's also very simple. Just use the command line to manually load the corresponding kexts.</p> <p>First, download the latest driver version: https://github.com/VoodooI2C/VoodooI2C/releases</p> <p>Delete other unimportant Kexts and only keep <code>VoodooI2C.kext</code> and <code>VoodooI2CHID.kext</code> </p> <p> </p> <p>Next, enter the terminal operation:</p> <pre><code># Modify the owner of kexts\n\u279c  sudo chown -R root:wheel VoodooI2C*\n\n# Add execution permission\n\u279c  sudo chmod -R 755 VoodooI2C*\n\n# Load Kexts\n\u279c  sudo kextload -v VoodooI2C*\n</code></pre> <p>At this time, a prompt of \"System Extension Updated\" should pop up:</p> <p> </p> <p>Open \"Security &amp; Privacy\" in the settings and click \"Allow\":</p> <p> </p> <p>Then restart the computer according to the prompt.</p> <p>After restarting, return to the Kexts command and continue to execute the loading command:</p> <pre><code># Load Kexts\n\u279c  sudo kextload -v VoodooI2C*\n</code></pre> <p>Enter the following command to view the loading status of Kexts:</p> <pre><code>\u279c  VoodooI2C - 2.7 sudo dmesg|grep Voodoo\n</code></pre> <p>A situation similar to the following figure indicates that the Kexts are successfully loaded:</p> <p>...Sorry, the picture is unavailable. Please imagine it yourself...</p> <p>But at this time, your touchscreen still doesn't support multi - finger gestures. Let's unplug and replug the USB - protocol data cable and take a look at the log again:</p> <pre><code>\u279c  VoodooI2C - 2.7 sudo dmesg|grep Voodoo\n</code></pre> <p>It can be seen that the log has changed significantly, and our monitor has been detected:</p> <p> </p> <p>At this time, the multi - finger gestures of your touchscreen monitor should also work normally under the genuine Mac.</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/","title":"Touchpad Interrupt Example","text":""},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#preface","title":"Preface","text":"<p>When you see this part of the content, it means that you have already delved quite deeply into Hackintosh, and the touchpad working in polling mode no longer satisfies you. You won't be satisfied until you get a GPIO interrupt. Actually, this content is taken from this article on my blog: Research on Touchpad Drivers for Dual - screen Laptops under macOS </p> <p>Since the article is rather long, I've extracted the key parts and put them in this tutorial. Interested friends can also go to the original article to read it. Now, let's directly start the part of the touchpad interrupt tutorial.</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#hardware-information","title":"Hardware Information","text":"<p>Before handling the interrupt, first collect the basic information of your touchpad. First, briefly organize the touchpad information under Windows. A standard touchpad that complies with the Microsoft I2C protocol is used:</p> <p> </p> <p>Under macOS, IORegistryExplorer can also be used to identify that the model of the touchpad is: GDX1515</p> <p> </p> <p>The above potentially useful information is organized as follows:</p> <ul> <li>The name of this 2 - in - 1 touchpad under Windows: ScreenPad</li> <li>Touchpad model: GDX1515</li> <li>Touchpad screen model: ScreenXpert</li> <li>IRQ: <code>0x0000006D (109)</code></li> <li>APIC Pin: <code>6d\uff08109\uff09</code></li> <li>Device instance path: <code>ACPI\\GDX1515\\1</code></li> <li>Hardware Id:</li> <li><code>ACPI\\VEN_GDX&amp;DEV_1515</code></li> <li><code>ACPI\\GDX1515</code></li> <li><code>*GDX1515</code></li> <li>BIOS device name: <code>\\_SB.PCI0.I2C1.ETPD</code></li> <li>Location path:</li> <li><code>ACPI(_SB)#ACPI(PCI0)#(I2C1)#ACPI(ETPD)</code></li> <li><code>ACPI(_SB)#ACPI(USBX)#(I2C1)#ACPI(ETPD)</code></li> </ul>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#working-modes-of-the-touchpad","title":"Working Modes of the Touchpad","text":"<p>The more perfect situation is to make the touchpad work in interrupt mode (interrupts). For polling and interrupt, you can refer to the following concepts:</p> <ul> <li>APIC Interrupt</li> <li>The interrupt mode used by macOS, with perfect functionality, and only a very few devices support it.</li> <li>It is only supported when the APIC Pin value is less than <code>2F (47)</code>.</li> <li>GPIO Interrupt</li> <li>The interrupt mode mostly used in the Windows system.</li> <li>It is second only to the APIC interrupt and is relatively efficient, but you need to modify and customize the SSDT yourself.</li> <li>Polling</li> <li>A relatively inefficient mode.</li> <li>But it has relatively good compatibility and is applicable to most touchpads.</li> <li>It is prone to problems such as pointer drift and other unresponsive BUGs.</li> </ul> <p>So, in what mode is our current touchpad working? From the previous information collection, we know that the APIC Pin value of the touchpad is:</p> <ul> <li>IRQ: <code>0x0000006D (109)</code></li> <li>APIC Pin: <code>6d\uff08109\uff09</code></li> </ul>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#judging-the-working-mode-of-the-touchpad","title":"Judging the Working Mode of the Touchpad","text":"<p>So, how to judge the current working mode of the touchpad? There are currently three methods as follows:</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#viewing-the-dmesg-log","title":"Viewing the dmesg Log","text":"<p>Under normal circumstances, using the dmesg command, you can directly search for the working state of interrupt or polling based on the keywords of the touchpad model:</p> <p> </p> <p>However, Hackintosh is never smooth sailing. As you can see, the log result viewed by dmesg is empty. This is because the macOS 12.0 system restricts the content viewed by dmesg. Here, we need to manually load kexts to view the log.</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#turning-off-sip","title":"Turning off SIP","text":"<p>Many OC configurations have SIP enabled by default. Since we want to load our own Kexts, we need to manually switch the SIP status on the interface where we choose the system at boot:</p> <p> </p> <p>If your OC doesn't have this option, it's because this configuration switch isn't checked. For specific details, you can refer to this part of my article: My Hackintosh Installation Tutorial: Teach You to Configure OpenCore Step by Step </p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#disabling-kexts-in-oc","title":"Disabling Kexts in OC","text":"<p>The kexts injected through OpenCore can't be used to view the dmesg log normally. So, we need to manually disable the relevant kexts:</p> <p> </p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#manually-loading-kexts","title":"Manually Loading Kexts","text":"<p>Copy <code>VoodooI2C.kext</code> and <code>VoodooI2CHID.kext</code> to the desktop, and then execute the following commands:</p> <pre><code># Modify the owner\nsudo chown -R root:wheel VoodooI2C*\n\n# Modify the permissions\nsudo chmod -R 755 VoodooI2C*\n\n# Load kexts\nsudo kextload -v VoodooI2C*\n</code></pre> <p>Of course, the first time you load kexts, you need to agree to the permission in the \"Security &amp; Privacy\" setting, and then restart the computer to successfully load them: </p> <p> </p> <p>After the above operations, the final viewing effect is as follows:</p> <p> </p> <p>It can be seen that from the dmesg log, this GDX1515 touchpad is working in polling mode.</p> <p>For the details of log viewing, a separate subsection will be opened below to introduce them in detail.</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#using-ioregistryexplore","title":"Using IORegistryExplore","text":"<p>The above method may be a bit cumbersome. Actually, using IORegistryExplorer can also directly show the current working state of the touchpad. Because under the device manager in Windows, the location path of my touchpad is:</p> <ul> <li><code>ACPI(_SB)#ACPI(PCI0)#(I2C1)#ACPI(ETPD)</code></li> <li><code>ACPI(_SB)#ACPI(USBX)#(I2C1)#ACPI(ETPD)</code></li> </ul> <p>So, searching for <code>ETPD</code> can show the detailed information of our touchpad. Generally, two results will be searched out. The following is the first result:</p> <p> </p> <p>However, the first result has no reference value. We usually focus on the second result searched out:</p> <p> </p> <p>The above picture is a typical situation where it is not working in interrupt mode.</p> <p>At this time, some netizens will surely ask, if it is in GPIO interrupt mode, what should it look like here?</p> <p>2333 This is a good question. I consulted Bat.bat guru. The following are the original words of the guru:</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#when-the-code-reaches-gpio-there-will-be-a-set-property-to-write-irq-and-pin-to-ioreg-so-when-using-ioregistryexplorer-to-view-just-pay-attention-to-whether-these-two-new-properties-exist","title":"When the code reaches GPIO, there will be a set property to write IRQ and Pin to ioreg. So, when using IORegistryExplorer to view, just pay attention to whether these two new properties exist.","text":"<p>Speaking of this, some netizens may still not be very clear. Below, I will post a screenshot of IORegistryExplorer in GPIO interrupt mode, and everyone should understand:</p> <p> </p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#customizing-and-patching-dsdt","title":"Customizing and Patching DSDT","text":""},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#extracting-dsdt","title":"Extracting DSDT","text":"<p>Since making the touchpad definitely requires customizing the SSDT, extracting the original DSDT of the motherboard is essential.</p> <p>There are many methods to extract DSDT. You can use Clover. Under Windows, you can use AIDA64. Under macOS, you can use DPCIManager. Just open it and click \"Extract DSDT\" in the upper - left corner:</p> <p> </p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#dsdt-troubleshooting","title":"DSDT Troubleshooting","text":"<p>You can directly load DSDT in ACPI through OC, or you can separately extract the relevant code of the touchpad in DSDT and save it as an SSDT file. Both methods are fine. Here, I directly modify it in DSDT (simple and crude).</p> <p>For DSDT troubleshooting, the essential MaciASL software is used here. Just click \"Compile\" to compile. If I'm not wrong, there will definitely be a bunch of errors:</p> <p> </p> <p>This is because the ACPI specifications of the DSDT of each motherboard are not unified. So, we have to modify the errors according to our own programming experience. It's not easy to describe this in an article because each motherboard is different. My errors here are relatively easy to understand. I just deleted these <code>Zero</code> codes directly. 23333 (Specific troubleshooting has to be done according to the corresponding error situation)</p> <p>Finally, it's successfully 0 errors:</p> <p> </p> <p>If DSDT has no problem, it can be directly loaded using OC:</p> <p> </p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#finding-the-touchpad-code","title":"Finding the Touchpad Code","text":"<p>Since from the previous information collection, we know that the path of the touchpad is <code>ETPD</code>, we can directly search for ETPD to find the touchpad code.</p> <p>It is found that the path in the lower - left corner also meets the situation of our previous information collection (<code>ACPI(_SB)#ACPI(PCI0)#(I2C1)#ACPI(ETPD)</code>):</p> <p> </p> <p>The touchpad code part is pasted below:</p> <pre><code>Scope (_SB.PCI0.I2C1)\n    {\n        Device (ETPD)\n        {\n            Name (_ADR, One)  // _ADR: Address\n            Name (ETPH, Package (0x01)\n            {\n                \"ASUE1407\"\n            })\n            Name (FTPH, Package (0x09)\n            {\n                \"FTE1001\", \n                \"FTE1200\", \n                \"FTE1200\", \n                \"FTE1300\", \n                \"FTE1300\", \n                \"FTE1201\", \n                \"FTE1200\", \n                \"FTE1200\", \n                \"FTE1200\"\n            })\n            Name (GTPH, Package (0x05)\n            {\n                \"GDX1505\", \n                \"GDX1300\", \n                \"GDX1200\", \n                \"GDX1301\", \n                \"GDX1515\"\n            })\n            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID\n            {\n                If (And (TPDI, 0x04))\n                {\n                    Return (DerefOf (Index (ETPH, TPHI)))\n                }\n\n                If (And (TPDI, 0x10))\n                {\n                    Return (DerefOf (Index (FTPH, TPHI)))\n                }\n\n                If (And (TPDI, 0x40))\n                {\n                    Return (DerefOf (Index (GTPH, TPHI)))\n                }\n\n                Return (\"ELAN1010\")\n            }\n\n            Name (_CID, \"PNP0C50\")  // _CID: Compatible ID\n            Name (_UID, One)  // _UID: Unique ID\n            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State\n            Method (_DSM, 4, NotSerialized)  // _DSM: Device - Specific Method\n            {\n                If (LEqual (Arg0, ToUUID (\"3cdff6f7-4267-4555-ad05-b30a3d8938de\") /* HID I2C Device */))\n                {\n                    If (LEqual (Arg2, Zero))\n                    {\n                        If (LEqual (Arg1, One))\n                        {\n                            Return (Buffer (One)\n                            {\n                                 0x03                                           \n                            })\n                        }\n                        Else\n                        {\n                            Return (Buffer (One)\n                            {\n                                 0x00                                           \n                            })\n                        }\n                    }\n\n                  If (LEqual (Arg2, One))\n                    {\n                        Return (One)\n                        }\n                    }\n                    Else\n                    {\n                        Return (Buffer (One)\n                        {\n                             0x00                                           \n                        })\n                    }\n                }\n          Method (_STA, 0, NotSerialized)  // _STA: Status\n          {\n                      If (LOr (LNotEqual (TPIF, One), LAnd (DSYN, One)))\n                      {\n                          Return (Zero)\n                      }\n\n                      Return (0x0F)\n               }\n\n          Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings\n          {\n                Name (SBFI, ResourceTemplate ()\n                {\n                    I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,\n                        AddressingMode7Bit, \"\\\\_SB.PCI0.I2C1\",\n                        0x00, ResourceConsumer,, Exclusive,\n                        )\n                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive,,, )\n                    {\n                        0x0000006D,\n                    }\n                })\n                Return (SBFI)\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#gpio-pinning-fixing","title":"GPIO Pinning Fixing","text":"<p>Here, I only introduce how to customize the GPIO interrupt. Polling and other modes are not within the scope of this article.</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#finding-the-key-touchpad-code","title":"Finding the Key Touchpad Code","text":"<p>According to the feature of the <code>_CRS</code> method, we can easily find a code snippet similar to the following in the touchpad code:</p> <pre><code>Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings\n{\n  Name (SBFI, ResourceTemplate ()\n        {\n          I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,\n                          AddressingMode7Bit, \"\\\\_SB.PCI0.I2C1\",\n                          0x00, ResourceConsumer,, Exclusive,\n                         )\n            Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive,,, )\n          {\n            0x0000006D,\n          }\n        })\n    Return (SBFI)\n}\n</code></pre>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#rename-sbfi","title":"Rename SBFI","text":"<p>When VoodooI2C calls the _CRS method of the touch device in the DSDT in GPIO interrupt mode, it always uses the <code>SBFG</code> parameter instead of the <code>SBFI</code> parameter. So the <code>SBFI</code> variable in our current touchpad code doesn't meet the requirements. We first rename <code>SBFI</code> to <code>SBFB</code>. As for the <code>SBFG</code> variable, we will add it separately later (if it doesn't exist in your DSDT).</p> <p><pre><code>Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings\n{\n  Name (SBFB, ResourceTemplate ()\n        {\n          I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,\n                          AddressingMode7Bit, \"\\\\_SB.PCI0.I2C1\",\n                          0x00, ResourceConsumer,, Exclusive,\n                         )\n  //         Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive,,, )\n\n  //        {\n  //          0x0000006D,\n  //        }\n        })\n    Return (SBFB)\n}\n</code></pre> After renaming, remove the following content in the _CRS method (the part commented in the above code):</p> <pre><code>Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive,,, )\n{\n  0x0000006D,\n}\n</code></pre>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#look-for-gpio-pin","title":"Look for GPIO Pin","text":"<p>Look for a code snippet similar to the following in the touchpad code:</p> <p><pre><code>Name (SBFG, ResourceTemplate ()\n{\n    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,\n        \"\\\\_SB.PCI0.GPI0\", 0x00, ResourceConsumer,,\n    )\n  {   // Pin list\n      0x0000\n  }\n})\n</code></pre> If you find it, congratulations. Your device may not need to calculate the GPIO Pin value. It doesn't matter if you don't find it. We can add it manually. See the details below.</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#add-gpio-template","title":"Add GPIO Template","text":"<p>Obviously, I can't find the GPIO - related code in my touchpad. So we need to copy the above code snippet and add it under the _CRS method:</p> <pre><code>Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings\n{\n  Name (SBFB, ResourceTemplate ()\n        {\n          I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,\n                          AddressingMode7Bit, \"\\\\_SB.PCI0.I2C1\",\n                          0x00, ResourceConsumer,, Exclusive,\n                         )\n        })\n    // The following is the newly added GPIO template code snippet\n    Name (SBFG, ResourceTemplate ()\n          {\n            GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,\n                     \"\\\\_SB.PCI0.GPI0\", 0x00, ResourceConsumer,,\n                    )\n            {   // Pin list\n              0x0000   // We will calculate this value later\n            }\n          })\n    Return (SBFB)\n}\n</code></pre>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#modify-the-_crs-return-value","title":"Modify the _CRS Return Value","text":"<p>Since we have also introduced the SBFG variable in the _CRS method, we need to change the default <code>Return (SBFB)</code> return value to:</p> <pre><code>Return (ConcatenateResTemplate (SBFB, SBFG))\n</code></pre> <p>Original words of the big shot Bat.bat: For devices with gpioint, there is no need to calculate the pin. For those without it, adding it usually won't succeed. Calculating the pin is actually the last - ditch solution.</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#calculate-the-gpio-pin-value","title":"Calculate the GPIO Pin Value","text":"<p>In the template we added above, the GPIO Pin value is <code>0x0000</code>. Generally, this won't work and can only serve as a placeholder. So we need to calculate a correct GPIO value. This step is crucial. Different CPUs have different calculation formulas. The following formula is also provided by Bat.bat.</p> <p> </p> <ul> <li>Skylake (intel 6th - generation CPU)</li> </ul> <pre><code>If APICPIN &gt; 47 And APICPIN &lt;= 79 Then     \n    GPIOPIN = APICPIN - 24   \n    GPIOPIN2 = APICPIN + 72  \nElseIf APICPIN &gt; 79 And APICPIN &lt;= 119 Then\n    GPIOPIN = APICPIN - 24\nEnd If\n</code></pre> <ul> <li>CoffeeLake - H (intel 8th - generation high - voltage CPU)</li> </ul> <pre><code>If APICPIN &gt; 47 And APICPIN &lt;= 71 Then   \n    GPIOPIN = APICPIN - 16   \n    GPIOPIN2 = APICPIN + 240 \n    If APICPIN &gt; 47 And APICPIN &lt;= 59 Then GPIOPIN3 = APICPIN + 304  \nElseIf APICPIN &gt; 71 And APICPIN &lt;= 95 Then \n    GPIOPIN = APICPIN - 8    \n    GPIOPIN3 = APICPIN + 152\n    GPIOPIN2 = APICPIN + 120 \nElseIf APICPIN &gt; 95 And APICPIN &lt;= 119 Then \n    GPIOPIN = APICPIN        \nIf APICPIN &gt; 108 And APICPIN &lt;= 115 Then \n    GPIOPIN2 = APICPIN + 20 \nEnd If\n</code></pre> <ul> <li>CoffeeLake - LF and Whiskylake (intel 8th - generation low - voltage CPU and Whiskylake - architecture CPU)</li> </ul> <pre><code>If APICPIN &gt; 47 And APICPIN &lt;= 71 Then      \n    GPIOPIN = APICPIN - 16   \n    GPIOPIN2 = APICPIN + 80  \nElseIf APICPIN &gt; 71 And APICPIN &lt;= 95 Then  \n    GPIOPIN2 = APICPIN + 184 \n    GPIOPIN = APICPIN + 88   \nElseIf APICPIN &gt; 95 And APICPIN &lt;= 119 Then \n    GPIOPIN = APICPIN        \nElseIf APICPIN &gt; 108 And APICPIN &lt;= 115 Then \n    GPIOPIN2 = APICPIN - 44 \nEnd If\n</code></pre> <p>The CPU of my laptop is <code>i7 - 10510U</code>, which is a low - voltage CPU of Comet Lake. We will find that there is no formula for the Comet Lake series above. However, Bat.bat said that the 10th - generation is a clone of the 8th - generation. So we can use the formula of CoffeeLake - LF and Whiskylake. By substituting the formula, we can calculate the decimal value of our GPIO Pin:</p> <p>The hexadecimal value of our APICPIN is 6d, and its decimal value is 109, which satisfies the following condition of the formula:</p> <p><pre><code>ElseIf APICPIN &gt; 95 And APICPIN &lt;= 119 Then \n    GPIOPIN = APICPIN    // GPIOPIN = 109\n</code></pre> That is, GPIOPIN = 109, and its hexadecimal value is <code>6d</code>.</p> <p>At the same time, we will find that our APICPIN also satisfies the following condition:</p> <p><pre><code>ElseIf APICPIN &gt; 108 And APICPIN &lt;= 115 Then \n    GPIOPIN2 = APICPIN - 44  // GPIOPIN2 = 109 - 44 = 65\n</code></pre> That is, GPIOPIN = 65, and its hexadecimal value is <code>41</code>.</p> <p>We can see that we have calculated two values, <code>6d</code> and <code>41</code>, and we can try to verify them one by one.</p> <p>In very rare cases, the calculated GPIO Pin value doesn't work. In this case, you can try some common values: <code>0x17</code>, <code>0x17B</code>, <code>0x34</code> and <code>0x55</code>.</p> <p>Finally, I tried the GPIO Pin value of my GDX1515 touchpad as <code>6d</code>:</p> <p> </p> <p>Here is a picture for a more intuitive view.</p>"},{"location":"Professional%20customization/Touchpad%20Interrupt%20Example/#final-effect","title":"Final Effect","text":"<p>Using IORegistryExplorer, we can see that our GDX1515 niche touchpad finally works in GPIO interrupt mode. We can see the <code>gpioPin</code> and <code>gpioIRQ</code> attribute values. It's perfect:</p> <p></p> <p>Let's also look at the dmesg log situation:</p> <p><pre><code># Found the GDX1515 touchpad of the I2C protocol\n[   44.313108]: VoodooI2CControllerDriver::pci8086,2e9 Found I2C device: GDX1515\n\n# ETPD found a valid _CRS method\n[   44.313178]: VoodooI2CDeviceNub::ETPD Found valid resources from _CRS method\n[   44.313182]: VoodooI2CControllerDriver::pci8086,2e8 Got bus configuration values\n[   44.313231]: VoodooI2CDeviceNub::ETPD Returned index 0x0 from _DSM or XDSM method is not supported\n[   44.313235]: VoodooI2CDeviceNub::ETPD Could not retrieve resources from _DSM or XDSM method\n\n# ETPD found a valid GPIO interrupt\n[   44.313244]: VoodooI2CDeviceNub::ETPD Found valid GPIO interrupts\n[   44.313344]: VoodooI2CControllerDriver::pci8086,2e8 Publishing device nubs\n\n# ETPD got the GPIO controller\n[   44.313347]: VoodooI2CDeviceNub::ETPD Got GPIO Controller! VoodooGPIOCannonLakeLP\n[   44.816012]: VoodooI2CHIDDevice:0x100000738 start\n\n# The reset of the GDX1515 device startup is completed\n[   44.919729]: VoodooI2CHIDDevice::GDX1515 Device initiated reset accomplished\n[   45.050029]: VoodooI2CHIDDevice:0x100000738 creating interfaces\n[   45.051068]: VoodooI2CHIDDevice:0x100000738 Matching has vendor DeviceUsagePage : ff0c bundleIdentifier com.apple.AppleUserHIDDrivers ioclass AppleUserHIDEventService but transport and vendorID is missing\n[   45.053582]: VoodooI2CPrecisionTouchpadHIDEventDriver:0x10000073d start\n[   45.059693]: open by VoodooI2CPrecisionTouchpadHIDEventDriver 0x10000073d (0x0)\n\n# GDX1515 enters Precision Touchpad Mode (PTP) mode, that is, high - precision touchpad mode\n[   45.059739]: VoodooI2CPrecisionTouchpadHIDEventDriver::GDX1515 Putting device into Precision Touchpad Mode\n</code></pre> We can also see from the log that it works perfectly in GPIO interrupt mode.</p> <p>For comparison, the log situations when it doesn't work in GPIO interrupt mode are attached below:</p> <ul> <li>Log in polling mode without custom DSDT</li> </ul> <pre><code>[   48.517816]: VoodooI2CControllerDriver::pci8086,2e9 Found I2C device: GDX1515\n[   48.517869]: VoodooI2CDeviceNub::ETPD Found valid resources from _CRS method\n[   48.517913]: VoodooI2CDeviceNub::ETPD Returned index 0x0 from _DSM or XDSM method is not supported\n[   48.517917]: VoodooI2CDeviceNub::ETPD Could not retrieve resources from _DSM or XDSM method\n\n# ETPD warning, found an incompatible APIC pin value 6d, which is greater than 2f\n[   48.517925]: VoodooI2CDeviceNub::ETPD Warning: Incompatible APIC interrupt pin (0x6d &gt; 0x2f)\n\n# ETPD can't find any APIC or GPIO interrupts. You may run in polling mode.\n[   48.517931]: VoodooI2CDeviceNub::ETPD Warning: Could not find any APIC nor GPIO interrupts. Your chosen satellite will run in polling mode if implemented.\n[   48.519529]: VoodooI2CHIDDevice:0x100000725 start\n\n# GDX1515 can't get the interrupt event source and switches to polling mode\n[   48.519539]: VoodooI2CHIDDevice::GDX1515 Warning: Could not get interrupt event source, using polling instead\n[   48.722472]: VoodooI2CHIDDevice::GDX1515 Device initiated reset accomplished\n[   48.854707]: VoodooI2CHIDDevice:0x100000725 creating interfaces\n[   48.856351]: VoodooI2CHIDDevice:0x100000725 Matching has vendor DeviceUsagePage : ff0c bundleIdentifier com.apple.AppleUserHIDDrivers ioclass AppleUserHIDEventService but transport and vendorID is missing\n[   48.860549]: VoodooI2CPrecisionTouchpadHIDEventDriver:0x10000072a start\n[   48.866671]: open by VoodooI2CPrecisionTouchpadHIDEventDriver 0x10000072a (0x0)\n\n# GDX1515 enters Precision Touchpad Mode (PTP) mode, that is, high - precision touchpad mode\n[   48.866716]: VoodooI2CPrecisionTouchpadHIDEventDriver::GDX1515 Putting device into Precision Touchpad Mode\n</code></pre> <ul> <li>Log with custom DSDT but incorrect GPIO</li> </ul> <pre><code>[   37.835221]: VoodooI2CControllerDriver::pci8086,2e9 Found I2C device: GDX1515\n[   37.835266]: VoodooI2CDeviceNub::ETPD Found valid resources from _CRS method\n[   37.835298]: VoodooI2CDeviceNub::ETPD Returned index 0x0 from _DSM or XDSM method is not supported\n[   37.835306]: VoodooI2CDeviceNub::ETPD Could not retrieve resources from _DSM or XDSM method\n[   37.835309]: KextLog: AuxKC bundle com.alexandred.VoodooI2CServices marked as loadable\n\n# ETPD found valid GPIO interrupts.\n[   37.835312]: VoodooI2CDeviceNub::ETPD Found valid GPIO interrupts\n[   37.835408]: VoodooI2CDeviceNub::ETPD Got GPIO Controller! VoodooGPIOCannonLakeLP\n[   38.337232]: VoodooI2CHIDDevice:0x100000761 start\n\n# Failed to obtain the hardware pin 81 of the GPIO pin (decimal of the wrong GPIO Pin), failed to obtain the interrupt event source, and switched to polling instead.\n[   38.337263]: VoodooGPIOCannonLakeLP::Failed getting hardware pin for GPIO pin 81VoodooI2CHIDDevice::GDX1515 Warning: Could not get interrupt event source, using polling instead\n[   38.539715]: VoodooI2CHIDDevice::GDX1515 Device initiated reset accomplished\n[   38.670485]: VoodooI2CHIDDevice:0x100000761 creating interfaces\n[   38.672136]: VoodooI2CHIDDevice:0x100000761 Matching has vendor DeviceUsagePage : ff0c bundleIdentifier com.apple.AppleUserHIDDrivers ioclass AppleUserHIDEventService but transport and vendorID is missing\n[   38.676469]: VoodooI2CPrecisionTouchpadHIDEventDriver:0x100000766 start\n[   38.682612]: open by VoodooI2CPrecisionTouchpadHIDEventDriver 0x100000766 (0x0)\n\n# GDX1515 enters Precision Touchpad Mode (PTP) mode, that is, high - precision touchpad mode.\n[   38.682668]: VoodooI2CPrecisionTouchpadHIDEventDriver::GDX1515 Putting device into Precision Touchpad Mode\n</code></pre>"},{"location":"Professional%20customization/Troubleshooting%20Sleep%20Issues/","title":"Troubleshooting Sleep Issues","text":"<p>Just refer to the official one here: https://dortania.github.io/OpenCore-Post-Install/universal/sleep.html</p>"},{"location":"Professional%20customization/USB%20customization/","title":"USB customization","text":""},{"location":"Professional%20customization/USB%20customization/#the-significance-of-usb-customization","title":"The Significance of USB Customization","text":"<p>If the USB customization is not perfect, the following situations may occur:</p> <ol> <li>Bluetooth may not work because Bluetooth uses the USB protocol.</li> <li>Unable to enter the system installation interface normally, with prompts related to the mouse or Magic Trackpad.</li> <li>The system wakes up immediately from sleep because USB devices like Bluetooth are not built - in.</li> <li>USB ports have no response or the speed cannot reach its maximum.</li> <li>It is recommended to customize the USB before installing the system to avoid unnecessary troubles later.</li> </ol>"},{"location":"Professional%20customization/USB%20customization/#a-little-more-explanation","title":"A Little More Explanation","text":"<p>In the early days, the Hackintool was often used to customize USB. However, since macOS 11 and later versions, this method no longer works well. Currently, the most perfect method is to use USBToolBox in Windows to customize the USB, and finally use Hackintool for simple fine - tuning and correction.</p>"},{"location":"Professional%20customization/USB%20customization/#running-the-tool","title":"Running the Tool","text":"<p>The official project address of USBToolBox: https://github.com/USBToolBox/tool/</p> <p>The compiled download address: https://github.com/USBToolBox/tool/releases</p> <p>The download address on Lanzouyun: https://sqlsec.lanzouw.com/iqncozmga8b</p> <p>Download \"Windows.exe\" to the Windows platform and double - click to run it:</p> <p> </p>"},{"location":"Professional%20customization/USB%20customization/#detecting-ports","title":"Detecting Ports","text":"<p>Input D and then press Enter to detect the ports on the computer:</p> <p> </p> <p>At this time, the following interface will appear:</p> <p> </p> <p>This interface will refresh every 5 seconds.</p>"},{"location":"Professional%20customization/USB%20customization/#inserting-usb-devices","title":"Inserting USB Devices","text":"<p>Insert USB 2.0 and USB 3.X devices into each USB port one by one. Stay for 5 seconds each time after insertion. If there are Type - C devices, insert them on both sides (front and back) and record respectively. Finally, the effect of port detection on my laptop is as follows:</p> <p> </p> <p>After inserting all the devices one by one, input B and press Enter to return to the main menu:</p> <p> </p>"},{"location":"Professional%20customization/USB%20customization/#viewing-ports","title":"Viewing Ports","text":"<p>Return to the main menu and input S to view the results of port detection:</p> <p> </p> <p>The results of port detection of my device are as follows:</p> <p> </p> <p>It can be seen that these 9 ports 1, 2, 4, 5, 6, 10, 13, 15, and 16 are all active USB ports.</p>"},{"location":"Professional%20customization/USB%20customization/#exporting-ports","title":"Exporting Ports","text":"<p>If you feel that there is no problem with the results at this time, input K and press Enter to export the <code>UTBMap.kext</code> file:</p> <p> </p> <p>Under normal circumstances, it will be saved in the same directory as the current program:</p> <p></p>"},{"location":"Professional%20customization/USB%20customization/#oc-loading-kexts","title":"OC Loading Kexts","text":"<p>Besides the generated <code>UTBMap.kext</code> file mentioned above, we also need to use it with <code>USBToolBox.kext</code>.</p> <p>The official download address of USBToolBox.kext: https://github.com/USBToolBox/kext/releases</p> <p>The download address of version 1.10 on Lanzouyun in China: https://sqlsec.lanzouw.com/iDh3gzmlxsj</p> <p>Put the two Kexts mentioned above under the Kexts folder of OC and load them. Then remember to uncheck XhciPortLimit:</p> <p> </p> <p>Restart to make it effective. So far, your USB has been basically customized, and there will be no problem in normal use. Those with obsessive - compulsive disorder can continue reading.</p>"},{"location":"Professional%20customization/USB%20customization/#hackintool-verification","title":"Hackintool Verification","text":"<p>Use Hackintool to check and find that each USB port is recognized and working normally:</p> <p> </p> <p>However, after inserting devices into each port, it is found that there are indeed more SS02 ports. People without obsessive - compulsive disorder don't need to worry about it. To quote Luo Yonghao's famous saying: It still works, doesn't it?</p> <p> </p>"},{"location":"Professional%20customization/USB%20customization/#hackintool-optimization","title":"Hackintool Optimization","text":"<p>Use Hackintool to delete the redundant SS02 ports again, then export USBPorts.kext, load it with OC, and then cancel the enabled status of the two Kexts of USBToolBox previously:</p> <p> </p> <p>Restart, and the final effect is as follows:</p> <p> </p> <p>Finally, those with obsessive - compulsive disorder will feel comfortable as there are no redundant ports.</p> <p>Actually, there are still some flaws. The first HS01 should be a USB2 device. The solution is to use Hackintool to correct and customize it again. But I'm lazy here. It still works, doesn't it?</p> <p>In this noisy and impetuous era, how many people still insist on writing blogs and outputting original articles? Writing a blog always feels like generating electricity with love...</p> <p>If you happen to be wealthy and feel that this article has helped you, you can consider making a donation to this article to maintain the high - cost server operation (domain name cost, server cost, CDN cost, etc.)</p>"},{"location":"USB%20flash%20drive%20creation/Download%20the%20image/","title":"Download the image","text":"<p>If you want to download the official Apple image and make it by yourself (not suitable for beginners), you can directly refer to the official OC documentation. I won't copy it here but just post the address:</p> <p>Creating the USB | OpenCore Install Guide</p>"},{"location":"USB%20flash%20drive%20creation/Structural%20Explanation/","title":"Structural Explanation","text":"<p>The Hackintosh USB flash drive has been created. Now, I'll briefly explain the current structure division of the USB flash drive and what its functions are. Without further ado, let's look at the pictures directly:</p> <p>Under macOS, you can use Hackintool to directly and visually view the structural information of the disk:</p> <p> </p> <p>If you are using Windows, you can also view it by using the classic disk tool DiskGenius. Now, I'll show you what's in these three partitions one by one.</p>"},{"location":"USB%20flash%20drive%20creation/Structural%20Explanation/#mount-efi","title":"Mount EFI","text":"<p>In most cases, the EFI partition is hidden by default. Under the Hackintool, we can right - click and select \"Mount\". After entering the password, the EFI partition can be mounted:</p> <p> </p> <p>After mounting the EFI partition, all three partitions on the desktop are displayed:</p> <p> </p>"},{"location":"USB%20flash%20drive%20creation/Structural%20Explanation/#efi","title":"EFI","text":"<p>The default contents of the files in the EFI partition are as follows:</p> <p> </p> <p>Senior Xiaobing also put two apps, and we can choose to keep them selectively.</p> <p>The default EFI folder is for Clover, so later we need to delete the entire EFI folder and then copy the EFI of OC in. </p>"},{"location":"USB%20flash%20drive%20creation/Structural%20Explanation/#wepe","title":"WEPE","text":"<p>The default contents of the files in the WEPE partition are as follows:</p> <p> </p> <p>We usually don't need to worry about this partition. Although there is also an EFI folder here, it is used to boot Windows PE. Just be aware of it. </p>"},{"location":"USB%20flash%20drive%20creation/Structural%20Explanation/#install-macos-xxx","title":"Install macOS XXX","text":"<p>The official Apple system installation package is in the Install macOS XXX partition. Actually, it is in the format ending with.app. Basically, all Apple applications are in this format. In fact, after we successfully install Hackintosh later, we can also manually download this image in the AppStore:</p> <p> </p> <p>So far, the boot disk has been initially created. Next, we need to configure an EFI driver configuration file suitable for our computer model. After configuring the EFI, just put it directly into the EFI partition of the USB flash drive.</p>"},{"location":"USB%20flash%20drive%20creation/Write%20to%20the%20image/","title":"Write to the image","text":"<p>There are actually many tools for writing images. Here I recommend a tool that has emerged as a strong contender recently - balenaEtcher.</p> <p> </p> <p>Officially, versions for Windows, macOS, and Linux are supported. You can use it after downloading. Here is a brief introduction to the method of installing and creating an image:</p> <p> </p> <p>This software is also relatively easy to use. There are just three steps as marked in the above figure. Isn't it simple?</p> <p>Since the USB flash drive in my hand is modified from a solid - state drive, the writing was completed within a few minutes. The prompt message after successful writing is as follows:</p> <p></p>"}]}